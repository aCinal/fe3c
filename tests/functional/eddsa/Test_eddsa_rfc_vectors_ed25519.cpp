#include <CppUTest/TestHarness.h>
#include <fe3c/eddsa.h>
#include <curves/curves.h>

TEST_GROUP(EDDSA_RFC_VECTORS_ED25519) {

};

TEST(EDDSA_RFC_VECTORS_ED25519, Test1_DerivePublicKey) {

    const u8 secret_key[] = \
        "\x9d\x61\xb1\x9d\xef\xfd\x5a\x60\xba\x84\x4a\xf4\x92\xec\x2c\xc4" \
        "\x44\x49\xc5\x69\x7b\x32\x69\x19\x70\x3b\xac\x03\x1c\xae\x7f\x60";
    const u8 expected_public_key[] = \
        "\xd7\x5a\x98\x01\x82\xb1\x0a\xb7\xd5\x4b\xfe\xd3\xc9\x64\x07\x3a" \
        "\x0e\xe1\x72\xf3\xda\xa6\x23\x25\xaf\x02\x1a\x68\xf7\x07\x51\x1a";

    u8 public_key[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_derive_public_key(public_key, secret_key, EDDSA_CURVE_ED25519);
    MEMCMP_EQUAL(expected_public_key, public_key, eddsa_get_public_key_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, Test1_Sign) {

    const u8 secret_key[] = \
        "\x9d\x61\xb1\x9d\xef\xfd\x5a\x60\xba\x84\x4a\xf4\x92\xec\x2c\xc4" \
        "\x44\x49\xc5\x69\x7b\x32\x69\x19\x70\x3b\xac\x03\x1c\xae\x7f\x60";
    const u8 message[] = "";
    const u8 context[] = "";
    const u8 expected_signature[] = \
        "\xe5\x56\x43\x00\xc3\x60\xac\x72\x90\x86\xe2\xcc\x80\x6e\x82\x8a" \
        "\x84\x87\x7f\x1e\xb8\xe5\xd9\x74\xd8\x73\xe0\x65\x22\x49\x01\x55" \
        "\x5f\xb8\x82\x15\x90\xa3\x3b\xac\xc6\x1e\x39\x70\x1c\xf9\xb4\x6b" \
        "\xd2\x5b\xf5\xf0\x59\x5b\xbe\x24\x65\x51\x41\x43\x8e\x7a\x10\x0b";

    u8 signature[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_sign_request req = {
        .signature = signature,
        .message = message,
        .secret_key = secret_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    eddsa_sign(&req);
    MEMCMP_EQUAL(expected_signature, signature, eddsa_get_signature_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, Test1_Verify) {

    const u8 message[] = "";
    const u8 context[] = "";
    const u8 signature[] = \
        "\xe5\x56\x43\x00\xc3\x60\xac\x72\x90\x86\xe2\xcc\x80\x6e\x82\x8a" \
        "\x84\x87\x7f\x1e\xb8\xe5\xd9\x74\xd8\x73\xe0\x65\x22\x49\x01\x55" \
        "\x5f\xb8\x82\x15\x90\xa3\x3b\xac\xc6\x1e\x39\x70\x1c\xf9\xb4\x6b" \
        "\xd2\x5b\xf5\xf0\x59\x5b\xbe\x24\x65\x51\x41\x43\x8e\x7a\x10\x0b";
    const u8 public_key[] = \
        "\xd7\x5a\x98\x01\x82\xb1\x0a\xb7\xd5\x4b\xfe\xd3\xc9\x64\x07\x3a" \
        "\x0e\xe1\x72\xf3\xda\xa6\x23\x25\xaf\x02\x1a\x68\xf7\x07\x51\x1a";

    eddsa_verify_request req = {
        .signature = signature,
        .message = message,
        .public_key = public_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    int verified = eddsa_verify(&req);
    CHECK_EQUAL(1, verified);
}

TEST(EDDSA_RFC_VECTORS_ED25519, Test2_DerivePublicKey) {

    const u8 secret_key[] = \
        "\x4c\xcd\x08\x9b\x28\xff\x96\xda\x9d\xb6\xc3\x46\xec\x11\x4e\x0f" \
        "\x5b\x8a\x31\x9f\x35\xab\xa6\x24\xda\x8c\xf6\xed\x4f\xb8\xa6\xfb";
    const u8 expected_public_key[] = \
        "\x3d\x40\x17\xc3\xe8\x43\x89\x5a\x92\xb7\x0a\xa7\x4d\x1b\x7e\xbc" \
        "\x9c\x98\x2c\xcf\x2e\xc4\x96\x8c\xc0\xcd\x55\xf1\x2a\xf4\x66\x0c";

    u8 public_key[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_derive_public_key(public_key, secret_key, EDDSA_CURVE_ED25519);
    MEMCMP_EQUAL(expected_public_key, public_key, eddsa_get_public_key_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, Test2_Sign) {

    const u8 secret_key[] = \
        "\x4c\xcd\x08\x9b\x28\xff\x96\xda\x9d\xb6\xc3\x46\xec\x11\x4e\x0f" \
        "\x5b\x8a\x31\x9f\x35\xab\xa6\x24\xda\x8c\xf6\xed\x4f\xb8\xa6\xfb";
    const u8 message[] = "\x72";
    const u8 context[] = "";
    const u8 expected_signature[] = \
        "\x92\xa0\x09\xa9\xf0\xd4\xca\xb8\x72\x0e\x82\x0b\x5f\x64\x25\x40" \
        "\xa2\xb2\x7b\x54\x16\x50\x3f\x8f\xb3\x76\x22\x23\xeb\xdb\x69\xda" \
        "\x08\x5a\xc1\xe4\x3e\x15\x99\x6e\x45\x8f\x36\x13\xd0\xf1\x1d\x8c" \
        "\x38\x7b\x2e\xae\xb4\x30\x2a\xee\xb0\x0d\x29\x16\x12\xbb\x0c\x00";

    u8 signature[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_sign_request req = {
        .signature = signature,
        .message = message,
        .secret_key = secret_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    eddsa_sign(&req);
    MEMCMP_EQUAL(expected_signature, signature, eddsa_get_signature_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, Test2_Verify) {

    const u8 message[] = "\x72";
    const u8 context[] = "";
    const u8 signature[] = \
        "\x92\xa0\x09\xa9\xf0\xd4\xca\xb8\x72\x0e\x82\x0b\x5f\x64\x25\x40" \
        "\xa2\xb2\x7b\x54\x16\x50\x3f\x8f\xb3\x76\x22\x23\xeb\xdb\x69\xda" \
        "\x08\x5a\xc1\xe4\x3e\x15\x99\x6e\x45\x8f\x36\x13\xd0\xf1\x1d\x8c" \
        "\x38\x7b\x2e\xae\xb4\x30\x2a\xee\xb0\x0d\x29\x16\x12\xbb\x0c\x00";
    const u8 public_key[] = \
        "\x3d\x40\x17\xc3\xe8\x43\x89\x5a\x92\xb7\x0a\xa7\x4d\x1b\x7e\xbc" \
        "\x9c\x98\x2c\xcf\x2e\xc4\x96\x8c\xc0\xcd\x55\xf1\x2a\xf4\x66\x0c";

    eddsa_verify_request req = {
        .signature = signature,
        .message = message,
        .public_key = public_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    int verified = eddsa_verify(&req);
    CHECK_EQUAL(1, verified);
}

TEST(EDDSA_RFC_VECTORS_ED25519, Test3_DerivePublicKey) {

    const u8 secret_key[] = \
        "\xc5\xaa\x8d\xf4\x3f\x9f\x83\x7b\xed\xb7\x44\x2f\x31\xdc\xb7\xb1" \
        "\x66\xd3\x85\x35\x07\x6f\x09\x4b\x85\xce\x3a\x2e\x0b\x44\x58\xf7";
    const u8 expected_public_key[] = \
        "\xfc\x51\xcd\x8e\x62\x18\xa1\xa3\x8d\xa4\x7e\xd0\x02\x30\xf0\x58" \
        "\x08\x16\xed\x13\xba\x33\x03\xac\x5d\xeb\x91\x15\x48\x90\x80\x25";

    u8 public_key[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_derive_public_key(public_key, secret_key, EDDSA_CURVE_ED25519);
    MEMCMP_EQUAL(expected_public_key, public_key, eddsa_get_public_key_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, Test3_Sign) {

    const u8 secret_key[] = \
        "\xc5\xaa\x8d\xf4\x3f\x9f\x83\x7b\xed\xb7\x44\x2f\x31\xdc\xb7\xb1" \
        "\x66\xd3\x85\x35\x07\x6f\x09\x4b\x85\xce\x3a\x2e\x0b\x44\x58\xf7";
    const u8 message[] = "\xaf\x82";
    const u8 context[] = "";
    const u8 expected_signature[] = \
        "\x62\x91\xd6\x57\xde\xec\x24\x02\x48\x27\xe6\x9c\x3a\xbe\x01\xa3" \
        "\x0c\xe5\x48\xa2\x84\x74\x3a\x44\x5e\x36\x80\xd7\xdb\x5a\xc3\xac" \
        "\x18\xff\x9b\x53\x8d\x16\xf2\x90\xae\x67\xf7\x60\x98\x4d\xc6\x59" \
        "\x4a\x7c\x15\xe9\x71\x6e\xd2\x8d\xc0\x27\xbe\xce\xea\x1e\xc4\x0a";

    u8 signature[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_sign_request req = {
        .signature = signature,
        .message = message,
        .secret_key = secret_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    eddsa_sign(&req);
    MEMCMP_EQUAL(expected_signature, signature, eddsa_get_signature_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, Test3_Verify) {

    const u8 message[] = "\xaf\x82";
    const u8 context[] = "";
    const u8 signature[] = \
        "\x62\x91\xd6\x57\xde\xec\x24\x02\x48\x27\xe6\x9c\x3a\xbe\x01\xa3" \
        "\x0c\xe5\x48\xa2\x84\x74\x3a\x44\x5e\x36\x80\xd7\xdb\x5a\xc3\xac" \
        "\x18\xff\x9b\x53\x8d\x16\xf2\x90\xae\x67\xf7\x60\x98\x4d\xc6\x59" \
        "\x4a\x7c\x15\xe9\x71\x6e\xd2\x8d\xc0\x27\xbe\xce\xea\x1e\xc4\x0a";
    const u8 public_key[] = \
        "\xfc\x51\xcd\x8e\x62\x18\xa1\xa3\x8d\xa4\x7e\xd0\x02\x30\xf0\x58" \
        "\x08\x16\xed\x13\xba\x33\x03\xac\x5d\xeb\x91\x15\x48\x90\x80\x25";

    eddsa_verify_request req = {
        .signature = signature,
        .message = message,
        .public_key = public_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    int verified = eddsa_verify(&req);
    CHECK_EQUAL(1, verified);
}

TEST(EDDSA_RFC_VECTORS_ED25519, Test1024_DerivePublicKey) {

    const u8 secret_key[] = \
        "\xf5\xe5\x76\x7c\xf1\x53\x31\x95\x17\x63\x0f\x22\x68\x76\xb8\x6c" \
        "\x81\x60\xcc\x58\x3b\xc0\x13\x74\x4c\x6b\xf2\x55\xf5\xcc\x0e\xe5";
    const u8 expected_public_key[] = \
        "\x27\x81\x17\xfc\x14\x4c\x72\x34\x0f\x67\xd0\xf2\x31\x6e\x83\x86" \
        "\xce\xff\xbf\x2b\x24\x28\xc9\xc5\x1f\xef\x7c\x59\x7f\x1d\x42\x6e";

    u8 public_key[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_derive_public_key(public_key, secret_key, EDDSA_CURVE_ED25519);
    MEMCMP_EQUAL(expected_public_key, public_key, eddsa_get_public_key_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, Test1024_Sign) {

    const u8 secret_key[] = \
        "\xf5\xe5\x76\x7c\xf1\x53\x31\x95\x17\x63\x0f\x22\x68\x76\xb8\x6c" \
        "\x81\x60\xcc\x58\x3b\xc0\x13\x74\x4c\x6b\xf2\x55\xf5\xcc\x0e\xe5";
    const u8 message[] = \
        "\x08\xb8\xb2\xb7\x33\x42\x42\x43\x76\x0f\xe4\x26\xa4\xb5\x49\x08" \
        "\x63\x21\x10\xa6\x6c\x2f\x65\x91\xea\xbd\x33\x45\xe3\xe4\xeb\x98" \
        "\xfa\x6e\x26\x4b\xf0\x9e\xfe\x12\xee\x50\xf8\xf5\x4e\x9f\x77\xb1" \
        "\xe3\x55\xf6\xc5\x05\x44\xe2\x3f\xb1\x43\x3d\xdf\x73\xbe\x84\xd8" \
        "\x79\xde\x7c\x00\x46\xdc\x49\x96\xd9\xe7\x73\xf4\xbc\x9e\xfe\x57" \
        "\x38\x82\x9a\xdb\x26\xc8\x1b\x37\xc9\x3a\x1b\x27\x0b\x20\x32\x9d" \
        "\x65\x86\x75\xfc\x6e\xa5\x34\xe0\x81\x0a\x44\x32\x82\x6b\xf5\x8c" \
        "\x94\x1e\xfb\x65\xd5\x7a\x33\x8b\xbd\x2e\x26\x64\x0f\x89\xff\xbc" \
        "\x1a\x85\x8e\xfc\xb8\x55\x0e\xe3\xa5\xe1\x99\x8b\xd1\x77\xe9\x3a" \
        "\x73\x63\xc3\x44\xfe\x6b\x19\x9e\xe5\xd0\x2e\x82\xd5\x22\xc4\xfe" \
        "\xba\x15\x45\x2f\x80\x28\x8a\x82\x1a\x57\x91\x16\xec\x6d\xad\x2b" \
        "\x3b\x31\x0d\xa9\x03\x40\x1a\xa6\x21\x00\xab\x5d\x1a\x36\x55\x3e" \
        "\x06\x20\x3b\x33\x89\x0c\xc9\xb8\x32\xf7\x9e\xf8\x05\x60\xcc\xb9" \
        "\xa3\x9c\xe7\x67\x96\x7e\xd6\x28\xc6\xad\x57\x3c\xb1\x16\xdb\xef" \
        "\xef\xd7\x54\x99\xda\x96\xbd\x68\xa8\xa9\x7b\x92\x8a\x8b\xbc\x10" \
        "\x3b\x66\x21\xfc\xde\x2b\xec\xa1\x23\x1d\x20\x6b\xe6\xcd\x9e\xc7" \
        "\xaf\xf6\xf6\xc9\x4f\xcd\x72\x04\xed\x34\x55\xc6\x8c\x83\xf4\xa4" \
        "\x1d\xa4\xaf\x2b\x74\xef\x5c\x53\xf1\xd8\xac\x70\xbd\xcb\x7e\xd1" \
        "\x85\xce\x81\xbd\x84\x35\x9d\x44\x25\x4d\x95\x62\x9e\x98\x55\xa9" \
        "\x4a\x7c\x19\x58\xd1\xf8\xad\xa5\xd0\x53\x2e\xd8\xa5\xaa\x3f\xb2" \
        "\xd1\x7b\xa7\x0e\xb6\x24\x8e\x59\x4e\x1a\x22\x97\xac\xbb\xb3\x9d" \
        "\x50\x2f\x1a\x8c\x6e\xb6\xf1\xce\x22\xb3\xde\x1a\x1f\x40\xcc\x24" \
        "\x55\x41\x19\xa8\x31\xa9\xaa\xd6\x07\x9c\xad\x88\x42\x5d\xe6\xbd" \
        "\xe1\xa9\x18\x7e\xbb\x60\x92\xcf\x67\xbf\x2b\x13\xfd\x65\xf2\x70" \
        "\x88\xd7\x8b\x7e\x88\x3c\x87\x59\xd2\xc4\xf5\xc6\x5a\xdb\x75\x53" \
        "\x87\x8a\xd5\x75\xf9\xfa\xd8\x78\xe8\x0a\x0c\x9b\xa6\x3b\xcb\xcc" \
        "\x27\x32\xe6\x94\x85\xbb\xc9\xc9\x0b\xfb\xd6\x24\x81\xd9\x08\x9b" \
        "\xec\xcf\x80\xcf\xe2\xdf\x16\xa2\xcf\x65\xbd\x92\xdd\x59\x7b\x07" \
        "\x07\xe0\x91\x7a\xf4\x8b\xbb\x75\xfe\xd4\x13\xd2\x38\xf5\x55\x5a" \
        "\x7a\x56\x9d\x80\xc3\x41\x4a\x8d\x08\x59\xdc\x65\xa4\x61\x28\xba" \
        "\xb2\x7a\xf8\x7a\x71\x31\x4f\x31\x8c\x78\x2b\x23\xeb\xfe\x80\x8b" \
        "\x82\xb0\xce\x26\x40\x1d\x2e\x22\xf0\x4d\x83\xd1\x25\x5d\xc5\x1a" \
        "\xdd\xd3\xb7\x5a\x2b\x1a\xe0\x78\x45\x04\xdf\x54\x3a\xf8\x96\x9b" \
        "\xe3\xea\x70\x82\xff\x7f\xc9\x88\x8c\x14\x4d\xa2\xaf\x58\x42\x9e" \
        "\xc9\x60\x31\xdb\xca\xd3\xda\xd9\xaf\x0d\xcb\xaa\xaf\x26\x8c\xb8" \
        "\xfc\xff\xea\xd9\x4f\x3c\x7c\xa4\x95\xe0\x56\xa9\xb4\x7a\xcd\xb7" \
        "\x51\xfb\x73\xe6\x66\xc6\xc6\x55\xad\xe8\x29\x72\x97\xd0\x7a\xd1" \
        "\xba\x5e\x43\xf1\xbc\xa3\x23\x01\x65\x13\x39\xe2\x29\x04\xcc\x8c" \
        "\x42\xf5\x8c\x30\xc0\x4a\xaf\xdb\x03\x8d\xda\x08\x47\xdd\x98\x8d" \
        "\xcd\xa6\xf3\xbf\xd1\x5c\x4b\x4c\x45\x25\x00\x4a\xa0\x6e\xef\xf8" \
        "\xca\x61\x78\x3a\xac\xec\x57\xfb\x3d\x1f\x92\xb0\xfe\x2f\xd1\xa8" \
        "\x5f\x67\x24\x51\x7b\x65\xe6\x14\xad\x68\x08\xd6\xf6\xee\x34\xdf" \
        "\xf7\x31\x0f\xdc\x82\xae\xbf\xd9\x04\xb0\x1e\x1d\xc5\x4b\x29\x27" \
        "\x09\x4b\x2d\xb6\x8d\x6f\x90\x3b\x68\x40\x1a\xde\xbf\x5a\x7e\x08" \
        "\xd7\x8f\xf4\xef\x5d\x63\x65\x3a\x65\x04\x0c\xf9\xbf\xd4\xac\xa7" \
        "\x98\x4a\x74\xd3\x71\x45\x98\x67\x80\xfc\x0b\x16\xac\x45\x16\x49" \
        "\xde\x61\x88\xa7\xdb\xdf\x19\x1f\x64\xb5\xfc\x5e\x2a\xb4\x7b\x57" \
        "\xf7\xf7\x27\x6c\xd4\x19\xc1\x7a\x3c\xa8\xe1\xb9\x39\xae\x49\xe4" \
        "\x88\xac\xba\x6b\x96\x56\x10\xb5\x48\x01\x09\xc8\xb1\x7b\x80\xe1" \
        "\xb7\xb7\x50\xdf\xc7\x59\x8d\x5d\x50\x11\xfd\x2d\xcc\x56\x00\xa3" \
        "\x2e\xf5\xb5\x2a\x1e\xcc\x82\x0e\x30\x8a\xa3\x42\x72\x1a\xac\x09" \
        "\x43\xbf\x66\x86\xb6\x4b\x25\x79\x37\x65\x04\xcc\xc4\x93\xd9\x7e" \
        "\x6a\xed\x3f\xb0\xf9\xcd\x71\xa4\x3d\xd4\x97\xf0\x1f\x17\xc0\xe2" \
        "\xcb\x37\x97\xaa\x2a\x2f\x25\x66\x56\x16\x8e\x6c\x49\x6a\xfc\x5f" \
        "\xb9\x32\x46\xf6\xb1\x11\x63\x98\xa3\x46\xf1\xa6\x41\xf3\xb0\x41" \
        "\xe9\x89\xf7\x91\x4f\x90\xcc\x2c\x7f\xff\x35\x78\x76\xe5\x06\xb5" \
        "\x0d\x33\x4b\xa7\x7c\x22\x5b\xc3\x07\xba\x53\x71\x52\xf3\xf1\x61" \
        "\x0e\x4e\xaf\xe5\x95\xf6\xd9\xd9\x0d\x11\xfa\xa9\x33\xa1\x5e\xf1" \
        "\x36\x95\x46\x86\x8a\x7f\x3a\x45\xa9\x67\x68\xd4\x0f\xd9\xd0\x34" \
        "\x12\xc0\x91\xc6\x31\x5c\xf4\xfd\xe7\xcb\x68\x60\x69\x37\x38\x0d" \
        "\xb2\xea\xaa\x70\x7b\x4c\x41\x85\xc3\x2e\xdd\xcd\xd3\x06\x70\x5e" \
        "\x4d\xc1\xff\xc8\x72\xee\xee\x47\x5a\x64\xdf\xac\x86\xab\xa4\x1c" \
        "\x06\x18\x98\x3f\x87\x41\xc5\xef\x68\xd3\xa1\x01\xe8\xa3\xb8\xca" \
        "\xc6\x0c\x90\x5c\x15\xfc\x91\x08\x40\xb9\x4c\x00\xa0\xb9\xd0";
    const u8 context[] = "";
    const u8 expected_signature[] = \
        "\x0a\xab\x4c\x90\x05\x01\xb3\xe2\x4d\x7c\xdf\x46\x63\x32\x6a\x3a" \
        "\x87\xdf\x5e\x48\x43\xb2\xcb\xdb\x67\xcb\xf6\xe4\x60\xfe\xc3\x50" \
        "\xaa\x53\x71\xb1\x50\x8f\x9f\x45\x28\xec\xea\x23\xc4\x36\xd9\x4b" \
        "\x5e\x8f\xcd\x4f\x68\x1e\x30\xa6\xac\x00\xa9\x70\x4a\x18\x8a\x03";

    u8 signature[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_sign_request req = {
        .signature = signature,
        .message = message,
        .secret_key = secret_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    eddsa_sign(&req);
    MEMCMP_EQUAL(expected_signature, signature, eddsa_get_signature_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, Test1024_Verify) {

    const u8 message[] = \
        "\x08\xb8\xb2\xb7\x33\x42\x42\x43\x76\x0f\xe4\x26\xa4\xb5\x49\x08" \
        "\x63\x21\x10\xa6\x6c\x2f\x65\x91\xea\xbd\x33\x45\xe3\xe4\xeb\x98" \
        "\xfa\x6e\x26\x4b\xf0\x9e\xfe\x12\xee\x50\xf8\xf5\x4e\x9f\x77\xb1" \
        "\xe3\x55\xf6\xc5\x05\x44\xe2\x3f\xb1\x43\x3d\xdf\x73\xbe\x84\xd8" \
        "\x79\xde\x7c\x00\x46\xdc\x49\x96\xd9\xe7\x73\xf4\xbc\x9e\xfe\x57" \
        "\x38\x82\x9a\xdb\x26\xc8\x1b\x37\xc9\x3a\x1b\x27\x0b\x20\x32\x9d" \
        "\x65\x86\x75\xfc\x6e\xa5\x34\xe0\x81\x0a\x44\x32\x82\x6b\xf5\x8c" \
        "\x94\x1e\xfb\x65\xd5\x7a\x33\x8b\xbd\x2e\x26\x64\x0f\x89\xff\xbc" \
        "\x1a\x85\x8e\xfc\xb8\x55\x0e\xe3\xa5\xe1\x99\x8b\xd1\x77\xe9\x3a" \
        "\x73\x63\xc3\x44\xfe\x6b\x19\x9e\xe5\xd0\x2e\x82\xd5\x22\xc4\xfe" \
        "\xba\x15\x45\x2f\x80\x28\x8a\x82\x1a\x57\x91\x16\xec\x6d\xad\x2b" \
        "\x3b\x31\x0d\xa9\x03\x40\x1a\xa6\x21\x00\xab\x5d\x1a\x36\x55\x3e" \
        "\x06\x20\x3b\x33\x89\x0c\xc9\xb8\x32\xf7\x9e\xf8\x05\x60\xcc\xb9" \
        "\xa3\x9c\xe7\x67\x96\x7e\xd6\x28\xc6\xad\x57\x3c\xb1\x16\xdb\xef" \
        "\xef\xd7\x54\x99\xda\x96\xbd\x68\xa8\xa9\x7b\x92\x8a\x8b\xbc\x10" \
        "\x3b\x66\x21\xfc\xde\x2b\xec\xa1\x23\x1d\x20\x6b\xe6\xcd\x9e\xc7" \
        "\xaf\xf6\xf6\xc9\x4f\xcd\x72\x04\xed\x34\x55\xc6\x8c\x83\xf4\xa4" \
        "\x1d\xa4\xaf\x2b\x74\xef\x5c\x53\xf1\xd8\xac\x70\xbd\xcb\x7e\xd1" \
        "\x85\xce\x81\xbd\x84\x35\x9d\x44\x25\x4d\x95\x62\x9e\x98\x55\xa9" \
        "\x4a\x7c\x19\x58\xd1\xf8\xad\xa5\xd0\x53\x2e\xd8\xa5\xaa\x3f\xb2" \
        "\xd1\x7b\xa7\x0e\xb6\x24\x8e\x59\x4e\x1a\x22\x97\xac\xbb\xb3\x9d" \
        "\x50\x2f\x1a\x8c\x6e\xb6\xf1\xce\x22\xb3\xde\x1a\x1f\x40\xcc\x24" \
        "\x55\x41\x19\xa8\x31\xa9\xaa\xd6\x07\x9c\xad\x88\x42\x5d\xe6\xbd" \
        "\xe1\xa9\x18\x7e\xbb\x60\x92\xcf\x67\xbf\x2b\x13\xfd\x65\xf2\x70" \
        "\x88\xd7\x8b\x7e\x88\x3c\x87\x59\xd2\xc4\xf5\xc6\x5a\xdb\x75\x53" \
        "\x87\x8a\xd5\x75\xf9\xfa\xd8\x78\xe8\x0a\x0c\x9b\xa6\x3b\xcb\xcc" \
        "\x27\x32\xe6\x94\x85\xbb\xc9\xc9\x0b\xfb\xd6\x24\x81\xd9\x08\x9b" \
        "\xec\xcf\x80\xcf\xe2\xdf\x16\xa2\xcf\x65\xbd\x92\xdd\x59\x7b\x07" \
        "\x07\xe0\x91\x7a\xf4\x8b\xbb\x75\xfe\xd4\x13\xd2\x38\xf5\x55\x5a" \
        "\x7a\x56\x9d\x80\xc3\x41\x4a\x8d\x08\x59\xdc\x65\xa4\x61\x28\xba" \
        "\xb2\x7a\xf8\x7a\x71\x31\x4f\x31\x8c\x78\x2b\x23\xeb\xfe\x80\x8b" \
        "\x82\xb0\xce\x26\x40\x1d\x2e\x22\xf0\x4d\x83\xd1\x25\x5d\xc5\x1a" \
        "\xdd\xd3\xb7\x5a\x2b\x1a\xe0\x78\x45\x04\xdf\x54\x3a\xf8\x96\x9b" \
        "\xe3\xea\x70\x82\xff\x7f\xc9\x88\x8c\x14\x4d\xa2\xaf\x58\x42\x9e" \
        "\xc9\x60\x31\xdb\xca\xd3\xda\xd9\xaf\x0d\xcb\xaa\xaf\x26\x8c\xb8" \
        "\xfc\xff\xea\xd9\x4f\x3c\x7c\xa4\x95\xe0\x56\xa9\xb4\x7a\xcd\xb7" \
        "\x51\xfb\x73\xe6\x66\xc6\xc6\x55\xad\xe8\x29\x72\x97\xd0\x7a\xd1" \
        "\xba\x5e\x43\xf1\xbc\xa3\x23\x01\x65\x13\x39\xe2\x29\x04\xcc\x8c" \
        "\x42\xf5\x8c\x30\xc0\x4a\xaf\xdb\x03\x8d\xda\x08\x47\xdd\x98\x8d" \
        "\xcd\xa6\xf3\xbf\xd1\x5c\x4b\x4c\x45\x25\x00\x4a\xa0\x6e\xef\xf8" \
        "\xca\x61\x78\x3a\xac\xec\x57\xfb\x3d\x1f\x92\xb0\xfe\x2f\xd1\xa8" \
        "\x5f\x67\x24\x51\x7b\x65\xe6\x14\xad\x68\x08\xd6\xf6\xee\x34\xdf" \
        "\xf7\x31\x0f\xdc\x82\xae\xbf\xd9\x04\xb0\x1e\x1d\xc5\x4b\x29\x27" \
        "\x09\x4b\x2d\xb6\x8d\x6f\x90\x3b\x68\x40\x1a\xde\xbf\x5a\x7e\x08" \
        "\xd7\x8f\xf4\xef\x5d\x63\x65\x3a\x65\x04\x0c\xf9\xbf\xd4\xac\xa7" \
        "\x98\x4a\x74\xd3\x71\x45\x98\x67\x80\xfc\x0b\x16\xac\x45\x16\x49" \
        "\xde\x61\x88\xa7\xdb\xdf\x19\x1f\x64\xb5\xfc\x5e\x2a\xb4\x7b\x57" \
        "\xf7\xf7\x27\x6c\xd4\x19\xc1\x7a\x3c\xa8\xe1\xb9\x39\xae\x49\xe4" \
        "\x88\xac\xba\x6b\x96\x56\x10\xb5\x48\x01\x09\xc8\xb1\x7b\x80\xe1" \
        "\xb7\xb7\x50\xdf\xc7\x59\x8d\x5d\x50\x11\xfd\x2d\xcc\x56\x00\xa3" \
        "\x2e\xf5\xb5\x2a\x1e\xcc\x82\x0e\x30\x8a\xa3\x42\x72\x1a\xac\x09" \
        "\x43\xbf\x66\x86\xb6\x4b\x25\x79\x37\x65\x04\xcc\xc4\x93\xd9\x7e" \
        "\x6a\xed\x3f\xb0\xf9\xcd\x71\xa4\x3d\xd4\x97\xf0\x1f\x17\xc0\xe2" \
        "\xcb\x37\x97\xaa\x2a\x2f\x25\x66\x56\x16\x8e\x6c\x49\x6a\xfc\x5f" \
        "\xb9\x32\x46\xf6\xb1\x11\x63\x98\xa3\x46\xf1\xa6\x41\xf3\xb0\x41" \
        "\xe9\x89\xf7\x91\x4f\x90\xcc\x2c\x7f\xff\x35\x78\x76\xe5\x06\xb5" \
        "\x0d\x33\x4b\xa7\x7c\x22\x5b\xc3\x07\xba\x53\x71\x52\xf3\xf1\x61" \
        "\x0e\x4e\xaf\xe5\x95\xf6\xd9\xd9\x0d\x11\xfa\xa9\x33\xa1\x5e\xf1" \
        "\x36\x95\x46\x86\x8a\x7f\x3a\x45\xa9\x67\x68\xd4\x0f\xd9\xd0\x34" \
        "\x12\xc0\x91\xc6\x31\x5c\xf4\xfd\xe7\xcb\x68\x60\x69\x37\x38\x0d" \
        "\xb2\xea\xaa\x70\x7b\x4c\x41\x85\xc3\x2e\xdd\xcd\xd3\x06\x70\x5e" \
        "\x4d\xc1\xff\xc8\x72\xee\xee\x47\x5a\x64\xdf\xac\x86\xab\xa4\x1c" \
        "\x06\x18\x98\x3f\x87\x41\xc5\xef\x68\xd3\xa1\x01\xe8\xa3\xb8\xca" \
        "\xc6\x0c\x90\x5c\x15\xfc\x91\x08\x40\xb9\x4c\x00\xa0\xb9\xd0";
    const u8 context[] = "";
    const u8 signature[] = \
        "\x0a\xab\x4c\x90\x05\x01\xb3\xe2\x4d\x7c\xdf\x46\x63\x32\x6a\x3a" \
        "\x87\xdf\x5e\x48\x43\xb2\xcb\xdb\x67\xcb\xf6\xe4\x60\xfe\xc3\x50" \
        "\xaa\x53\x71\xb1\x50\x8f\x9f\x45\x28\xec\xea\x23\xc4\x36\xd9\x4b" \
        "\x5e\x8f\xcd\x4f\x68\x1e\x30\xa6\xac\x00\xa9\x70\x4a\x18\x8a\x03";
    const u8 public_key[] = \
        "\x27\x81\x17\xfc\x14\x4c\x72\x34\x0f\x67\xd0\xf2\x31\x6e\x83\x86" \
        "\xce\xff\xbf\x2b\x24\x28\xc9\xc5\x1f\xef\x7c\x59\x7f\x1d\x42\x6e";

    eddsa_verify_request req = {
        .signature = signature,
        .message = message,
        .public_key = public_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    int verified = eddsa_verify(&req);
    CHECK_EQUAL(1, verified);
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestShaAbc_DerivePublicKey) {

    const u8 secret_key[] = \
        "\x83\x3f\xe6\x24\x09\x23\x7b\x9d\x62\xec\x77\x58\x75\x20\x91\x1e" \
        "\x9a\x75\x9c\xec\x1d\x19\x75\x5b\x7d\xa9\x01\xb9\x6d\xca\x3d\x42";
    const u8 expected_public_key[] = \
        "\xec\x17\x2b\x93\xad\x5e\x56\x3b\xf4\x93\x2c\x70\xe1\x24\x50\x34" \
        "\xc3\x54\x67\xef\x2e\xfd\x4d\x64\xeb\xf8\x19\x68\x34\x67\xe2\xbf";

    u8 public_key[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_derive_public_key(public_key, secret_key, EDDSA_CURVE_ED25519);
    MEMCMP_EQUAL(expected_public_key, public_key, eddsa_get_public_key_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestShaAbc_Sign) {

    const u8 secret_key[] = \
        "\x83\x3f\xe6\x24\x09\x23\x7b\x9d\x62\xec\x77\x58\x75\x20\x91\x1e" \
        "\x9a\x75\x9c\xec\x1d\x19\x75\x5b\x7d\xa9\x01\xb9\x6d\xca\x3d\x42";
    const u8 message[] = \
        "\xdd\xaf\x35\xa1\x93\x61\x7a\xba\xcc\x41\x73\x49\xae\x20\x41\x31" \
        "\x12\xe6\xfa\x4e\x89\xa9\x7e\xa2\x0a\x9e\xee\xe6\x4b\x55\xd3\x9a" \
        "\x21\x92\x99\x2a\x27\x4f\xc1\xa8\x36\xba\x3c\x23\xa3\xfe\xeb\xbd" \
        "\x45\x4d\x44\x23\x64\x3c\xe8\x0e\x2a\x9a\xc9\x4f\xa5\x4c\xa4\x9f";
    const u8 context[] = "";
    const u8 expected_signature[] = \
        "\xdc\x2a\x44\x59\xe7\x36\x96\x33\xa5\x2b\x1b\xf2\x77\x83\x9a\x00" \
        "\x20\x10\x09\xa3\xef\xbf\x3e\xcb\x69\xbe\xa2\x18\x6c\x26\xb5\x89" \
        "\x09\x35\x1f\xc9\xac\x90\xb3\xec\xfd\xfb\xc7\xc6\x64\x31\xe0\x30" \
        "\x3d\xca\x17\x9c\x13\x8a\xc1\x7a\xd9\xbe\xf1\x17\x73\x31\xa7\x04";

    u8 signature[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_sign_request req = {
        .signature = signature,
        .message = message,
        .secret_key = secret_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    eddsa_sign(&req);
    MEMCMP_EQUAL(expected_signature, signature, eddsa_get_signature_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestShaAbc_Verify) {

    const u8 message[] = \
        "\xdd\xaf\x35\xa1\x93\x61\x7a\xba\xcc\x41\x73\x49\xae\x20\x41\x31" \
        "\x12\xe6\xfa\x4e\x89\xa9\x7e\xa2\x0a\x9e\xee\xe6\x4b\x55\xd3\x9a" \
        "\x21\x92\x99\x2a\x27\x4f\xc1\xa8\x36\xba\x3c\x23\xa3\xfe\xeb\xbd" \
        "\x45\x4d\x44\x23\x64\x3c\xe8\x0e\x2a\x9a\xc9\x4f\xa5\x4c\xa4\x9f";
    const u8 context[] = "";
    const u8 signature[] = \
        "\xdc\x2a\x44\x59\xe7\x36\x96\x33\xa5\x2b\x1b\xf2\x77\x83\x9a\x00" \
        "\x20\x10\x09\xa3\xef\xbf\x3e\xcb\x69\xbe\xa2\x18\x6c\x26\xb5\x89" \
        "\x09\x35\x1f\xc9\xac\x90\xb3\xec\xfd\xfb\xc7\xc6\x64\x31\xe0\x30" \
        "\x3d\xca\x17\x9c\x13\x8a\xc1\x7a\xd9\xbe\xf1\x17\x73\x31\xa7\x04";
    const u8 public_key[] = \
        "\xec\x17\x2b\x93\xad\x5e\x56\x3b\xf4\x93\x2c\x70\xe1\x24\x50\x34" \
        "\xc3\x54\x67\xef\x2e\xfd\x4d\x64\xeb\xf8\x19\x68\x34\x67\xe2\xbf";

    eddsa_verify_request req = {
        .signature = signature,
        .message = message,
        .public_key = public_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    int verified = eddsa_verify(&req);
    CHECK_EQUAL(1, verified);
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestCtxFoo_DerivePublicKey) {

    const u8 secret_key[] = \
        "\x03\x05\x33\x4e\x38\x1a\xf7\x8f\x14\x1c\xb6\x66\xf6\x19\x9f\x57" \
        "\xbc\x34\x95\x33\x5a\x25\x6a\x95\xbd\x2a\x55\xbf\x54\x66\x63\xf6";
    const u8 expected_public_key[] = \
        "\xdf\xc9\x42\x5e\x4f\x96\x8f\x7f\x0c\x29\xf0\x25\x9c\xf5\xf9\xae" \
        "\xd6\x85\x1c\x2b\xb4\xad\x8b\xfb\x86\x0c\xfe\xe0\xab\x24\x82\x92";

    u8 public_key[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_derive_public_key(public_key, secret_key, EDDSA_CURVE_ED25519);
    MEMCMP_EQUAL(expected_public_key, public_key, eddsa_get_public_key_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestCtxFoo_Sign) {

    const u8 secret_key[] = \
        "\x03\x05\x33\x4e\x38\x1a\xf7\x8f\x14\x1c\xb6\x66\xf6\x19\x9f\x57" \
        "\xbc\x34\x95\x33\x5a\x25\x6a\x95\xbd\x2a\x55\xbf\x54\x66\x63\xf6";
    const u8 message[] = \
        "\xf7\x26\x93\x6d\x19\xc8\x00\x49\x4e\x3f\xda\xff\x20\xb2\x76\xa8";
    const u8 context[] = "\x66\x6f\x6f";
    const u8 expected_signature[] = \
        "\x55\xa4\xcc\x2f\x70\xa5\x4e\x04\x28\x8c\x5f\x4c\xd1\xe4\x5a\x7b" \
        "\xb5\x20\xb3\x62\x92\x91\x18\x76\xca\xda\x73\x23\x19\x8d\xd8\x7a" \
        "\x8b\x36\x95\x0b\x95\x13\x00\x22\x90\x7a\x7f\xb7\xc4\xe9\xb2\xd5" \
        "\xf6\xcc\xa6\x85\xa5\x87\xb4\xb2\x1f\x4b\x88\x8e\x4e\x7e\xdb\x0d";

    u8 signature[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_sign_request req = {
        .signature = signature,
        .message = message,
        .secret_key = secret_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    eddsa_sign(&req);
    MEMCMP_EQUAL(expected_signature, signature, eddsa_get_signature_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestCtxFoo_Verify) {

    const u8 message[] = \
        "\xf7\x26\x93\x6d\x19\xc8\x00\x49\x4e\x3f\xda\xff\x20\xb2\x76\xa8";
    const u8 context[] = "\x66\x6f\x6f";
    const u8 signature[] = \
        "\x55\xa4\xcc\x2f\x70\xa5\x4e\x04\x28\x8c\x5f\x4c\xd1\xe4\x5a\x7b" \
        "\xb5\x20\xb3\x62\x92\x91\x18\x76\xca\xda\x73\x23\x19\x8d\xd8\x7a" \
        "\x8b\x36\x95\x0b\x95\x13\x00\x22\x90\x7a\x7f\xb7\xc4\xe9\xb2\xd5" \
        "\xf6\xcc\xa6\x85\xa5\x87\xb4\xb2\x1f\x4b\x88\x8e\x4e\x7e\xdb\x0d";
    const u8 public_key[] = \
        "\xdf\xc9\x42\x5e\x4f\x96\x8f\x7f\x0c\x29\xf0\x25\x9c\xf5\xf9\xae" \
        "\xd6\x85\x1c\x2b\xb4\xad\x8b\xfb\x86\x0c\xfe\xe0\xab\x24\x82\x92";

    eddsa_verify_request req = {
        .signature = signature,
        .message = message,
        .public_key = public_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    int verified = eddsa_verify(&req);
    CHECK_EQUAL(1, verified);
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestCtxBar_DerivePublicKey) {

    const u8 secret_key[] = \
        "\x03\x05\x33\x4e\x38\x1a\xf7\x8f\x14\x1c\xb6\x66\xf6\x19\x9f\x57" \
        "\xbc\x34\x95\x33\x5a\x25\x6a\x95\xbd\x2a\x55\xbf\x54\x66\x63\xf6";
    const u8 expected_public_key[] = \
        "\xdf\xc9\x42\x5e\x4f\x96\x8f\x7f\x0c\x29\xf0\x25\x9c\xf5\xf9\xae" \
        "\xd6\x85\x1c\x2b\xb4\xad\x8b\xfb\x86\x0c\xfe\xe0\xab\x24\x82\x92";

    u8 public_key[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_derive_public_key(public_key, secret_key, EDDSA_CURVE_ED25519);
    MEMCMP_EQUAL(expected_public_key, public_key, eddsa_get_public_key_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestCtxBar_Sign) {

    const u8 secret_key[] = \
        "\x03\x05\x33\x4e\x38\x1a\xf7\x8f\x14\x1c\xb6\x66\xf6\x19\x9f\x57" \
        "\xbc\x34\x95\x33\x5a\x25\x6a\x95\xbd\x2a\x55\xbf\x54\x66\x63\xf6";
    const u8 message[] = \
        "\xf7\x26\x93\x6d\x19\xc8\x00\x49\x4e\x3f\xda\xff\x20\xb2\x76\xa8";
    const u8 context[] = "\x62\x61\x72";
    const u8 expected_signature[] = \
        "\xfc\x60\xd5\x87\x2f\xc4\x6b\x3a\xa6\x9f\x8b\x5b\x43\x51\xd5\x80" \
        "\x8f\x92\xbc\xc0\x44\x60\x6d\xb0\x97\xab\xab\x6d\xbc\xb1\xae\xe3" \
        "\x21\x6c\x48\xe8\xb3\xb6\x64\x31\xb5\xb1\x86\xd1\xd2\x8f\x8e\xe1" \
        "\x5a\x5c\xa2\xdf\x66\x68\x34\x62\x91\xc2\x04\x3d\x4e\xb3\xe9\x0d";

    u8 signature[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_sign_request req = {
        .signature = signature,
        .message = message,
        .secret_key = secret_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    eddsa_sign(&req);
    MEMCMP_EQUAL(expected_signature, signature, eddsa_get_signature_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestCtxBar_Verify) {

    const u8 message[] = \
        "\xf7\x26\x93\x6d\x19\xc8\x00\x49\x4e\x3f\xda\xff\x20\xb2\x76\xa8";
    const u8 context[] = "\x62\x61\x72";
    const u8 signature[] = \
        "\xfc\x60\xd5\x87\x2f\xc4\x6b\x3a\xa6\x9f\x8b\x5b\x43\x51\xd5\x80" \
        "\x8f\x92\xbc\xc0\x44\x60\x6d\xb0\x97\xab\xab\x6d\xbc\xb1\xae\xe3" \
        "\x21\x6c\x48\xe8\xb3\xb6\x64\x31\xb5\xb1\x86\xd1\xd2\x8f\x8e\xe1" \
        "\x5a\x5c\xa2\xdf\x66\x68\x34\x62\x91\xc2\x04\x3d\x4e\xb3\xe9\x0d";
    const u8 public_key[] = \
        "\xdf\xc9\x42\x5e\x4f\x96\x8f\x7f\x0c\x29\xf0\x25\x9c\xf5\xf9\xae" \
        "\xd6\x85\x1c\x2b\xb4\xad\x8b\xfb\x86\x0c\xfe\xe0\xab\x24\x82\x92";

    eddsa_verify_request req = {
        .signature = signature,
        .message = message,
        .public_key = public_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    int verified = eddsa_verify(&req);
    CHECK_EQUAL(1, verified);
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestCtxFoo2_DerivePublicKey) {

    const u8 secret_key[] = \
        "\x03\x05\x33\x4e\x38\x1a\xf7\x8f\x14\x1c\xb6\x66\xf6\x19\x9f\x57" \
        "\xbc\x34\x95\x33\x5a\x25\x6a\x95\xbd\x2a\x55\xbf\x54\x66\x63\xf6";
    const u8 expected_public_key[] = \
        "\xdf\xc9\x42\x5e\x4f\x96\x8f\x7f\x0c\x29\xf0\x25\x9c\xf5\xf9\xae" \
        "\xd6\x85\x1c\x2b\xb4\xad\x8b\xfb\x86\x0c\xfe\xe0\xab\x24\x82\x92";

    u8 public_key[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_derive_public_key(public_key, secret_key, EDDSA_CURVE_ED25519);
    MEMCMP_EQUAL(expected_public_key, public_key, eddsa_get_public_key_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestCtxFoo2_Sign) {

    const u8 secret_key[] = \
        "\x03\x05\x33\x4e\x38\x1a\xf7\x8f\x14\x1c\xb6\x66\xf6\x19\x9f\x57" \
        "\xbc\x34\x95\x33\x5a\x25\x6a\x95\xbd\x2a\x55\xbf\x54\x66\x63\xf6";
    const u8 message[] = \
        "\x50\x8e\x9e\x68\x82\xb9\x79\xfe\xa9\x00\xf6\x2a\xdc\xea\xca\x35";
    const u8 context[] = "\x66\x6f\x6f";
    const u8 expected_signature[] = \
        "\x8b\x70\xc1\xcc\x83\x10\xe1\xde\x20\xac\x53\xce\x28\xae\x6e\x72" \
        "\x07\xf3\x3c\x32\x95\xe0\x3b\xb5\xc0\x73\x2a\x1d\x20\xdc\x64\x90" \
        "\x89\x22\xa8\xb0\x52\xcf\x99\xb7\xc4\xfe\x10\x7a\x5a\xbb\x5b\x2c" \
        "\x40\x85\xae\x75\x89\x0d\x02\xdf\x26\x26\x9d\x89\x45\xf8\x4b\x0b";

    u8 signature[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_sign_request req = {
        .signature = signature,
        .message = message,
        .secret_key = secret_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    eddsa_sign(&req);
    MEMCMP_EQUAL(expected_signature, signature, eddsa_get_signature_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestCtxFoo2_Verify) {

    const u8 message[] = \
        "\x50\x8e\x9e\x68\x82\xb9\x79\xfe\xa9\x00\xf6\x2a\xdc\xea\xca\x35";
    const u8 context[] = "\x66\x6f\x6f";
    const u8 signature[] = \
        "\x8b\x70\xc1\xcc\x83\x10\xe1\xde\x20\xac\x53\xce\x28\xae\x6e\x72" \
        "\x07\xf3\x3c\x32\x95\xe0\x3b\xb5\xc0\x73\x2a\x1d\x20\xdc\x64\x90" \
        "\x89\x22\xa8\xb0\x52\xcf\x99\xb7\xc4\xfe\x10\x7a\x5a\xbb\x5b\x2c" \
        "\x40\x85\xae\x75\x89\x0d\x02\xdf\x26\x26\x9d\x89\x45\xf8\x4b\x0b";
    const u8 public_key[] = \
        "\xdf\xc9\x42\x5e\x4f\x96\x8f\x7f\x0c\x29\xf0\x25\x9c\xf5\xf9\xae" \
        "\xd6\x85\x1c\x2b\xb4\xad\x8b\xfb\x86\x0c\xfe\xe0\xab\x24\x82\x92";

    eddsa_verify_request req = {
        .signature = signature,
        .message = message,
        .public_key = public_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    int verified = eddsa_verify(&req);
    CHECK_EQUAL(1, verified);
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestCtxFoo3_DerivePublicKey) {

    const u8 secret_key[] = \
        "\xab\x9c\x28\x53\xce\x29\x7d\xda\xb8\x5c\x99\x3b\x3a\xe1\x4b\xca" \
        "\xd3\x9b\x2c\x68\x2b\xea\xbc\x27\xd6\xd4\xeb\x20\x71\x1d\x65\x60";
    const u8 expected_public_key[] = \
        "\x0f\x1d\x12\x74\x94\x3b\x91\x41\x58\x89\x15\x2e\x89\x3d\x80\xe9" \
        "\x32\x75\xa1\xfc\x0b\x65\xfd\x71\xb4\xb0\xdd\xa1\x0a\xd7\xd7\x72";

    u8 public_key[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_derive_public_key(public_key, secret_key, EDDSA_CURVE_ED25519);
    MEMCMP_EQUAL(expected_public_key, public_key, eddsa_get_public_key_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestCtxFoo3_Sign) {

    const u8 secret_key[] = \
        "\xab\x9c\x28\x53\xce\x29\x7d\xda\xb8\x5c\x99\x3b\x3a\xe1\x4b\xca" \
        "\xd3\x9b\x2c\x68\x2b\xea\xbc\x27\xd6\xd4\xeb\x20\x71\x1d\x65\x60";
    const u8 message[] = \
        "\xf7\x26\x93\x6d\x19\xc8\x00\x49\x4e\x3f\xda\xff\x20\xb2\x76\xa8";
    const u8 context[] = "\x66\x6f\x6f";
    const u8 expected_signature[] = \
        "\x21\x65\x5b\x5f\x1a\xa9\x65\x99\x6b\x3f\x97\xb3\xc8\x49\xea\xfb" \
        "\xa9\x22\xa0\xa6\x29\x92\xf7\x3b\x3d\x1b\x73\x10\x6a\x84\xad\x85" \
        "\xe9\xb8\x6a\x7b\x60\x05\xea\x86\x83\x37\xff\x2d\x20\xa7\xf5\xfb" \
        "\xd4\xcd\x10\xb0\xbe\x49\xa6\x8d\xa2\xb2\xe0\xdc\x0a\xd8\x96\x0f";

    u8 signature[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_sign_request req = {
        .signature = signature,
        .message = message,
        .secret_key = secret_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    eddsa_sign(&req);
    MEMCMP_EQUAL(expected_signature, signature, eddsa_get_signature_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestCtxFoo3_Verify) {

    const u8 message[] = \
        "\xf7\x26\x93\x6d\x19\xc8\x00\x49\x4e\x3f\xda\xff\x20\xb2\x76\xa8";
    const u8 context[] = "\x66\x6f\x6f";
    const u8 signature[] = \
        "\x21\x65\x5b\x5f\x1a\xa9\x65\x99\x6b\x3f\x97\xb3\xc8\x49\xea\xfb" \
        "\xa9\x22\xa0\xa6\x29\x92\xf7\x3b\x3d\x1b\x73\x10\x6a\x84\xad\x85" \
        "\xe9\xb8\x6a\x7b\x60\x05\xea\x86\x83\x37\xff\x2d\x20\xa7\xf5\xfb" \
        "\xd4\xcd\x10\xb0\xbe\x49\xa6\x8d\xa2\xb2\xe0\xdc\x0a\xd8\x96\x0f";
    const u8 public_key[] = \
        "\x0f\x1d\x12\x74\x94\x3b\x91\x41\x58\x89\x15\x2e\x89\x3d\x80\xe9" \
        "\x32\x75\xa1\xfc\x0b\x65\xfd\x71\xb4\xb0\xdd\xa1\x0a\xd7\xd7\x72";

    eddsa_verify_request req = {
        .signature = signature,
        .message = message,
        .public_key = public_key,
        .context = context,
        .message_length = sizeof(message) - 1,
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 0
    };
    int verified = eddsa_verify(&req);
    CHECK_EQUAL(1, verified);
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestPhAbc_DerivePublicKey) {

    const u8 secret_key[] = \
        "\x83\x3f\xe6\x24\x09\x23\x7b\x9d\x62\xec\x77\x58\x75\x20\x91\x1e" \
        "\x9a\x75\x9c\xec\x1d\x19\x75\x5b\x7d\xa9\x01\xb9\x6d\xca\x3d\x42";
    const u8 expected_public_key[] = \
        "\xec\x17\x2b\x93\xad\x5e\x56\x3b\xf4\x93\x2c\x70\xe1\x24\x50\x34" \
        "\xc3\x54\x67\xef\x2e\xfd\x4d\x64\xeb\xf8\x19\x68\x34\x67\xe2\xbf";

    u8 public_key[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];

    eddsa_derive_public_key(public_key, secret_key, EDDSA_CURVE_ED25519);
    MEMCMP_EQUAL(expected_public_key, public_key, eddsa_get_public_key_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestPhAbc_Sign) {

    const u8 secret_key[] = \
        "\x83\x3f\xe6\x24\x09\x23\x7b\x9d\x62\xec\x77\x58\x75\x20\x91\x1e" \
        "\x9a\x75\x9c\xec\x1d\x19\x75\x5b\x7d\xa9\x01\xb9\x6d\xca\x3d\x42";
    const u8 message[] = "\x61\x62\x63";
    const u8 context[] = "";
    const u8 expected_signature[] = \
        "\x98\xa7\x02\x22\xf0\xb8\x12\x1a\xa9\xd3\x0f\x81\x3d\x68\x3f\x80" \
        "\x9e\x46\x2b\x46\x9c\x7f\xf8\x76\x39\x49\x9b\xb9\x4e\x6d\xae\x41" \
        "\x31\xf8\x50\x42\x46\x3c\x2a\x35\x5a\x20\x03\xd0\x62\xad\xf5\xaa" \
        "\xa1\x0b\x8c\x61\xe6\x36\x06\x2a\xaa\xd1\x1c\x2a\x26\x08\x34\x06";

    u8 signature[eddsa_get_signature_length(EDDSA_CURVE_ED25519)];
    /* Prehash the message before signing */
    const curve * curve = curves[EDDSA_CURVE_ED25519];
    u8 prehash[2 * curve->b_in_bytes];
    hash h = curve->hash_function;
    struct iovec iov = {
        .iov_base = message,
        .iov_len = sizeof(message) - 1
    };
    h(prehash, &iov, 1);

    eddsa_sign_request req = {
        .signature = signature,
        .message = prehash,
        .secret_key = secret_key,
        .context = context,
        .message_length = sizeof(prehash),
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 1
    };
    eddsa_sign(&req);
    MEMCMP_EQUAL(expected_signature, signature, eddsa_get_signature_length(EDDSA_CURVE_ED25519));
}

TEST(EDDSA_RFC_VECTORS_ED25519, TestPhAbc_Verify) {

    const u8 message[] = "\x61\x62\x63";
    const u8 context[] = "";
    const u8 signature[] = \
        "\x98\xa7\x02\x22\xf0\xb8\x12\x1a\xa9\xd3\x0f\x81\x3d\x68\x3f\x80" \
        "\x9e\x46\x2b\x46\x9c\x7f\xf8\x76\x39\x49\x9b\xb9\x4e\x6d\xae\x41" \
        "\x31\xf8\x50\x42\x46\x3c\x2a\x35\x5a\x20\x03\xd0\x62\xad\xf5\xaa" \
        "\xa1\x0b\x8c\x61\xe6\x36\x06\x2a\xaa\xd1\x1c\x2a\x26\x08\x34\x06";
    const u8 public_key[] = \
        "\xec\x17\x2b\x93\xad\x5e\x56\x3b\xf4\x93\x2c\x70\xe1\x24\x50\x34" \
        "\xc3\x54\x67\xef\x2e\xfd\x4d\x64\xeb\xf8\x19\x68\x34\x67\xe2\xbf";

    /* Prehash the message before verification */
    const curve * curve = curves[EDDSA_CURVE_ED25519];
    u8 prehash[2 * curve->b_in_bytes];
    hash h = curve->hash_function;
    struct iovec iov = {
        .iov_base = message,
        .iov_len = sizeof(message) - 1
    };
    h(prehash, &iov, 1);

    eddsa_verify_request req = {
        .signature = signature,
        .message = prehash,
        .public_key = public_key,
        .context = context,
        .message_length = sizeof(prehash),
        .context_length = sizeof(context) - 1,
        .curve_id = EDDSA_CURVE_ED25519,
        .phflag = 1
    };
    int verified = eddsa_verify(&req);
    CHECK_EQUAL(1, verified);
}
