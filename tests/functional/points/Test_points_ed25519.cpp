#include <CppUTest/TestHarness.h>
#include <points/points.h>

TEST_GROUP(POINTS_ED25519) {

    const point identity = {
        .ed25519 = {
            .X = { 0 },
            .Y = { 1 },
            .Z = { 1 },
            .T = { 0 },
        }
    };
};

TEST(POINTS_ED25519, Decode_PublicKeyFromRfcTest1_SuccessfullyDecode) {

    point decoded;
    const u8 encoded[] = \
        "\xd7\x5a\x98\x01\x82\xb1\x0a\xb7\xd5\x4b\xfe\xd3\xc9\x64\x07\x3a" \
        "\x0e\xe1\x72\xf3\xda\xa6\x23\x25\xaf\x02\x1a\x68\xf7\x07\x51\x1a";
    int success = ed25519_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(1, success);
}

TEST(POINTS_ED25519, Decode_CommitmentFromRfcTest1_SuccessfullyDecode) {

    point decoded;
    const u8 encoded[] = \
        "\xe5\x56\x43\x00\xc3\x60\xac\x72\x90\x86\xe2\xcc\x80\x6e\x82\x8a" \
        "\x84\x87\x7f\x1e\xb8\xe5\xd9\x74\xd8\x73\xe0\x65\x22\x49\x01\x55";
    int success = ed25519_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(1, success);
}

TEST(POINTS_ED25519, Decode_PointOfOrder1_FailDecoding) {

    point decoded;
    /* Encode the group identity element (0, 1) */
    const u8 encoded[] = \
        "\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    int success = ed25519_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(0, success);
}

TEST(POINTS_ED25519, Decode_PointOfOrder2_FailDecoding) {

    point decoded;
    /* Encode the point (0, -1) */
    const u8 encoded[] = \
        "\xec\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff" \
        "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f";
    int success = ed25519_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(0, success);
}

TEST(POINTS_ED25519, Decode_PointOfOrder4_FailDecoding) {

    point decoded;
    /* Encode the point with y=0 */
    const u8 encoded[] = \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    int success = ed25519_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(0, success);
}

TEST(POINTS_ED25519, Decode_FirstPointOfOrder8_FailDecoding) {

    point decoded;
    const u8 encoded[] = \
        "\x26\xe8\x95\x8f\xc2\xb2\x27\xb0\x45\xc3\xf4\x89\xf2\xef\x98\xf0" \
        "\xd5\xdf\xac\x05\xd3\xc6\x33\x39\xb1\x38\x02\x88\x6d\x53\xfc\x05";
    int success = ed25519_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(0, success);
}

TEST(POINTS_ED25519, Decode_SecondPointOfOrder8_FailDecoding) {

    point decoded;
    const u8 encoded[] = \
        "\xc7\x17\x6a\x70\x3d\x4d\xd8\x4f\xba\x3c\x0b\x76\x0d\x10\x67\x0f" \
        "\x2a\x20\x53\xfa\x2c\x39\xcc\xc6\x4e\xc7\xfd\x77\x92\xac\x03\x7a";
    int success = ed25519_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(0, success);
}

TEST(POINTS_ED25519, Decode_YCoordinateAboveModulus_FailDecoding) {

    point decoded;
    /* Encode the point with y=p+1 (congruent to y=1, i.e. the identity element) */
    const u8 encoded[] = \
        "\xee\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff" \
        "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f";
    int success = ed25519_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(0, success);
}

TEST(POINTS_ED25519, Decode_YCoordinateEqualToModulus_FailDecoding) {

    point decoded;
    /* Encode the point with y=p (congruent to y=0) */
    const u8 encoded[] = \
        "\xed\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff" \
        "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x7f";
    int success = ed25519_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(0, success);
}

TEST(POINTS_ED25519, Decode_X2IsANonResidue_FailDecoding) {

    point decoded;
    const u8 encoded[] = \
        "\xda\x5a\x98\x01\x82\xb1\x0a\xb7\xd5\x4b\xfe\xd3\xc9\x64\x07\x3a" \
        "\x0e\xe1\x72\xf3\xda\xa6\x23\x25\xaf\x02\x1a\x68\xf7\x07\x51\x1a";
    int success = ed25519_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(0, success);
}

TEST(POINTS_ED25519, MultiplyBasepoint_MultiplyByOrder_ResultInIdentity) {

    const u8 group_order[] = {
        0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58,
        0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10
    };
    point output;
    ed25519_group_ops.multiply_basepoint(&output, group_order);
    int ok = ed25519_group_ops.points_equal(&identity, &output);
    CHECK_EQUAL(1, ok);
}

TEST(POINTS_ED25519, MultiplyBasepoint_MaxHammingWeight_ProduceCorrectResult) {

    const u8 s[] = {
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xee, 0x16, 0xe4, 0x09, 0x9c, 0xbf, 0x9b, 0x5d,
        0x45, 0x6e, 0xce, 0x25, 0x4d, 0xed, 0x2b, 0x24,
        0x1d, 0x1f, 0x5d, 0xe8, 0x47, 0x6d, 0x79, 0xd7,
        0x33, 0xcd, 0xe6, 0x87, 0xef, 0x10, 0x25, 0xc9
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs1_ProduceCorrectResult) {

    const u8 s[] = {
        0xf4, 0xed, 0x73, 0x11, 0x45, 0xb7, 0x69, 0x5f,
        0x88, 0x9e, 0x59, 0x88, 0x13, 0xf7, 0x6c, 0xae,
        0x3e, 0x30, 0xaa, 0xcc, 0xc4, 0x75, 0xa4, 0x4a,
        0x6d, 0x09, 0x1e, 0xd0, 0xd8, 0xcc, 0x04, 0x02
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xfb, 0x03, 0x68, 0xc7, 0x80, 0xd1, 0xa1, 0xda,
        0x93, 0xdd, 0xec, 0xbb, 0xa9, 0x99, 0x4a, 0x0f,
        0xcd, 0xa0, 0x35, 0x2a, 0xa8, 0x70, 0x96, 0x34,
        0xed, 0x9a, 0x6f, 0x2d, 0x88, 0x0e, 0xe1, 0xc5
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs2_ProduceCorrectResult) {

    const u8 s[] = {
        0xd6, 0xb9, 0xca, 0x3d, 0x79, 0x6d, 0xf0, 0x63,
        0x50, 0x5b, 0x42, 0x26, 0x4c, 0xab, 0x1f, 0xa0,
        0x1d, 0xe4, 0x46, 0xeb, 0xf8, 0x68, 0xef, 0xb8,
        0xd6, 0x00, 0x66, 0x4a, 0x44, 0x3a, 0x8c, 0x0a
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xca, 0x2d, 0xe5, 0x39, 0x82, 0xfc, 0xe8, 0x35,
        0x03, 0xe0, 0xea, 0xcb, 0x85, 0xe1, 0x04, 0xfe,
        0x6e, 0xf9, 0xa8, 0x1c, 0xcc, 0x18, 0xbe, 0x1b,
        0x6a, 0x00, 0x82, 0xdf, 0x01, 0xc3, 0x3b, 0x72
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs3_ProduceCorrectResult) {

    const u8 s[] = {
        0xe7, 0x08, 0x25, 0x09, 0xc3, 0x67, 0xe0, 0x4c,
        0x37, 0xf6, 0x0e, 0x93, 0xeb, 0x35, 0x34, 0x76,
        0xe2, 0x66, 0x05, 0x0b, 0x12, 0x7b, 0x8a, 0xcf,
        0x7d, 0x6d, 0x8f, 0x8e, 0xf2, 0xb1, 0xa1, 0x07
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x9c, 0x75, 0x10, 0x9b, 0x8d, 0x43, 0xe2, 0xae,
        0x25, 0xc7, 0xc6, 0x5f, 0xdf, 0x46, 0xe8, 0xce,
        0x89, 0x64, 0x06, 0xf1, 0x42, 0x4b, 0x8c, 0x37,
        0xf8, 0x68, 0x8e, 0xde, 0xac, 0x2b, 0x39, 0x1b
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs4_ProduceCorrectResult) {

    const u8 s[] = {
        0xdd, 0x41, 0x78, 0xcc, 0x89, 0xf1, 0x8a, 0x56,
        0x94, 0x24, 0xff, 0x5b, 0xf1, 0x25, 0x45, 0x6b,
        0x41, 0xe6, 0xa1, 0x08, 0xeb, 0x90, 0x67, 0x90,
        0xd1, 0x64, 0xc7, 0xfb, 0xc2, 0x59, 0x92, 0x07
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x58, 0x54, 0xa1, 0x9b, 0x3a, 0x8b, 0xaf, 0xfc,
        0x24, 0x39, 0xef, 0x08, 0x6d, 0xbd, 0xb0, 0xea,
        0x06, 0x71, 0x44, 0x0b, 0x14, 0x83, 0x2c, 0xfc,
        0xc4, 0x06, 0x53, 0x04, 0xe0, 0xea, 0xb7, 0xb8
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs5_ProduceCorrectResult) {

    const u8 s[] = {
        0xb9, 0x65, 0xac, 0xe5, 0x63, 0x25, 0xab, 0x11,
        0x81, 0xbf, 0x1c, 0x06, 0x0f, 0x80, 0xf0, 0x2f,
        0x6b, 0x6e, 0x10, 0x67, 0x03, 0xff, 0x6e, 0x57,
        0xc9, 0x17, 0x86, 0xc1, 0x8c, 0xb3, 0x4e, 0x08
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xdd, 0x64, 0xb4, 0x32, 0x11, 0xfc, 0x7e, 0x52,
        0x2b, 0x7a, 0x6f, 0xa0, 0xb9, 0x4a, 0x7a, 0x15,
        0x08, 0xaa, 0xdb, 0x60, 0xd1, 0x37, 0x34, 0xe4,
        0xd3, 0xa8, 0xdc, 0xde, 0x31, 0x42, 0x36, 0x0e
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs6_ProduceCorrectResult) {

    const u8 s[] = {
        0xc2, 0x33, 0x4c, 0x03, 0x19, 0x8d, 0x4b, 0xfb,
        0xdb, 0x86, 0x46, 0xca, 0xcb, 0x0a, 0xd6, 0xd7,
        0x03, 0x8d, 0x19, 0x6b, 0xe3, 0x36, 0x5f, 0x2c,
        0x2d, 0x00, 0xb3, 0xe2, 0x85, 0x86, 0x61, 0x01
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x51, 0x8b, 0x85, 0xd6, 0x81, 0x73, 0x9f, 0x53,
        0xb2, 0xb0, 0xa7, 0xec, 0x1e, 0x2c, 0x9b, 0x3c,
        0x31, 0x45, 0xfa, 0x52, 0xf6, 0xe4, 0xc2, 0xe0,
        0xe4, 0x7c, 0x47, 0x04, 0x53, 0x7f, 0x19, 0x12
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs7_ProduceCorrectResult) {

    const u8 s[] = {
        0x23, 0x1d, 0x10, 0xd0, 0xab, 0xf3, 0xa8, 0xad,
        0xb1, 0x5e, 0x98, 0x58, 0xde, 0x0b, 0x31, 0xa2,
        0x32, 0xb9, 0xe6, 0xb3, 0x19, 0xc4, 0x53, 0xef,
        0x71, 0xa2, 0x75, 0x88, 0x23, 0xa6, 0x3f, 0x02
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x4c, 0xfc, 0x46, 0x4b, 0x57, 0xf3, 0x10, 0xa2,
        0x89, 0x3a, 0x85, 0x55, 0x62, 0x26, 0x1e, 0xcd,
        0x30, 0x25, 0x0a, 0xc3, 0x3a, 0xcf, 0x09, 0xf3,
        0x79, 0xb3, 0xde, 0xd2, 0xe2, 0xca, 0x34, 0xe0
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs8_ProduceCorrectResult) {

    const u8 s[] = {
        0xc3, 0x21, 0xdf, 0x86, 0xe4, 0x0b, 0x73, 0x96,
        0xce, 0xa3, 0xc7, 0x18, 0x9b, 0x69, 0x59, 0x4f,
        0x8a, 0x32, 0xda, 0x2e, 0xdf, 0xcc, 0xc2, 0x62,
        0xb5, 0x13, 0x78, 0x18, 0x85, 0x54, 0x0f, 0x01
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xb5, 0x35, 0xe6, 0x45, 0x03, 0x7a, 0x5d, 0x2a,
        0x70, 0x9f, 0x33, 0x73, 0xcd, 0x2b, 0x71, 0xa3,
        0xf1, 0x0d, 0xd3, 0x0f, 0xd0, 0xd6, 0x9a, 0x34,
        0xd5, 0x41, 0xce, 0xf9, 0xf9, 0x04, 0x71, 0x36
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs9_ProduceCorrectResult) {

    const u8 s[] = {
        0x29, 0x3c, 0x5a, 0x56, 0x81, 0x16, 0x4a, 0xb4,
        0x93, 0x6e, 0xfd, 0x7d, 0x4c, 0x45, 0x9c, 0x88,
        0x68, 0x9f, 0xd6, 0x5f, 0x4b, 0x08, 0xdd, 0x8d,
        0xe6, 0x8a, 0x22, 0xfa, 0xdc, 0xfe, 0x38, 0x01
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x46, 0xcc, 0x4c, 0x47, 0x8c, 0x8a, 0x18, 0xfd,
        0x11, 0xc0, 0x0e, 0xd2, 0xe7, 0x65, 0x89, 0xe1,
        0x7a, 0x5d, 0xc7, 0xf5, 0xa6, 0x03, 0x27, 0xee,
        0x36, 0x0a, 0x9b, 0x98, 0xca, 0xc7, 0xcf, 0xd2
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs10_ProduceCorrectResult) {

    const u8 s[] = {
        0x9e, 0x3b, 0xef, 0x73, 0xa3, 0xcd, 0x7e, 0x8c,
        0xf0, 0x49, 0x4b, 0xf4, 0x12, 0xdd, 0xf2, 0xd2,
        0x0c, 0x2d, 0x3b, 0xe6, 0x45, 0xe9, 0x0d, 0xad,
        0x4f, 0x9b, 0x02, 0x36, 0xf2, 0xc5, 0x1d, 0x0e
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xc9, 0x2c, 0x27, 0x90, 0xed, 0x48, 0x87, 0xa1,
        0x6c, 0xb2, 0xb5, 0xa0, 0x94, 0x91, 0xcc, 0x80,
        0xa5, 0x53, 0xa1, 0x8c, 0x36, 0xcd, 0x6f, 0x1e,
        0x40, 0xa8, 0x8b, 0xe8, 0x75, 0x22, 0xf5, 0x64
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs11_ProduceCorrectResult) {

    const u8 s[] = {
        0x7e, 0x75, 0x3e, 0xae, 0x13, 0x10, 0x69, 0x8c,
        0x73, 0x71, 0xe9, 0x30, 0x15, 0x57, 0x05, 0x62,
        0x0c, 0x0d, 0xb6, 0xa3, 0xb9, 0x40, 0x14, 0x39,
        0xe9, 0x48, 0xea, 0x16, 0x9f, 0x88, 0x4e, 0x0e
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x24, 0x84, 0x31, 0x3d, 0x7d, 0xe3, 0x0f, 0x23,
        0x2e, 0xb9, 0x21, 0x33, 0xcc, 0xf2, 0x2c, 0xc7,
        0x68, 0x8a, 0x55, 0x2a, 0x51, 0xf7, 0xdf, 0xa8,
        0x33, 0xe3, 0xfb, 0xe7, 0xff, 0xa3, 0xce, 0x86
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs12_ProduceCorrectResult) {

    const u8 s[] = {
        0x16, 0xa0, 0xbf, 0x61, 0x5e, 0x69, 0xbc, 0x9d,
        0x77, 0x34, 0x08, 0x4c, 0xee, 0x87, 0xf0, 0x55,
        0x8d, 0xd0, 0xb7, 0x2d, 0x05, 0xe1, 0x24, 0x85,
        0x26, 0x86, 0xf0, 0xb1, 0xd3, 0x43, 0x1e, 0x00
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x87, 0x45, 0x08, 0x82, 0x7f, 0xe9, 0xee, 0x0d,
        0xf0, 0x6a, 0x44, 0xec, 0x38, 0xa0, 0x38, 0x0f,
        0x54, 0xcd, 0xb5, 0x42, 0x1e, 0xe1, 0x19, 0x4b,
        0xfb, 0xb6, 0x11, 0x7d, 0x9e, 0x49, 0x32, 0x2f
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs13_ProduceCorrectResult) {

    const u8 s[] = {
        0x00, 0x19, 0xea, 0xde, 0x47, 0x6d, 0x01, 0x2e,
        0x2f, 0x03, 0x9e, 0x55, 0xa6, 0xeb, 0xca, 0x82,
        0x55, 0x19, 0xf2, 0x3e, 0x86, 0xfe, 0x0a, 0xf5,
        0x6a, 0x54, 0x54, 0x9c, 0xd6, 0xe4, 0x91, 0x03
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x4a, 0xb0, 0xa8, 0x22, 0x9a, 0x87, 0x52, 0xa0,
        0xcf, 0x47, 0x90, 0x68, 0x61, 0x36, 0x4b, 0x19,
        0xd5, 0xb5, 0x15, 0x2e, 0xe9, 0xc3, 0xe5, 0x16,
        0x4c, 0x4d, 0x20, 0xa9, 0x0e, 0x69, 0x80, 0xfc
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs14_ProduceCorrectResult) {

    const u8 s[] = {
        0x7c, 0x68, 0x82, 0x11, 0x55, 0xae, 0xe8, 0x6d,
        0xa4, 0x43, 0x0a, 0x44, 0x33, 0xd3, 0x7f, 0x49,
        0xc8, 0x0d, 0xd9, 0x9f, 0xd5, 0xdd, 0xd7, 0xd1,
        0xb8, 0x59, 0x32, 0x3b, 0x4e, 0x8d, 0x71, 0x04
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x45, 0xdc, 0x65, 0xb1, 0x47, 0xae, 0x39, 0x6f,
        0xc4, 0xfc, 0xbb, 0x45, 0x7a, 0x50, 0xea, 0x27,
        0xab, 0xea, 0x4e, 0x16, 0xfd, 0xda, 0x2e, 0x82,
        0xaa, 0xf7, 0x43, 0x4e, 0xbb, 0x95, 0x85, 0xd4
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs15_ProduceCorrectResult) {

    const u8 s[] = {
        0xc5, 0xf6, 0x00, 0xf4, 0x22, 0x47, 0xa3, 0x13,
        0x5a, 0x51, 0x38, 0x24, 0x31, 0xf1, 0x9e, 0x0f,
        0xde, 0xcb, 0xaa, 0xd5, 0xc0, 0xd5, 0xd7, 0x67,
        0xb5, 0x50, 0xbd, 0x9c, 0x82, 0xd2, 0x57, 0x06
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xc1, 0x4f, 0x0d, 0x2b, 0xaa, 0x19, 0xed, 0x77,
        0x2e, 0x47, 0x75, 0xab, 0xd7, 0xd9, 0xec, 0x6c,
        0x50, 0xeb, 0xb1, 0x41, 0xb0, 0xa4, 0x3d, 0x7d,
        0xd8, 0xef, 0xd2, 0x84, 0xec, 0xcf, 0xd9, 0x02
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs16_ProduceCorrectResult) {

    const u8 s[] = {
        0xc7, 0xc7, 0x4e, 0x99, 0x87, 0x84, 0x28, 0xb3,
        0x0e, 0x2a, 0xa4, 0x41, 0x89, 0x3c, 0x27, 0xa7,
        0x7a, 0x98, 0x50, 0x64, 0xec, 0xc1, 0x35, 0x32,
        0x59, 0x87, 0xc3, 0x3d, 0xe6, 0x95, 0xa1, 0x09
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x8e, 0xee, 0xaf, 0x0a, 0xe0, 0xf9, 0xb6, 0xba,
        0xa9, 0x29, 0x9e, 0x33, 0x3d, 0x05, 0x14, 0x98,
        0x14, 0x91, 0xac, 0x45, 0x9a, 0xa1, 0x71, 0x46,
        0x91, 0xf1, 0x08, 0xf1, 0x04, 0xec, 0xdb, 0x2e
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs17_ProduceCorrectResult) {

    const u8 s[] = {
        0xd6, 0x49, 0xcd, 0x25, 0x7d, 0x7d, 0xbd, 0x0e,
        0x2b, 0x36, 0xee, 0xfe, 0x61, 0x13, 0x03, 0x04,
        0x76, 0x05, 0xe8, 0xd6, 0x49, 0x51, 0x68, 0x9f,
        0x88, 0xdc, 0xe3, 0x33, 0x2f, 0x28, 0x86, 0x01
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x99, 0xc0, 0xc4, 0xa1, 0x85, 0x5c, 0xdf, 0x96,
        0xb7, 0xcd, 0x05, 0xb2, 0x1f, 0x18, 0xf2, 0xf9,
        0xe8, 0xea, 0x88, 0xc2, 0x2b, 0xd5, 0xf2, 0x9f,
        0x84, 0x63, 0xbc, 0xdc, 0xbe, 0xe3, 0x71, 0x85
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs18_ProduceCorrectResult) {

    const u8 s[] = {
        0xce, 0xc7, 0xb2, 0xf5, 0x1a, 0x24, 0x9b, 0x7d,
        0xd7, 0xce, 0x25, 0x87, 0x24, 0x3a, 0xd2, 0xfe,
        0x1e, 0xe7, 0x4b, 0xa2, 0xf8, 0xfe, 0xff, 0xa2,
        0x3f, 0xf5, 0xda, 0x96, 0xf4, 0x20, 0x81, 0x0e
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xff, 0xbc, 0x0c, 0xfe, 0xfd, 0xdf, 0xd2, 0x3a,
        0x88, 0xaa, 0x33, 0xbe, 0x1e, 0x08, 0x81, 0x14,
        0x6c, 0xd6, 0xfc, 0x19, 0x39, 0xd4, 0xda, 0x7d,
        0x39, 0xf7, 0xcc, 0xbc, 0xe3, 0xac, 0x48, 0x5e
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs19_ProduceCorrectResult) {

    const u8 s[] = {
        0x7b, 0xaf, 0xf6, 0xc4, 0x36, 0xb2, 0x5a, 0x0d,
        0xb8, 0xf9, 0xf5, 0x6f, 0xdc, 0x67, 0x17, 0xa7,
        0x63, 0x18, 0xfa, 0xa2, 0xb3, 0x19, 0xa2, 0x0b,
        0xa5, 0x73, 0x67, 0x35, 0x23, 0x2f, 0xea, 0x03
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xfc, 0x78, 0xd8, 0xab, 0x64, 0x76, 0xa8, 0x47,
        0x11, 0x80, 0x05, 0xc9, 0xc1, 0x2f, 0x1d, 0xb0,
        0x6b, 0xe3, 0x74, 0x17, 0x72, 0x24, 0x4e, 0xec,
        0x1d, 0xa7, 0xf4, 0xcb, 0x3f, 0xba, 0x76, 0xc6
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs20_ProduceCorrectResult) {

    const u8 s[] = {
        0x4f, 0x4c, 0xba, 0x32, 0x24, 0xf9, 0x0e, 0x3e,
        0xc7, 0xe3, 0xf3, 0x0e, 0x4a, 0xee, 0x38, 0x4c,
        0x25, 0xa8, 0xae, 0x63, 0x86, 0x80, 0x85, 0x95,
        0x3c, 0xe7, 0xd4, 0xec, 0x7e, 0x97, 0xab, 0x08
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x06, 0x91, 0x61, 0xdd, 0xf9, 0xa3, 0x56, 0xfd,
        0x4c, 0x14, 0x3c, 0xce, 0x7e, 0xce, 0xe4, 0xe5,
        0x98, 0x81, 0x60, 0x36, 0x44, 0x4f, 0x3f, 0xc3,
        0xdc, 0x32, 0x72, 0x0c, 0xac, 0x7c, 0xde, 0x7e
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs21_ProduceCorrectResult) {

    const u8 s[] = {
        0x3e, 0xb9, 0x49, 0xe8, 0xbb, 0x07, 0xba, 0x7b,
        0x11, 0xc4, 0xe1, 0xea, 0xeb, 0xb0, 0xb5, 0x63,
        0xae, 0x40, 0xe4, 0x1c, 0x88, 0x4e, 0xd1, 0xaf,
        0x52, 0x31, 0xcd, 0xb7, 0x04, 0x11, 0x89, 0x0a
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x8d, 0x7b, 0xb4, 0xed, 0x07, 0xa1, 0xbe, 0x11,
        0xf6, 0x16, 0x26, 0x98, 0xb9, 0x5b, 0x1e, 0xc0,
        0xa1, 0x7b, 0xf0, 0xbf, 0x84, 0xd5, 0x56, 0x99,
        0x73, 0x78, 0xea, 0xfa, 0x30, 0x25, 0x1f, 0xb2
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs22_ProduceCorrectResult) {

    const u8 s[] = {
        0x63, 0x34, 0x85, 0x47, 0xad, 0x2e, 0x90, 0x93,
        0x9a, 0x62, 0x10, 0x54, 0x4a, 0xd5, 0x26, 0xae,
        0x5d, 0xee, 0x4d, 0xec, 0x42, 0x4f, 0x8f, 0x20,
        0xb6, 0x33, 0x2b, 0x44, 0x54, 0xe2, 0xd9, 0x09
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x15, 0xcb, 0xae, 0x48, 0x07, 0x4a, 0x03, 0x89,
        0x57, 0x91, 0x74, 0x28, 0xb3, 0x6e, 0xa7, 0xae,
        0x44, 0xa0, 0x09, 0x5b, 0x20, 0x5e, 0x54, 0xed,
        0xbb, 0x62, 0x77, 0xb2, 0x08, 0xa4, 0x15, 0x6f
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs23_ProduceCorrectResult) {

    const u8 s[] = {
        0x37, 0x3b, 0xf9, 0xd8, 0x6e, 0x97, 0xc0, 0x08,
        0x42, 0x78, 0xe8, 0x87, 0x03, 0xe9, 0x74, 0x94,
        0x7e, 0xd0, 0x2d, 0x86, 0xd9, 0xcd, 0x39, 0x16,
        0x4a, 0x16, 0xc5, 0xf1, 0xc2, 0x7e, 0xe7, 0x09
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x31, 0x09, 0x2c, 0x0a, 0x43, 0x4d, 0xac, 0xf1,
        0x69, 0x6c, 0x18, 0x38, 0x63, 0x41, 0xec, 0xf9,
        0x90, 0xa4, 0x06, 0x82, 0x34, 0xa7, 0x26, 0xaa,
        0x9c, 0x88, 0x1c, 0x23, 0x79, 0xb7, 0x88, 0xff
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs24_ProduceCorrectResult) {

    const u8 s[] = {
        0xe2, 0x0a, 0xd7, 0x74, 0x99, 0xa8, 0x29, 0x9e,
        0xab, 0xf1, 0xd8, 0x84, 0xcc, 0x4a, 0xdc, 0x6e,
        0xbb, 0x7f, 0xd4, 0x8b, 0x60, 0xcd, 0xd5, 0x7d,
        0xf4, 0x33, 0x48, 0x99, 0xa2, 0x99, 0x34, 0x07
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xa6, 0x39, 0x47, 0x26, 0xd6, 0xd4, 0xab, 0x4f,
        0xe0, 0xe4, 0x70, 0x7a, 0x18, 0x57, 0x50, 0xd7,
        0x16, 0xff, 0x0d, 0xfd, 0xb0, 0x2d, 0x03, 0xae,
        0x9a, 0x16, 0x49, 0xb3, 0xd4, 0x83, 0x96, 0x80
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs25_ProduceCorrectResult) {

    const u8 s[] = {
        0xe5, 0x43, 0x0a, 0xf9, 0x6b, 0xa3, 0xe2, 0x38,
        0xd7, 0x49, 0xb1, 0x05, 0x28, 0xb9, 0xa6, 0x9b,
        0xe8, 0x2d, 0xb2, 0xcd, 0xcb, 0xda, 0x48, 0x85,
        0x0e, 0x8e, 0x20, 0x2c, 0xf5, 0x84, 0xc6, 0x0f
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xe3, 0x8a, 0xad, 0x02, 0x3c, 0x4c, 0x94, 0x5b,
        0x05, 0x61, 0xa8, 0xfc, 0xd2, 0x0e, 0x49, 0xa4,
        0x62, 0xca, 0x72, 0x2b, 0x1c, 0xec, 0x17, 0x25,
        0xb6, 0x09, 0x02, 0xa2, 0x83, 0x46, 0xe3, 0x74
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs26_ProduceCorrectResult) {

    const u8 s[] = {
        0xd0, 0x26, 0x43, 0x92, 0xf9, 0x55, 0x28, 0x1e,
        0x4b, 0x3a, 0x4c, 0xea, 0x4c, 0x7a, 0x4e, 0x36,
        0xf6, 0x47, 0xf2, 0xb4, 0x80, 0x3a, 0x4f, 0xa4,
        0xdf, 0x35, 0x82, 0x00, 0xaf, 0x16, 0x49, 0x0b
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x2f, 0x6c, 0x39, 0xa8, 0x52, 0x60, 0x25, 0xcb,
        0xb3, 0xc3, 0x98, 0x1f, 0x23, 0x6b, 0x92, 0x1f,
        0xd5, 0x41, 0x41, 0x43, 0xd6, 0xd4, 0x13, 0x9f,
        0x57, 0xcf, 0x0a, 0x76, 0x27, 0x29, 0x11, 0xbb
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs27_ProduceCorrectResult) {

    const u8 s[] = {
        0x7b, 0xe7, 0x63, 0xe9, 0x23, 0x80, 0x16, 0xe3,
        0xbe, 0x92, 0xab, 0xb7, 0x7a, 0x07, 0x97, 0x66,
        0x27, 0x35, 0x03, 0x36, 0x38, 0xf3, 0x94, 0x34,
        0x0c, 0xae, 0xab, 0x53, 0x29, 0x17, 0x3d, 0x0a
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xc8, 0x8c, 0x60, 0x67, 0xb3, 0xbd, 0x88, 0x87,
        0x45, 0x2b, 0xd3, 0xef, 0x64, 0xbf, 0x46, 0xed,
        0xbb, 0x90, 0x96, 0xe2, 0x49, 0xe2, 0x26, 0xc1,
        0xed, 0xdc, 0x53, 0x93, 0x75, 0xa5, 0xa3, 0x7f
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs28_ProduceCorrectResult) {

    const u8 s[] = {
        0xbf, 0xf2, 0x73, 0xb1, 0xa8, 0x8b, 0xb1, 0xbb,
        0xe3, 0xd9, 0x49, 0x68, 0xda, 0x3a, 0x8d, 0x4d,
        0x9f, 0x59, 0x67, 0x67, 0xc7, 0xa1, 0x76, 0xb1,
        0x9f, 0x63, 0x5b, 0xf9, 0xb6, 0x35, 0x3b, 0x0c
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xfe, 0x99, 0xa8, 0x78, 0x02, 0x28, 0xdf, 0x83,
        0xce, 0xa8, 0x0b, 0x70, 0x5d, 0x88, 0x8c, 0xd3,
        0xe8, 0x9c, 0x52, 0x56, 0x9b, 0xde, 0xc2, 0x58,
        0x34, 0x21, 0x8d, 0xc9, 0xf2, 0x5b, 0xcd, 0xad
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs29_ProduceCorrectResult) {

    const u8 s[] = {
        0xe0, 0x4c, 0x7b, 0x10, 0xb7, 0xf3, 0xd9, 0x0c,
        0x01, 0x79, 0xf5, 0xd6, 0x09, 0xbc, 0x58, 0x9c,
        0xd9, 0x56, 0xd5, 0xf7, 0x24, 0xa8, 0x88, 0x91,
        0xca, 0x52, 0x15, 0xf0, 0x59, 0x6d, 0xc2, 0x04
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x81, 0xa5, 0xd1, 0xb9, 0xa1, 0xb1, 0x25, 0x2e,
        0xa7, 0xcb, 0x47, 0x37, 0xec, 0xa0, 0xc7, 0xe5,
        0xd4, 0x1c, 0xdc, 0xa2, 0xb6, 0x25, 0x00, 0x07,
        0x94, 0xa0, 0x2a, 0x2f, 0xe5, 0xa9, 0xbe, 0x2e
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs30_ProduceCorrectResult) {

    const u8 s[] = {
        0xb9, 0xa5, 0x56, 0xd0, 0x0d, 0x23, 0x32, 0xd4,
        0x8b, 0x5d, 0xd7, 0x39, 0xe3, 0x8a, 0xe7, 0x53,
        0x3e, 0x31, 0x76, 0x4f, 0x91, 0x2c, 0x57, 0xc8,
        0xe2, 0x4c, 0x7c, 0x63, 0xdd, 0x34, 0x63, 0x00
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xbc, 0x92, 0x90, 0x2a, 0x4f, 0xe4, 0x65, 0x20,
        0x36, 0x53, 0xef, 0x03, 0x5a, 0xe2, 0xb3, 0x0e,
        0x1b, 0x90, 0xeb, 0x45, 0x12, 0x95, 0x0f, 0x36,
        0x8a, 0xce, 0xc6, 0xd8, 0x70, 0xec, 0x2b, 0x0f
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs31_ProduceCorrectResult) {

    const u8 s[] = {
        0x00, 0xda, 0x63, 0x19, 0xdf, 0x93, 0xa9, 0xa7,
        0x9c, 0x05, 0xd5, 0xac, 0xa7, 0x35, 0x18, 0xee,
        0x58, 0x5c, 0x14, 0x4d, 0x50, 0x3e, 0xb2, 0x05,
        0xe7, 0xb7, 0x3c, 0x73, 0x3e, 0x30, 0xad, 0x0d
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x8f, 0xa6, 0x1c, 0xeb, 0x94, 0xfc, 0x90, 0xf2,
        0xa8, 0x56, 0xb1, 0xd5, 0xc3, 0x63, 0xc1, 0x5b,
        0xc6, 0x91, 0x6e, 0x97, 0x3c, 0x05, 0xe1, 0x70,
        0x15, 0xb8, 0xf3, 0x70, 0x1b, 0xc1, 0xa3, 0x09
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs32_ProduceCorrectResult) {

    const u8 s[] = {
        0x20, 0xfa, 0x61, 0xfe, 0x48, 0xa3, 0x74, 0xf4,
        0x08, 0x3e, 0x3c, 0xe1, 0xaf, 0x2e, 0x32, 0xf6,
        0xdd, 0x13, 0x42, 0xbf, 0xfc, 0x2d, 0x57, 0x7b,
        0x04, 0xe3, 0xb1, 0xc2, 0x35, 0x5a, 0x6c, 0x0f
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x44, 0xb2, 0x83, 0x32, 0x2f, 0xdb, 0xd2, 0xba,
        0x60, 0x6c, 0x9b, 0x0c, 0x1a, 0xde, 0x92, 0xc6,
        0x83, 0x20, 0x10, 0x1f, 0x2b, 0x78, 0x8a, 0xd2,
        0xd2, 0xf4, 0x9f, 0xfc, 0x7c, 0x8b, 0x32, 0xaa
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs33_ProduceCorrectResult) {

    const u8 s[] = {
        0xaf, 0x7f, 0xd9, 0x7f, 0x24, 0x85, 0x3c, 0xf2,
        0x86, 0x02, 0x67, 0x61, 0xe3, 0xae, 0x61, 0xa8,
        0x54, 0x1a, 0xec, 0x42, 0x8c, 0x47, 0xd9, 0x41,
        0xf6, 0x90, 0x07, 0x55, 0xf0, 0x04, 0x86, 0x08
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xc5, 0xf9, 0x84, 0x2e, 0xcd, 0xca, 0xbe, 0xc4,
        0x89, 0xef, 0x91, 0x5f, 0xf5, 0x70, 0x95, 0x01,
        0x8d, 0xd2, 0xa2, 0xe7, 0xb9, 0x4f, 0x44, 0x9c,
        0xd9, 0x03, 0x45, 0xc0, 0xe6, 0x56, 0x03, 0xa8
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs34_ProduceCorrectResult) {

    const u8 s[] = {
        0x50, 0x87, 0x0d, 0xd0, 0xcf, 0x83, 0x22, 0xf2,
        0x7d, 0xf1, 0x98, 0x0d, 0xd8, 0x96, 0x01, 0xb6,
        0x5f, 0xb6, 0x5a, 0xbd, 0xe3, 0x04, 0xd0, 0x79,
        0x5c, 0x65, 0x74, 0x66, 0x84, 0x5b, 0x88, 0x00
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xf6, 0x50, 0xd0, 0x4c, 0xa7, 0x9e, 0x09, 0xc9,
        0xa2, 0xe4, 0xb0, 0x9a, 0x81, 0xc9, 0x00, 0x54,
        0x53, 0x28, 0xcc, 0xdf, 0x24, 0x4b, 0x99, 0xc9,
        0x4e, 0xc0, 0x0e, 0x03, 0x27, 0xa2, 0x51, 0xb1
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs35_ProduceCorrectResult) {

    const u8 s[] = {
        0x9f, 0x79, 0xe1, 0xf8, 0x09, 0x21, 0xcf, 0xb4,
        0x84, 0xa7, 0x6c, 0xf6, 0x0b, 0x6f, 0x21, 0x9a,
        0xa2, 0x13, 0x0c, 0x65, 0x6a, 0xd7, 0xba, 0x76,
        0x34, 0x20, 0x18, 0xe2, 0xc6, 0x30, 0xca, 0x02
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x1e, 0xdd, 0x5d, 0x9a, 0xfb, 0x1d, 0xb8, 0x7e,
        0x57, 0xef, 0x09, 0x5d, 0xde, 0x55, 0x7a, 0x3a,
        0x70, 0xbc, 0xa2, 0x25, 0x4a, 0x04, 0xf9, 0x7c,
        0x99, 0x2e, 0x56, 0xa3, 0xd9, 0x21, 0x4f, 0x27
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs36_ProduceCorrectResult) {

    const u8 s[] = {
        0x47, 0x7e, 0x6f, 0x63, 0x4a, 0x0d, 0x44, 0xf8,
        0x25, 0x93, 0x53, 0x4b, 0x6e, 0x2c, 0xe3, 0x4f,
        0x46, 0x1c, 0x84, 0x1f, 0xa9, 0x01, 0x14, 0x30,
        0xa7, 0x35, 0x69, 0x2d, 0xd0, 0xfc, 0x2d, 0x00
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x91, 0xcd, 0xb4, 0x91, 0x4f, 0x6f, 0x82, 0xfa,
        0x6e, 0x4b, 0xa1, 0x16, 0x24, 0x4c, 0x92, 0xfd,
        0x3d, 0x3b, 0x71, 0x82, 0x81, 0x04, 0x68, 0x5d,
        0x13, 0xb1, 0xe5, 0x8a, 0xaf, 0x89, 0x68, 0x0d
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs37_ProduceCorrectResult) {

    const u8 s[] = {
        0x5a, 0x5f, 0x89, 0x41, 0x8f, 0x0f, 0x10, 0xc9,
        0x98, 0x00, 0xde, 0x60, 0xda, 0x96, 0x4c, 0x55,
        0x51, 0x72, 0x6d, 0x6b, 0x89, 0xd3, 0xd8, 0x81,
        0xa8, 0xb5, 0x41, 0x44, 0x2b, 0xe9, 0x2e, 0x00
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x2a, 0x28, 0x25, 0xd1, 0x5c, 0x83, 0xe7, 0xf6,
        0x83, 0xd2, 0xf9, 0xa7, 0x87, 0x9b, 0xd5, 0x9a,
        0x05, 0x37, 0xd3, 0x99, 0x3d, 0x74, 0x8c, 0x25,
        0xd7, 0x1f, 0x2b, 0x97, 0x59, 0x38, 0x56, 0xa2
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs38_ProduceCorrectResult) {

    const u8 s[] = {
        0x70, 0xd9, 0x9f, 0x33, 0x2a, 0x88, 0x00, 0x47,
        0x9c, 0xb8, 0x80, 0x67, 0x85, 0x63, 0x45, 0x87,
        0xcc, 0xec, 0xf4, 0x4c, 0xef, 0x1c, 0xb7, 0x97,
        0xf9, 0xb9, 0x7a, 0xd4, 0x5c, 0x72, 0xf3, 0x0a
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x3c, 0x3c, 0xf4, 0xc9, 0x6b, 0xb8, 0x29, 0xfa,
        0x8c, 0xb5, 0x45, 0x8d, 0x86, 0x2c, 0x60, 0xac,
        0x02, 0x79, 0xd6, 0x57, 0xd6, 0xf1, 0x9e, 0x2a,
        0x74, 0x04, 0x08, 0x1d, 0xa5, 0x95, 0xc6, 0x1d
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs39_ProduceCorrectResult) {

    const u8 s[] = {
        0x3e, 0x1f, 0x09, 0x3f, 0x2c, 0x68, 0x76, 0xad,
        0x0f, 0x32, 0xad, 0xfa, 0xa3, 0x47, 0xe5, 0x94,
        0x69, 0x46, 0x0d, 0x37, 0x9b, 0xe2, 0xc0, 0x3c,
        0x36, 0x65, 0x9c, 0x8f, 0x05, 0x41, 0x21, 0x06
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xb4, 0x67, 0x5b, 0x15, 0x85, 0xbf, 0x7f, 0xe9,
        0x83, 0x04, 0x9e, 0xf1, 0x00, 0x88, 0xd3, 0x68,
        0xdb, 0xa0, 0x03, 0x07, 0xc6, 0xdc, 0xf0, 0xff,
        0xb7, 0x4a, 0xd2, 0x3c, 0x25, 0xcd, 0x3f, 0xbe
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs40_ProduceCorrectResult) {

    const u8 s[] = {
        0x32, 0xf9, 0x9a, 0x9c, 0xba, 0x09, 0xda, 0x1d,
        0x3f, 0x10, 0x8a, 0xc4, 0xec, 0x4c, 0x52, 0x10,
        0xf5, 0xf4, 0x86, 0xb5, 0x10, 0x55, 0xf4, 0xe0,
        0xc0, 0x1e, 0x5a, 0x12, 0x1d, 0xcc, 0x10, 0x07
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x9f, 0x4a, 0x57, 0x8d, 0x93, 0x27, 0x6d, 0xe3,
        0x8a, 0xa9, 0xad, 0x87, 0x66, 0xd9, 0x00, 0x4f,
        0x81, 0xbc, 0xd5, 0x2a, 0x25, 0x49, 0x2d, 0x29,
        0x48, 0x77, 0x10, 0x2d, 0x29, 0x63, 0x05, 0x13
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs41_ProduceCorrectResult) {

    const u8 s[] = {
        0xd8, 0xc3, 0x70, 0x97, 0x5a, 0xaa, 0x18, 0xe0,
        0x2b, 0x92, 0x88, 0x87, 0xd7, 0x84, 0x36, 0xc5,
        0x91, 0x47, 0x78, 0x59, 0x39, 0xca, 0x02, 0x2a,
        0xbf, 0x3d, 0xb2, 0x16, 0xe1, 0xd8, 0xc8, 0x06
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xf7, 0x75, 0x7b, 0xb3, 0x0a, 0xa0, 0xd5, 0x69,
        0x9a, 0xad, 0xd9, 0x10, 0x2e, 0xd9, 0xb7, 0xe7,
        0xaf, 0x3b, 0xa8, 0x28, 0x5b, 0x14, 0xd3, 0xda,
        0x47, 0xc9, 0x21, 0xb4, 0x47, 0x4a, 0x6b, 0x05
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs42_ProduceCorrectResult) {

    const u8 s[] = {
        0xe8, 0x86, 0x66, 0x92, 0xb5, 0x32, 0xff, 0x5e,
        0x5e, 0xef, 0xc4, 0x41, 0x7c, 0x4a, 0xf6, 0x38,
        0x18, 0xbf, 0xbe, 0xb3, 0xb3, 0xa5, 0x2d, 0xbc,
        0x96, 0x0c, 0x62, 0x9e, 0xcc, 0x27, 0xf0, 0x04
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xfe, 0x91, 0x35, 0x91, 0xb0, 0x25, 0x63, 0xaf,
        0x98, 0xdb, 0xc7, 0x27, 0xdf, 0xc3, 0xad, 0x2f,
        0x10, 0xfb, 0x51, 0x1d, 0xeb, 0x62, 0x0c, 0xe6,
        0x08, 0xbf, 0xe9, 0xf5, 0x45, 0xc0, 0x35, 0x18
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs43_ProduceCorrectResult) {

    const u8 s[] = {
        0xaa, 0x6f, 0x20, 0x38, 0x6e, 0x29, 0x8a, 0x00,
        0x25, 0xdc, 0x94, 0x0c, 0x61, 0x76, 0xe1, 0x2e,
        0xb0, 0x9c, 0x01, 0xa7, 0x4f, 0xe1, 0x3c, 0x8b,
        0xf8, 0xca, 0xbc, 0x3a, 0x83, 0xf2, 0x27, 0x0b
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xac, 0x64, 0x58, 0x0c, 0x05, 0xae, 0x95, 0xae,
        0x96, 0x80, 0xb6, 0x67, 0x67, 0x01, 0x47, 0xd5,
        0x89, 0xec, 0x5d, 0xd9, 0xe5, 0x48, 0x05, 0x79,
        0x8c, 0x82, 0xf0, 0xb4, 0x24, 0x86, 0x95, 0x3f
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs44_ProduceCorrectResult) {

    const u8 s[] = {
        0xac, 0xbd, 0x06, 0x29, 0xc9, 0xad, 0xd8, 0x34,
        0x14, 0x4f, 0x4d, 0xb0, 0x84, 0xe0, 0x1c, 0xa9,
        0xe6, 0xf2, 0x90, 0x0e, 0x68, 0x76, 0x72, 0xd5,
        0x4e, 0x12, 0x0b, 0x71, 0x28, 0xce, 0x7d, 0x0d
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x95, 0x12, 0x46, 0xa8, 0x2f, 0xdf, 0x55, 0x3d,
        0xee, 0x63, 0x17, 0xd5, 0x45, 0x36, 0xcb, 0x2c,
        0xa9, 0x17, 0xbd, 0x82, 0xc7, 0xe2, 0x8a, 0x30,
        0x35, 0xc5, 0xa6, 0x15, 0x27, 0x2e, 0x93, 0xdb
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs45_ProduceCorrectResult) {

    const u8 s[] = {
        0x51, 0xc4, 0x03, 0x54, 0xe5, 0x94, 0x98, 0x3e,
        0x60, 0x2e, 0xdf, 0x83, 0x02, 0x01, 0x5d, 0x7d,
        0x93, 0xa9, 0x8d, 0x1c, 0x21, 0x6b, 0xd5, 0x7f,
        0xc0, 0xb3, 0x40, 0xed, 0x21, 0x96, 0xfb, 0x00
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xc3, 0xf3, 0xf2, 0xdc, 0xd8, 0xc7, 0xf3, 0xb8,
        0x41, 0x2f, 0x5f, 0x6a, 0x2d, 0x54, 0x36, 0xa7,
        0x71, 0x08, 0x27, 0x69, 0x2e, 0x38, 0xa9, 0x09,
        0x48, 0x17, 0x1b, 0x6c, 0x39, 0xfd, 0x3b, 0xb6
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs46_ProduceCorrectResult) {

    const u8 s[] = {
        0x67, 0xc2, 0xd5, 0xcc, 0xf6, 0x98, 0xab, 0xc6,
        0x4f, 0x5a, 0x11, 0xb3, 0xd7, 0xfe, 0x87, 0xed,
        0x84, 0x1a, 0xa6, 0x66, 0xcd, 0x90, 0x56, 0xcd,
        0xd3, 0x44, 0xfa, 0x1e, 0x78, 0x7c, 0x5b, 0x07
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x1e, 0x28, 0xfa, 0xb7, 0x34, 0x5e, 0xcd, 0x5f,
        0x7d, 0x32, 0x6c, 0xad, 0x0d, 0x6e, 0xe4, 0xf5,
        0x27, 0x42, 0xb7, 0x87, 0x5f, 0xa5, 0x7c, 0xff,
        0x7d, 0xf8, 0x9a, 0x1b, 0x82, 0x2a, 0x76, 0xfc
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs47_ProduceCorrectResult) {

    const u8 s[] = {
        0xb6, 0xc2, 0xb2, 0xb4, 0x5d, 0x99, 0xc9, 0x7b,
        0xab, 0x59, 0x2b, 0x26, 0xe9, 0x24, 0xe0, 0xcc,
        0x7a, 0x5b, 0x37, 0x49, 0x43, 0x6e, 0xe7, 0x36,
        0x9b, 0x0d, 0xa0, 0xbc, 0x17, 0x8c, 0x61, 0x06
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xfa, 0xa2, 0xf5, 0x36, 0x0c, 0x4c, 0xd0, 0x0f,
        0xf9, 0xfe, 0x7a, 0x2b, 0xcd, 0x57, 0xe6, 0x51,
        0x0e, 0xc5, 0x3b, 0xef, 0x6e, 0x2b, 0x69, 0xee,
        0x73, 0x99, 0x47, 0x80, 0xde, 0x2b, 0x17, 0xf1
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs48_ProduceCorrectResult) {

    const u8 s[] = {
        0x35, 0xb4, 0x6d, 0xa4, 0xe9, 0xd5, 0x0b, 0x5b,
        0x27, 0x6d, 0x53, 0x75, 0x8b, 0xfa, 0xda, 0x93,
        0xc7, 0x56, 0x3b, 0xe4, 0x51, 0x64, 0xb8, 0xda,
        0x21, 0xe1, 0xbd, 0x2c, 0xf0, 0xc3, 0xd6, 0x06
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xae, 0x21, 0x1e, 0x51, 0x51, 0x37, 0x29, 0x44,
        0x42, 0x03, 0x32, 0xca, 0x41, 0x88, 0xe9, 0xd8,
        0x22, 0x88, 0x74, 0xf6, 0xf2, 0x17, 0xa8, 0x23,
        0x2d, 0x8a, 0x3a, 0xbf, 0xad, 0x55, 0xd9, 0xca
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs49_ProduceCorrectResult) {

    const u8 s[] = {
        0x0f, 0x54, 0x22, 0x72, 0xc6, 0x35, 0x86, 0xd8,
        0x18, 0xe3, 0xb2, 0xb0, 0x1e, 0x76, 0x08, 0x84,
        0x29, 0xdf, 0xc0, 0x04, 0x8e, 0xfa, 0xa6, 0xfd,
        0x0d, 0x21, 0x6b, 0xb3, 0x0b, 0xf5, 0x83, 0x06
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x74, 0x0e, 0xae, 0xc4, 0x70, 0x4a, 0x63, 0x99,
        0x50, 0x58, 0xb9, 0x78, 0x04, 0x7f, 0x41, 0x87,
        0x6f, 0xe5, 0x70, 0x1d, 0xb6, 0x03, 0xf3, 0x8b,
        0x14, 0x3c, 0xd2, 0xe9, 0x73, 0x76, 0x80, 0x8f
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs50_ProduceCorrectResult) {

    const u8 s[] = {
        0xa7, 0xb2, 0x83, 0x10, 0x02, 0xe3, 0xbe, 0x55,
        0xc4, 0xbb, 0x5e, 0x21, 0xbf, 0x74, 0x07, 0xf1,
        0x1b, 0x06, 0xc2, 0x7f, 0x7b, 0x76, 0x95, 0x4c,
        0x29, 0xcd, 0x63, 0x0f, 0xc8, 0x68, 0xb2, 0x0e
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x66, 0x71, 0xb5, 0x35, 0x9e, 0x80, 0xbe, 0x4b,
        0x6f, 0xbe, 0x46, 0xcb, 0x3a, 0x24, 0xcb, 0x8c,
        0x30, 0x27, 0x31, 0xd3, 0x9e, 0xe4, 0xe6, 0x89,
        0xfd, 0x8e, 0xe1, 0xe0, 0x51, 0x71, 0x79, 0x12
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs51_ProduceCorrectResult) {

    const u8 s[] = {
        0x0b, 0xba, 0x76, 0x1e, 0xab, 0x99, 0x7b, 0x95,
        0x74, 0x2a, 0x26, 0x71, 0xbc, 0x55, 0x93, 0xcc,
        0xa5, 0x4f, 0x12, 0x18, 0x29, 0x0b, 0x52, 0xe3,
        0x86, 0x63, 0x43, 0xfd, 0xa5, 0x11, 0x2b, 0x09
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x5a, 0xff, 0x31, 0xe4, 0xe6, 0x43, 0x4d, 0x56,
        0x80, 0xe0, 0x65, 0x7f, 0x30, 0xdf, 0x73, 0xd4,
        0xc6, 0x1e, 0x0f, 0xbc, 0x15, 0xc8, 0xad, 0xc6,
        0x0d, 0xb6, 0x30, 0xe9, 0xcf, 0x90, 0x1e, 0xfc
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs52_ProduceCorrectResult) {

    const u8 s[] = {
        0xd0, 0x94, 0x21, 0x4f, 0xb2, 0x6b, 0xc1, 0xc5,
        0x51, 0xed, 0x5f, 0x61, 0x0f, 0xeb, 0x6f, 0x6a,
        0x56, 0x5d, 0xad, 0x10, 0x2c, 0xf6, 0xe2, 0x8f,
        0xa1, 0xc9, 0xe2, 0x3f, 0xec, 0x7e, 0x44, 0x0b
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x31, 0xf4, 0x10, 0x9f, 0x8f, 0x35, 0xef, 0x92,
        0x76, 0x12, 0xc4, 0x07, 0xee, 0x0e, 0x65, 0x9e,
        0xdb, 0xd5, 0x73, 0x4f, 0x08, 0x37, 0xa7, 0xeb,
        0xf2, 0xdb, 0x62, 0xf5, 0x87, 0xd3, 0xd0, 0xdd
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs53_ProduceCorrectResult) {

    const u8 s[] = {
        0x27, 0x20, 0x8e, 0x3b, 0x9e, 0x4d, 0xbc, 0x1f,
        0x5b, 0x30, 0x97, 0xf0, 0x79, 0x83, 0xe4, 0x05,
        0x48, 0xf6, 0x34, 0x38, 0xa8, 0x98, 0x08, 0x83,
        0xef, 0x7c, 0x67, 0x71, 0xe4, 0x93, 0xf4, 0x08
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x7c, 0x71, 0x44, 0x5b, 0x2e, 0x34, 0x67, 0x50,
        0x13, 0x45, 0xa8, 0x25, 0x6f, 0xd6, 0x83, 0x92,
        0xed, 0x6e, 0x44, 0x48, 0x5c, 0x3a, 0x4a, 0xf6,
        0x46, 0x4e, 0x0a, 0x30, 0x71, 0xa9, 0x46, 0xe7
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs54_ProduceCorrectResult) {

    const u8 s[] = {
        0xbf, 0xf3, 0x5d, 0xcc, 0xac, 0x57, 0x3a, 0x9a,
        0x03, 0x19, 0xe6, 0xf3, 0x85, 0x54, 0x34, 0x66,
        0x8c, 0xda, 0xfe, 0x2b, 0xe5, 0xc6, 0x8c, 0x44,
        0x22, 0x50, 0xf6, 0x9b, 0xc8, 0x00, 0x2e, 0x0c
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xae, 0x41, 0xee, 0xfb, 0x21, 0xcc, 0x21, 0xa2,
        0x3c, 0xdb, 0xe6, 0x0b, 0xff, 0xa1, 0x78, 0x02,
        0x90, 0x20, 0x2c, 0xec, 0x1b, 0x77, 0x42, 0x0e,
        0x2c, 0xd6, 0xc5, 0x7d, 0xb4, 0x86, 0xa3, 0x80
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs55_ProduceCorrectResult) {

    const u8 s[] = {
        0x68, 0x2e, 0x19, 0x4d, 0x7f, 0x49, 0xee, 0xa7,
        0xe4, 0x04, 0x06, 0x69, 0xb0, 0x65, 0x5b, 0x9c,
        0x4b, 0x45, 0xa5, 0x60, 0xa0, 0x3f, 0x00, 0xe4,
        0xf4, 0xfe, 0xeb, 0x26, 0x74, 0xbd, 0x38, 0x01
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x25, 0xda, 0xd5, 0x1d, 0xfa, 0x4c, 0xc1, 0x1d,
        0x61, 0x37, 0x49, 0x47, 0xaf, 0x59, 0xf1, 0x90,
        0x5a, 0x14, 0xe1, 0x63, 0xbd, 0x7f, 0xf7, 0xd8,
        0x1a, 0xc8, 0x2f, 0xa7, 0xfb, 0x83, 0x71, 0x69
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs56_ProduceCorrectResult) {

    const u8 s[] = {
        0x70, 0x94, 0xb2, 0x4d, 0x7a, 0xc3, 0xfc, 0xae,
        0x06, 0x2c, 0xf8, 0x55, 0x6d, 0xc8, 0x3f, 0xb0,
        0x0d, 0x71, 0x46, 0x2c, 0x41, 0xda, 0x2f, 0x10,
        0xa0, 0xb4, 0xe4, 0xbe, 0xe6, 0x32, 0x7f, 0x08
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xfd, 0xd1, 0x35, 0x1e, 0x9d, 0xec, 0x54, 0x22,
        0x3b, 0x73, 0x16, 0xb5, 0xa0, 0x27, 0x5c, 0x6e,
        0x46, 0xf8, 0x73, 0xc6, 0xde, 0x26, 0xbb, 0xd5,
        0x7f, 0xa3, 0x5b, 0xc0, 0x5c, 0x04, 0x4f, 0x6b
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs57_ProduceCorrectResult) {

    const u8 s[] = {
        0x3d, 0xe5, 0x5e, 0x40, 0x4b, 0xb0, 0x9b, 0x9f,
        0xf4, 0xd0, 0x4a, 0x09, 0x11, 0x11, 0x92, 0xe0,
        0xda, 0xfa, 0xac, 0xab, 0x9a, 0x11, 0x9a, 0xc0,
        0x06, 0x76, 0x5c, 0x74, 0x36, 0x8a, 0x9d, 0x0a
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x41, 0xec, 0xd6, 0x6d, 0xac, 0x7b, 0x69, 0x1b,
        0x87, 0xe0, 0x49, 0xae, 0x94, 0x05, 0x41, 0xe5,
        0x4e, 0x66, 0x96, 0xdd, 0xc8, 0x39, 0xdb, 0xa4,
        0x24, 0xf0, 0xb5, 0x66, 0x6e, 0x9b, 0x1f, 0xc5
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs58_ProduceCorrectResult) {

    const u8 s[] = {
        0x1c, 0x64, 0x4e, 0xfc, 0x4f, 0xc3, 0xdd, 0x32,
        0xde, 0xe4, 0x9b, 0x68, 0x4b, 0xe7, 0xaa, 0xc0,
        0x7f, 0xe5, 0x8b, 0xd0, 0x01, 0x36, 0x9b, 0xa9,
        0x2c, 0x0b, 0xba, 0x27, 0xf6, 0x1d, 0x82, 0x09
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xf2, 0xbf, 0xaf, 0xb5, 0x69, 0xa2, 0x9f, 0x3f,
        0x90, 0x4e, 0x1b, 0xd0, 0xe6, 0xda, 0xc0, 0x4d,
        0x9b, 0x0f, 0x3d, 0xd4, 0x2d, 0xc5, 0x0d, 0xb0,
        0x76, 0x21, 0xd9, 0xf4, 0x52, 0xad, 0xec, 0xda
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs59_ProduceCorrectResult) {

    const u8 s[] = {
        0xbe, 0x5a, 0xfe, 0x2c, 0xc1, 0xe9, 0x52, 0xe1,
        0x27, 0x92, 0x3e, 0x5c, 0xd7, 0x59, 0xdf, 0xff,
        0x32, 0x0d, 0xfd, 0xb6, 0xbe, 0x80, 0xb9, 0xcf,
        0xd8, 0xe8, 0xe4, 0x31, 0x51, 0x32, 0x7d, 0x09
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xba, 0x2c, 0x71, 0xa4, 0x37, 0x8e, 0xea, 0x2c,
        0xe2, 0x9a, 0x08, 0x2f, 0x55, 0xc5, 0xd1, 0x0e,
        0xb7, 0x0c, 0xc5, 0xc9, 0x56, 0x04, 0x8d, 0x39,
        0x1b, 0x7a, 0xdc, 0x3b, 0x9d, 0xd3, 0xdc, 0x96
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs60_ProduceCorrectResult) {

    const u8 s[] = {
        0xa4, 0x56, 0x44, 0xc3, 0x89, 0x51, 0xca, 0x7b,
        0xf6, 0xb9, 0xb9, 0xaa, 0x21, 0xa8, 0xab, 0xf2,
        0x89, 0x9d, 0xa5, 0x83, 0x9e, 0x2a, 0x45, 0x81,
        0x75, 0xfc, 0x73, 0xc3, 0xd9, 0xb1, 0x53, 0x0b
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xd2, 0x72, 0x86, 0x01, 0x60, 0x3e, 0x33, 0x44,
        0xd0, 0x94, 0xe2, 0x6d, 0x6b, 0x0c, 0x6b, 0x87,
        0xd5, 0x15, 0x7c, 0xb2, 0xcf, 0x2a, 0xd7, 0xe8,
        0x4a, 0x00, 0x7c, 0xd8, 0xd0, 0x53, 0x75, 0xbe
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs61_ProduceCorrectResult) {

    const u8 s[] = {
        0x9e, 0x95, 0x93, 0xa5, 0x7f, 0xf8, 0x25, 0xe0,
        0x40, 0xfa, 0x67, 0xc1, 0x0f, 0x09, 0x6e, 0xc6,
        0x9e, 0x01, 0x78, 0x4d, 0x79, 0x27, 0x78, 0xee,
        0xa5, 0x4c, 0xda, 0xd5, 0x4b, 0xdd, 0x61, 0x03
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x99, 0xb8, 0x26, 0x3a, 0x74, 0xb8, 0x77, 0x2d,
        0x71, 0x6e, 0x3d, 0x4a, 0xd0, 0x36, 0x68, 0x01,
        0x00, 0x5e, 0xab, 0x0e, 0xc2, 0x70, 0x7c, 0xc3,
        0x60, 0x85, 0x52, 0x82, 0x53, 0x10, 0xe1, 0x99
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs62_ProduceCorrectResult) {

    const u8 s[] = {
        0x16, 0xd4, 0x58, 0x87, 0xc6, 0x2c, 0x4a, 0xa6,
        0x16, 0x16, 0x91, 0x6e, 0x84, 0x01, 0x93, 0xd8,
        0x7d, 0xd7, 0x41, 0x63, 0xfc, 0x8b, 0x6f, 0x9e,
        0x99, 0x72, 0xef, 0x64, 0xcc, 0xe3, 0x84, 0x00
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x2f, 0x0f, 0x23, 0xb7, 0xb3, 0x84, 0x94, 0xa8,
        0x62, 0x12, 0xab, 0x97, 0x26, 0x53, 0x8f, 0xba,
        0x53, 0xc6, 0x0b, 0xeb, 0x41, 0x2f, 0x45, 0xdc,
        0x3a, 0xaa, 0x40, 0x83, 0x8e, 0x8f, 0xf0, 0x3c
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs63_ProduceCorrectResult) {

    const u8 s[] = {
        0x48, 0xd2, 0x4a, 0x12, 0xb1, 0xa4, 0xfc, 0xce,
        0xd7, 0x36, 0x64, 0x7f, 0x4b, 0xd0, 0xa9, 0x27,
        0x78, 0xd1, 0xd3, 0xbd, 0xff, 0xee, 0x03, 0x22,
        0x24, 0x05, 0xbd, 0x59, 0xf0, 0x7c, 0x3e, 0x06
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xc7, 0x1e, 0xb5, 0x08, 0x94, 0x19, 0x85, 0xbe,
        0xb1, 0x6e, 0xf6, 0x71, 0xfd, 0x7a, 0xec, 0x29,
        0x04, 0xb5, 0x12, 0x9f, 0xb8, 0x18, 0x90, 0x87,
        0xbb, 0x89, 0xd0, 0xf2, 0x85, 0x20, 0x33, 0x66
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs64_ProduceCorrectResult) {

    const u8 s[] = {
        0xd0, 0xff, 0x26, 0x7a, 0x68, 0xff, 0xcb, 0x1c,
        0x79, 0x9c, 0x69, 0x25, 0x17, 0xdb, 0x54, 0x73,
        0x27, 0x20, 0xac, 0x82, 0x23, 0x37, 0x59, 0x9b,
        0x61, 0xc4, 0xb5, 0xbd, 0x77, 0xd5, 0xb8, 0x02
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x13, 0x52, 0x7f, 0x32, 0xac, 0xe6, 0x69, 0x60,
        0x90, 0x43, 0x64, 0xce, 0x56, 0x86, 0xca, 0xcf,
        0x5e, 0x10, 0x48, 0x5d, 0x15, 0x19, 0x7d, 0x82,
        0xf7, 0xaa, 0xba, 0xf3, 0x57, 0x1a, 0x51, 0x43
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs65_ProduceCorrectResult) {

    const u8 s[] = {
        0xd9, 0x8d, 0xeb, 0x63, 0xca, 0x32, 0xad, 0x31,
        0x91, 0x62, 0x68, 0x45, 0x15, 0x0a, 0xac, 0xd8,
        0x0a, 0xfa, 0x0a, 0x27, 0x16, 0x5a, 0x08, 0x30,
        0x2f, 0x66, 0x2a, 0xfe, 0x0e, 0x9d, 0xe8, 0x0c
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x55, 0x39, 0xe1, 0xa7, 0x71, 0x4b, 0x72, 0x6a,
        0x38, 0xc5, 0xe5, 0x59, 0x9d, 0x79, 0x24, 0x7d,
        0x34, 0xcd, 0x17, 0x03, 0x11, 0x71, 0x30, 0xb2,
        0x8b, 0x9f, 0x29, 0x06, 0x77, 0x36, 0xcf, 0xff
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs66_ProduceCorrectResult) {

    const u8 s[] = {
        0x6b, 0x1d, 0x92, 0xd2, 0xde, 0x8c, 0xf8, 0xb9,
        0xcc, 0xe2, 0x6d, 0xdd, 0x23, 0xc4, 0xd5, 0x97,
        0x77, 0x24, 0xe1, 0xff, 0xd6, 0x3f, 0xb5, 0x98,
        0x1e, 0x8c, 0xbe, 0x50, 0xf2, 0x00, 0xf3, 0x08
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xca, 0xb6, 0xba, 0x0c, 0x00, 0x2a, 0x8e, 0x7a,
        0x98, 0x33, 0xce, 0xb9, 0x0e, 0xd0, 0x1f, 0x51,
        0xb2, 0x13, 0x63, 0xe1, 0x51, 0x52, 0x4a, 0xbe,
        0x65, 0x7b, 0x17, 0xe6, 0x53, 0x88, 0xa1, 0xc0
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs67_ProduceCorrectResult) {

    const u8 s[] = {
        0x4f, 0x63, 0x76, 0xcc, 0xb3, 0x47, 0x45, 0xcb,
        0x39, 0x2f, 0x63, 0x63, 0xd4, 0x3b, 0x7a, 0x6e,
        0x8b, 0x1a, 0xf3, 0x2c, 0x8f, 0x84, 0xbb, 0xc9,
        0xca, 0x73, 0x93, 0x49, 0x10, 0xa1, 0x7e, 0x07
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x00, 0xed, 0xc8, 0xa4, 0x1a, 0x22, 0xa5, 0x59,
        0x09, 0xfb, 0x0f, 0x6d, 0x1c, 0x49, 0x14, 0xe1,
        0xbb, 0x8b, 0x45, 0xce, 0xa6, 0xf5, 0x52, 0x80,
        0x84, 0x63, 0xeb, 0x52, 0xa2, 0xcd, 0x79, 0x60
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs68_ProduceCorrectResult) {

    const u8 s[] = {
        0x20, 0xec, 0x3c, 0x3f, 0x69, 0xae, 0x6c, 0x3e,
        0x61, 0x0c, 0x60, 0x48, 0x48, 0x1e, 0x11, 0xc1,
        0x1f, 0x91, 0x29, 0xf4, 0x3b, 0x47, 0xe7, 0x88,
        0xb8, 0x51, 0xce, 0x26, 0xae, 0x5f, 0x82, 0x03
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xc2, 0xd9, 0x67, 0x56, 0xa8, 0x73, 0x3e, 0x2c,
        0x43, 0x40, 0x8e, 0x66, 0x5f, 0xfc, 0x5c, 0x86,
        0x91, 0xd1, 0x9a, 0x02, 0x02, 0x80, 0xce, 0xee,
        0x1b, 0x16, 0x7f, 0x1c, 0x6c, 0xaf, 0x08, 0x39
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs69_ProduceCorrectResult) {

    const u8 s[] = {
        0x41, 0x4b, 0xc6, 0x06, 0xc2, 0x42, 0x11, 0xe5,
        0x33, 0x9f, 0x7b, 0xe4, 0x91, 0x14, 0x6d, 0xdc,
        0x80, 0xb1, 0x57, 0xcc, 0xdb, 0xe1, 0x4b, 0x1a,
        0x23, 0x65, 0xaf, 0x1e, 0x93, 0xce, 0x4e, 0x05
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x62, 0xbf, 0xbe, 0x68, 0xea, 0xf9, 0x83, 0x31,
        0x5e, 0xe3, 0x2e, 0xeb, 0x0c, 0x44, 0x38, 0xef,
        0x06, 0xb0, 0x2c, 0x6a, 0x9d, 0x81, 0xa8, 0xdf,
        0x10, 0xb2, 0xfe, 0x25, 0x98, 0x12, 0x22, 0x9d
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs70_ProduceCorrectResult) {

    const u8 s[] = {
        0x0d, 0x1b, 0xab, 0x31, 0x89, 0x06, 0x4d, 0xd9,
        0xb0, 0xa1, 0x85, 0xe2, 0x84, 0x06, 0x82, 0x5b,
        0x25, 0x39, 0x07, 0x4f, 0x9c, 0x79, 0x1e, 0xa8,
        0x5b, 0xa4, 0x0c, 0xe8, 0x76, 0x95, 0xc0, 0x0c
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x6b, 0xd6, 0x05, 0xb0, 0x6d, 0x08, 0x4a, 0x1c,
        0xf7, 0x72, 0x62, 0xbf, 0x81, 0x07, 0xd9, 0xc1,
        0xa1, 0x73, 0x30, 0xef, 0xdf, 0x5b, 0x5f, 0x71,
        0x11, 0xfd, 0xe5, 0x15, 0xea, 0x25, 0x17, 0xe9
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs71_ProduceCorrectResult) {

    const u8 s[] = {
        0x53, 0x34, 0x54, 0xb6, 0x6c, 0xa0, 0xac, 0x80,
        0xa5, 0xb8, 0x02, 0xb7, 0x5c, 0xb1, 0x63, 0xa5,
        0xba, 0x82, 0x43, 0x72, 0x38, 0x42, 0x3c, 0x57,
        0x58, 0x53, 0x24, 0x97, 0xf0, 0x37, 0xc8, 0x0b
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xbd, 0x03, 0xa0, 0xe5, 0x29, 0xd9, 0xd9, 0x36,
        0x6b, 0x29, 0x45, 0xa8, 0x7e, 0x31, 0xb8, 0x76,
        0xb3, 0x5f, 0x73, 0xe0, 0x45, 0x8b, 0xc6, 0x02,
        0xcd, 0x52, 0x7c, 0xfc, 0x8f, 0xa4, 0x1f, 0xad
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs72_ProduceCorrectResult) {

    const u8 s[] = {
        0x6c, 0xf0, 0xac, 0x29, 0xff, 0x66, 0x5e, 0x1d,
        0xcf, 0xdf, 0x7a, 0x29, 0x75, 0xe1, 0x91, 0x3a,
        0x0b, 0x8c, 0xc8, 0x45, 0x8a, 0x80, 0xc0, 0xb8,
        0xde, 0x37, 0xa9, 0xae, 0xc3, 0x44, 0xa2, 0x09
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xd8, 0x3e, 0xd5, 0x98, 0x94, 0xa1, 0xc7, 0xf7,
        0xb1, 0xdc, 0xba, 0xa5, 0x98, 0x43, 0x28, 0xbb,
        0xa7, 0x02, 0x4e, 0x5f, 0xa6, 0x98, 0x95, 0x1b,
        0x10, 0x3d, 0xa9, 0x46, 0x26, 0xd0, 0xaa, 0x42
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs73_ProduceCorrectResult) {

    const u8 s[] = {
        0x97, 0x9a, 0xf6, 0xf4, 0x8a, 0x0c, 0xa3, 0x47,
        0x01, 0x9a, 0xf0, 0xdf, 0x1b, 0x7b, 0xe4, 0x12,
        0x72, 0x6b, 0xca, 0x33, 0xfc, 0xe6, 0x6a, 0x63,
        0x1f, 0x7f, 0xe8, 0xec, 0x3b, 0x31, 0x92, 0x0d
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x90, 0x35, 0xa9, 0xe1, 0x90, 0xb2, 0xaa, 0xff,
        0x24, 0x8f, 0x4a, 0x18, 0x51, 0x2d, 0xa6, 0x3a,
        0x5e, 0x84, 0x1b, 0x4d, 0xa9, 0x61, 0x56, 0x5c,
        0x71, 0xba, 0xc3, 0xf5, 0xeb, 0x1c, 0x34, 0xc5
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs74_ProduceCorrectResult) {

    const u8 s[] = {
        0xb8, 0x7f, 0xea, 0xdd, 0xe1, 0x3d, 0x07, 0xde,
        0xda, 0x58, 0x3d, 0x86, 0xbe, 0x10, 0xa6, 0x2b,
        0x05, 0x7c, 0xf7, 0x84, 0x7b, 0xf3, 0xe5, 0x8f,
        0xb1, 0x08, 0x8d, 0x54, 0xd2, 0x51, 0x0e, 0x0d
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x9b, 0x3f, 0x45, 0xb4, 0x59, 0xe0, 0x3a, 0xd6,
        0x04, 0x2a, 0x14, 0x90, 0x29, 0x12, 0x9c, 0xa0,
        0x64, 0x4d, 0x0f, 0x37, 0x6e, 0x77, 0x37, 0x73,
        0x5f, 0x2b, 0xef, 0x42, 0x3c, 0x08, 0x44, 0x5b
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs75_ProduceCorrectResult) {

    const u8 s[] = {
        0x01, 0x59, 0xea, 0x2b, 0xe2, 0x71, 0x41, 0xf5,
        0x96, 0x22, 0xed, 0x60, 0x48, 0x2c, 0xec, 0xde,
        0x6b, 0x33, 0x07, 0x7b, 0xef, 0x28, 0x49, 0xc4,
        0xc4, 0x44, 0x99, 0x2b, 0xfe, 0x71, 0xe6, 0x06
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xee, 0x8c, 0x72, 0xf3, 0xdb, 0x02, 0xee, 0x8b,
        0x21, 0xf4, 0xee, 0x88, 0x02, 0x26, 0x03, 0xaf,
        0x97, 0x5a, 0x5e, 0xd0, 0x0d, 0x9b, 0x3b, 0xd1,
        0x51, 0xa1, 0xdd, 0x7d, 0xca, 0xce, 0xee, 0xad
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs76_ProduceCorrectResult) {

    const u8 s[] = {
        0x69, 0xb2, 0xec, 0xc8, 0x46, 0x64, 0xa5, 0x55,
        0x38, 0xaa, 0x60, 0x0c, 0xeb, 0x69, 0xa0, 0x75,
        0x28, 0x81, 0xf3, 0x54, 0x87, 0xe3, 0x1d, 0x25,
        0xaa, 0x60, 0x90, 0x15, 0xb2, 0x53, 0x8c, 0x0c
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x66, 0xf0, 0x3c, 0xff, 0x58, 0x4a, 0x71, 0xb7,
        0x65, 0xa5, 0x52, 0xd1, 0x37, 0xa7, 0xea, 0xe0,
        0xe8, 0x3f, 0x4a, 0x47, 0x34, 0x2b, 0xd9, 0x45,
        0xfd, 0x6a, 0x18, 0x65, 0xae, 0xd8, 0x7c, 0xb0
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs77_ProduceCorrectResult) {

    const u8 s[] = {
        0x09, 0x58, 0x0e, 0xa6, 0xb8, 0x29, 0x68, 0x66,
        0x7b, 0xf9, 0x97, 0xeb, 0x20, 0xbb, 0x8b, 0xdf,
        0x17, 0xd3, 0xab, 0xf2, 0xe3, 0x70, 0x88, 0x2b,
        0x2c, 0xf2, 0xb0, 0x68, 0x18, 0x8f, 0x77, 0x07
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x66, 0xc0, 0x41, 0x90, 0x28, 0x34, 0xa3, 0x5d,
        0xd4, 0x2e, 0xcd, 0xaf, 0x77, 0xa9, 0x14, 0x92,
        0x4e, 0xf6, 0x13, 0xbe, 0xc2, 0xdd, 0xe6, 0xf1,
        0x67, 0x01, 0x3a, 0xb9, 0x56, 0xf9, 0x74, 0xc6
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs78_ProduceCorrectResult) {

    const u8 s[] = {
        0x75, 0x48, 0xc1, 0xa1, 0xec, 0xa2, 0x2d, 0x8b,
        0x72, 0xdf, 0xad, 0xa6, 0xf1, 0xfa, 0x3d, 0x67,
        0x07, 0x52, 0x82, 0xde, 0x21, 0x6f, 0xbb, 0xfe,
        0xc1, 0x82, 0xff, 0xca, 0xcc, 0xaf, 0x93, 0x04
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x07, 0xd2, 0x36, 0x1c, 0x42, 0x98, 0x71, 0x50,
        0x7d, 0x5d, 0x1d, 0xed, 0x08, 0xca, 0x33, 0xda,
        0xb5, 0xfe, 0x17, 0x8c, 0x52, 0xa3, 0xfe, 0x94,
        0xdb, 0x12, 0x1f, 0xb7, 0xba, 0x17, 0x9a, 0x3b
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs79_ProduceCorrectResult) {

    const u8 s[] = {
        0x14, 0xe6, 0x74, 0x7f, 0x48, 0x6c, 0x18, 0x20,
        0x26, 0x2b, 0x32, 0xf8, 0xc8, 0x03, 0xff, 0xff,
        0x1a, 0xf9, 0x61, 0xd5, 0x6d, 0xf9, 0xe4, 0xd7,
        0xd4, 0xb2, 0xcb, 0xa7, 0x57, 0x9c, 0xe1, 0x09
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x04, 0x78, 0xef, 0x6a, 0x46, 0xd1, 0x56, 0x4d,
        0xa7, 0x02, 0x3d, 0x8d, 0x14, 0x6e, 0xbc, 0xb5,
        0x1d, 0x57, 0x47, 0x9d, 0xfa, 0x02, 0x80, 0x0f,
        0xc4, 0xd9, 0x72, 0x08, 0x22, 0x1e, 0x01, 0x13
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs80_ProduceCorrectResult) {

    const u8 s[] = {
        0x8f, 0x1b, 0x12, 0xb2, 0xed, 0x7a, 0x63, 0x53,
        0x27, 0xf7, 0x16, 0xf2, 0x96, 0x76, 0x0d, 0x70,
        0x01, 0xe0, 0x45, 0x23, 0x49, 0x7a, 0x5e, 0x10,
        0xa3, 0x4b, 0x3c, 0xfa, 0x98, 0x37, 0x8c, 0x0d
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x69, 0x27, 0x32, 0xe3, 0x9b, 0xc4, 0x06, 0x6b,
        0x71, 0x35, 0x5f, 0x06, 0xea, 0xd9, 0x89, 0xdf,
        0x8e, 0x13, 0xa6, 0xba, 0xc8, 0x3f, 0x35, 0xb0,
        0xce, 0x3d, 0xa8, 0x2a, 0x1c, 0xfb, 0xc0, 0x31
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs81_ProduceCorrectResult) {

    const u8 s[] = {
        0x7f, 0xdb, 0xf3, 0x47, 0x27, 0xd9, 0xb5, 0x51,
        0xf8, 0x0f, 0x59, 0x02, 0xe9, 0xc5, 0x2e, 0xc2,
        0x1a, 0x9b, 0x72, 0x15, 0x99, 0x41, 0x92, 0xdc,
        0xab, 0x9a, 0x02, 0xd0, 0xc8, 0xb1, 0x3e, 0x08
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x48, 0x63, 0xac, 0xa6, 0x67, 0xf9, 0x7c, 0xc3,
        0xa3, 0x3a, 0x62, 0xb9, 0xbf, 0x5a, 0xb1, 0xf6,
        0xbd, 0xc1, 0xdd, 0x2e, 0xec, 0x6a, 0x90, 0x88,
        0xbc, 0x15, 0xbd, 0x5b, 0x82, 0xff, 0xca, 0x28
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs82_ProduceCorrectResult) {

    const u8 s[] = {
        0xca, 0x8c, 0x34, 0xdd, 0x2d, 0x91, 0xd0, 0xb4,
        0x4d, 0x76, 0xed, 0x21, 0xa1, 0x2b, 0xa6, 0x88,
        0x47, 0x26, 0x40, 0xe5, 0x27, 0x60, 0x6c, 0x0a,
        0xf7, 0xaf, 0xb7, 0x09, 0x25, 0xf6, 0x40, 0x0c
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x3d, 0x63, 0xa8, 0xd0, 0x47, 0xf1, 0xdb, 0x8d,
        0x80, 0x71, 0xb3, 0x84, 0x68, 0x25, 0xf6, 0xc1,
        0x13, 0x90, 0x9a, 0xb0, 0x87, 0x2e, 0x71, 0xfe,
        0xa7, 0x9e, 0xa8, 0x5a, 0x3e, 0x30, 0x8d, 0xbd
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs83_ProduceCorrectResult) {

    const u8 s[] = {
        0xe8, 0xb0, 0x74, 0x3b, 0x5f, 0x75, 0x53, 0x62,
        0x1b, 0xa2, 0x53, 0xa2, 0x68, 0x8e, 0x31, 0x95,
        0x22, 0x03, 0x75, 0xb6, 0xfd, 0xf5, 0xef, 0x96,
        0x3f, 0x4c, 0xb6, 0x39, 0x75, 0xfd, 0x43, 0x00
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x17, 0x42, 0x52, 0x44, 0x43, 0xa7, 0xad, 0xa1,
        0x0d, 0x82, 0x16, 0x84, 0xbb, 0x20, 0x14, 0x30,
        0xce, 0x89, 0xc9, 0x19, 0x7b, 0x16, 0x53, 0x33,
        0x31, 0x1c, 0x6f, 0xa7, 0x9e, 0x3f, 0x7b, 0x77
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs84_ProduceCorrectResult) {

    const u8 s[] = {
        0xf3, 0x2c, 0xe8, 0x60, 0x71, 0xaa, 0xaf, 0x71,
        0x52, 0xf6, 0x09, 0x6d, 0x54, 0xbd, 0x58, 0x47,
        0x19, 0x59, 0xbf, 0xe7, 0x67, 0xd4, 0x32, 0x70,
        0x6f, 0xcc, 0xc1, 0x71, 0x62, 0xae, 0xff, 0x04
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xac, 0xd4, 0x6e, 0xc2, 0x5f, 0xe7, 0xb8, 0x11,
        0xdf, 0x17, 0x36, 0xd5, 0xa0, 0x6f, 0x7c, 0xb2,
        0xf3, 0xae, 0x26, 0x50, 0xd3, 0x36, 0xe7, 0xb9,
        0xbc, 0x86, 0x80, 0x48, 0xf6, 0xee, 0xa2, 0xdb
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs85_ProduceCorrectResult) {

    const u8 s[] = {
        0xa5, 0x2b, 0x71, 0xf4, 0xba, 0x3a, 0xa3, 0x4a,
        0xa3, 0xac, 0x3d, 0x40, 0xcd, 0x76, 0x01, 0xd2,
        0x65, 0x67, 0x45, 0x82, 0x94, 0xbb, 0xae, 0x0e,
        0x99, 0xa5, 0xd2, 0xd6, 0x98, 0x26, 0x54, 0x02
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x70, 0x58, 0xe4, 0x1a, 0x7a, 0xf0, 0x6c, 0xd6,
        0xc2, 0xc8, 0x7f, 0x06, 0x05, 0xa8, 0x03, 0x4f,
        0x65, 0x85, 0xa1, 0x6c, 0x1c, 0xb8, 0x71, 0x59,
        0x69, 0xc3, 0x86, 0x89, 0x8d, 0x35, 0x4f, 0x53
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs86_ProduceCorrectResult) {

    const u8 s[] = {
        0x59, 0x00, 0x7a, 0xbe, 0xa3, 0xb8, 0xd2, 0xb1,
        0x39, 0xd2, 0x86, 0xe8, 0xa3, 0x5d, 0x42, 0x4b,
        0x9a, 0x99, 0x18, 0xff, 0x01, 0x1e, 0x7b, 0x67,
        0x77, 0x2f, 0xe5, 0x35, 0xf8, 0x63, 0x7c, 0x03
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x7d, 0xc0, 0x78, 0x75, 0xed, 0x31, 0xbf, 0xaf,
        0x37, 0xc1, 0x45, 0x55, 0x92, 0xb0, 0xf6, 0x1f,
        0xa6, 0xb6, 0x67, 0x37, 0xc0, 0xd1, 0xb0, 0x57,
        0x7e, 0x27, 0x5c, 0xed, 0x93, 0x18, 0xd8, 0xae
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs87_ProduceCorrectResult) {

    const u8 s[] = {
        0xcf, 0xbe, 0x0b, 0xff, 0x84, 0x71, 0xd9, 0xe7,
        0x6b, 0x9e, 0xdb, 0xa3, 0x20, 0x77, 0x4e, 0x3d,
        0x4c, 0xc3, 0xf6, 0x3f, 0x52, 0x6d, 0xf2, 0x27,
        0x72, 0xba, 0xbd, 0x5e, 0x04, 0x2b, 0x18, 0x00
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x45, 0xc9, 0x58, 0xba, 0xc0, 0x34, 0xc1, 0xc8,
        0x3a, 0xec, 0x97, 0x9b, 0x39, 0x31, 0xd0, 0xb5,
        0xe9, 0xc2, 0xd5, 0x8e, 0x72, 0x11, 0xda, 0x89,
        0x3d, 0x64, 0x1d, 0x40, 0x7f, 0xf6, 0x62, 0x95
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs88_ProduceCorrectResult) {

    const u8 s[] = {
        0xf3, 0x4d, 0x51, 0xbd, 0x5a, 0x30, 0x39, 0xa0,
        0x02, 0x89, 0x39, 0x81, 0x81, 0x74, 0xef, 0xf8,
        0x4b, 0x71, 0x85, 0xf0, 0x7f, 0x20, 0x46, 0xed,
        0x60, 0x17, 0xaa, 0xcb, 0x9b, 0xc3, 0xe6, 0x0f
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x71, 0x22, 0x54, 0x3a, 0x8f, 0x18, 0x1a, 0x44,
        0x69, 0x8a, 0xa8, 0x9d, 0xf2, 0xfe, 0xd4, 0xa0,
        0x1a, 0xc1, 0xf1, 0x15, 0xe7, 0x78, 0x3d, 0x8f,
        0x0a, 0xbc, 0x6e, 0xfd, 0xca, 0x28, 0xe1, 0x41
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs89_ProduceCorrectResult) {

    const u8 s[] = {
        0xa1, 0x55, 0x1a, 0xd7, 0xdf, 0xf8, 0x5c, 0x3f,
        0x08, 0x15, 0x79, 0x12, 0x79, 0xd3, 0x9d, 0x59,
        0x74, 0xc1, 0xa2, 0x22, 0x9b, 0x60, 0xf3, 0xc9,
        0xee, 0x5e, 0xfd, 0xa2, 0xb9, 0xb9, 0x45, 0x01
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x3f, 0x66, 0x45, 0x32, 0xf5, 0x91, 0xbd, 0xf7,
        0xdb, 0xba, 0xea, 0x7b, 0x74, 0xbf, 0x38, 0x77,
        0x5c, 0xe9, 0x69, 0x57, 0x0c, 0xe1, 0x56, 0x81,
        0xef, 0x77, 0xb6, 0xb9, 0x9b, 0x12, 0x03, 0x6b
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs90_ProduceCorrectResult) {

    const u8 s[] = {
        0x69, 0x3b, 0xfe, 0x8c, 0xc1, 0xce, 0x43, 0x1d,
        0x10, 0x30, 0x12, 0x16, 0x30, 0x3c, 0x6c, 0x5c,
        0xdb, 0x9d, 0x8d, 0xa4, 0x87, 0x85, 0xb0, 0xc4,
        0x2d, 0xa6, 0xf0, 0xfe, 0xc3, 0x96, 0x37, 0x09
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xcc, 0xa8, 0xab, 0x2b, 0x3f, 0xd9, 0x72, 0x79,
        0xcc, 0xa9, 0x67, 0x66, 0x6e, 0x29, 0x4e, 0x5c,
        0x5b, 0x1c, 0xfd, 0x0f, 0x1f, 0x30, 0xe2, 0xf3,
        0x43, 0x9a, 0xae, 0x38, 0x69, 0xf3, 0xa0, 0x8d
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs91_ProduceCorrectResult) {

    const u8 s[] = {
        0x2c, 0xff, 0x99, 0xff, 0xe6, 0x97, 0x89, 0xf9,
        0x3e, 0x96, 0x9f, 0x52, 0xf2, 0x2f, 0x0e, 0xab,
        0xb1, 0x40, 0x77, 0x28, 0xac, 0xce, 0xd2, 0x85,
        0x37, 0xe3, 0x20, 0x92, 0x8b, 0xaf, 0xf6, 0x08
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xf0, 0xc6, 0x21, 0x49, 0x7e, 0x09, 0xbc, 0x34,
        0x9b, 0x6c, 0x54, 0xf2, 0x22, 0x45, 0x0c, 0xb3,
        0x29, 0x3e, 0xd7, 0xc7, 0x94, 0xff, 0x98, 0xe2,
        0x16, 0x45, 0xde, 0x82, 0xb4, 0xb5, 0xd5, 0xec
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs92_ProduceCorrectResult) {

    const u8 s[] = {
        0x7b, 0x61, 0x8b, 0x21, 0x20, 0xa7, 0x14, 0xad,
        0x7a, 0x1d, 0xf5, 0x59, 0x4f, 0x3e, 0xe1, 0x8a,
        0xcb, 0xcf, 0x10, 0x8a, 0x6b, 0x95, 0x1a, 0x5c,
        0x14, 0x0c, 0x63, 0x9e, 0xab, 0x96, 0x31, 0x03
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x08, 0x3c, 0x14, 0xa6, 0x55, 0x49, 0x6e, 0x64,
        0xa6, 0x3c, 0x57, 0x58, 0x9f, 0x1d, 0x15, 0x41,
        0x13, 0xbd, 0x73, 0x25, 0x18, 0xfa, 0x59, 0x90,
        0xc1, 0x54, 0xb7, 0x4f, 0x20, 0x57, 0x72, 0x0c
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs93_ProduceCorrectResult) {

    const u8 s[] = {
        0x8f, 0x02, 0xdf, 0x44, 0x82, 0xe8, 0x1c, 0x58,
        0x49, 0xe8, 0x00, 0xfb, 0x91, 0xf4, 0xce, 0x7a,
        0x31, 0xea, 0xd2, 0xdd, 0x40, 0x7a, 0x3c, 0x39,
        0x7c, 0xe2, 0xe0, 0x78, 0x51, 0xe8, 0x0b, 0x00
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x51, 0x9b, 0xdf, 0xe6, 0x6c, 0x52, 0xa0, 0x87,
        0x82, 0xc5, 0xe2, 0x38, 0x9a, 0x12, 0xb6, 0xca,
        0xe2, 0xd9, 0x98, 0x3e, 0x2f, 0x4a, 0x8c, 0xf3,
        0x02, 0x23, 0x8f, 0xad, 0xde, 0xe6, 0xa1, 0x1a
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs94_ProduceCorrectResult) {

    const u8 s[] = {
        0x63, 0xc4, 0x3c, 0x46, 0xe4, 0xfe, 0xd0, 0xac,
        0xa3, 0x4d, 0x49, 0xa2, 0x63, 0x74, 0x2b, 0x38,
        0x4d, 0xe4, 0x12, 0x6e, 0xab, 0x73, 0x48, 0x97,
        0xea, 0xe5, 0x43, 0x30, 0xbb, 0x64, 0xac, 0x02
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x10, 0x42, 0xdc, 0xe4, 0xde, 0x17, 0xfc, 0xc1,
        0x05, 0x54, 0xfa, 0xbf, 0xd8, 0xde, 0xf3, 0xa5,
        0xbc, 0x8c, 0x2d, 0x16, 0xc7, 0xcf, 0xfc, 0x30,
        0x22, 0x4c, 0x33, 0x61, 0x6e, 0xc3, 0x3c, 0xb7
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs95_ProduceCorrectResult) {

    const u8 s[] = {
        0xce, 0x63, 0xc4, 0x10, 0x5d, 0x5e, 0xb5, 0x8e,
        0x24, 0x11, 0x31, 0x1f, 0x17, 0xb3, 0xa3, 0xaf,
        0x9f, 0x68, 0x7f, 0xaa, 0x25, 0x2a, 0xf6, 0xad,
        0x27, 0xb6, 0x13, 0x7a, 0xf3, 0x7e, 0x97, 0x09
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x94, 0xc1, 0x14, 0x84, 0xbe, 0x8b, 0x20, 0x7c,
        0xf8, 0xed, 0x8e, 0x66, 0x94, 0x55, 0xae, 0x6f,
        0x85, 0x20, 0x36, 0x71, 0x6d, 0xcb, 0x7a, 0x5b,
        0x63, 0xcd, 0x2e, 0x78, 0xa7, 0xf9, 0xdd, 0x46
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs96_ProduceCorrectResult) {

    const u8 s[] = {
        0x37, 0x95, 0xd4, 0xa4, 0x87, 0xef, 0xb0, 0x62,
        0x61, 0x36, 0x6b, 0x22, 0x50, 0x6d, 0xb6, 0xad,
        0xca, 0x3a, 0x5f, 0x3e, 0xf1, 0x3b, 0x24, 0x63,
        0x0d, 0xd7, 0xab, 0x01, 0xe9, 0x95, 0xcd, 0x07
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x5a, 0x06, 0xf2, 0x85, 0xee, 0xf8, 0x69, 0xfa,
        0xfc, 0x1a, 0xdb, 0x0c, 0x71, 0xab, 0x16, 0x4a,
        0x5d, 0xc1, 0xff, 0xac, 0x02, 0xb7, 0x6c, 0x42,
        0xd4, 0xed, 0x8e, 0xca, 0x76, 0xcc, 0x94, 0xeb
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs97_ProduceCorrectResult) {

    const u8 s[] = {
        0x71, 0x76, 0xae, 0x6e, 0x9d, 0x94, 0x37, 0x6b,
        0xb1, 0x7e, 0xcd, 0x63, 0x37, 0x24, 0x3f, 0x06,
        0x70, 0xc3, 0x8e, 0x0f, 0x38, 0xc4, 0xa7, 0xcb,
        0xf0, 0xf5, 0xc2, 0x69, 0x60, 0xb5, 0x99, 0x00
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x3c, 0x06, 0x77, 0x9e, 0x4e, 0x15, 0xca, 0xea,
        0xa0, 0xc2, 0xf9, 0xb6, 0xbd, 0x79, 0xf0, 0x9e,
        0x5f, 0xee, 0x6b, 0xe7, 0x8c, 0x59, 0xb0, 0x6b,
        0x7b, 0xf0, 0x45, 0xb8, 0x6f, 0xfa, 0x4d, 0xf0
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs98_ProduceCorrectResult) {

    const u8 s[] = {
        0xf8, 0xad, 0x02, 0xd1, 0x2a, 0x53, 0xce, 0xd9,
        0x71, 0x63, 0xe8, 0x66, 0xbe, 0xcc, 0xf1, 0x33,
        0x9c, 0x11, 0x43, 0x88, 0x20, 0xb0, 0xfc, 0x22,
        0xc9, 0xe1, 0x84, 0x55, 0x9a, 0xe1, 0xf8, 0x0b
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x42, 0x09, 0x15, 0x4a, 0x52, 0x28, 0x21, 0x7b,
        0x2e, 0x96, 0x50, 0x64, 0xf3, 0x17, 0xd1, 0xe1,
        0x24, 0x29, 0x53, 0x0f, 0x54, 0xa2, 0xd6, 0x2a,
        0x4d, 0x3c, 0x63, 0x3e, 0xbd, 0x37, 0x46, 0x2b
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs99_ProduceCorrectResult) {

    const u8 s[] = {
        0x11, 0x08, 0x0c, 0x51, 0xa0, 0x80, 0x36, 0xd6,
        0x6d, 0x23, 0x4f, 0xaa, 0xfb, 0x16, 0x62, 0x18,
        0x9f, 0x09, 0xf1, 0x4f, 0xc7, 0xd3, 0xb0, 0x14,
        0x3a, 0x38, 0xab, 0x23, 0x79, 0x7a, 0x12, 0x07
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xf9, 0x18, 0xb5, 0x46, 0x66, 0xbe, 0x96, 0x01,
        0xdf, 0x68, 0x02, 0xc5, 0x0e, 0xe8, 0xf6, 0x5e,
        0x9c, 0xa7, 0x24, 0x24, 0x20, 0xcb, 0x9a, 0xfd,
        0x2c, 0xfe, 0x76, 0xfd, 0xd4, 0x3c, 0xd7, 0xc6
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs100_ProduceCorrectResult) {

    const u8 s[] = {
        0xcf, 0x7b, 0x12, 0x1e, 0x61, 0x27, 0xbc, 0xdb,
        0x2b, 0xa6, 0xe8, 0xe4, 0xa9, 0xd0, 0x96, 0xc3,
        0x11, 0x7c, 0x33, 0x0a, 0xf8, 0x76, 0xcf, 0x5f,
        0x6d, 0xd3, 0x40, 0x63, 0xf0, 0xa6, 0xda, 0x0d
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x66, 0x8c, 0xc3, 0x16, 0x94, 0x4e, 0xfd, 0x44,
        0xb8, 0x34, 0xaf, 0xdf, 0x38, 0xb4, 0xe4, 0x53,
        0x8b, 0xf1, 0x75, 0xfa, 0x86, 0x6d, 0xc7, 0x7b,
        0x38, 0x6f, 0xf6, 0xb5, 0xcd, 0xb6, 0xd7, 0x9e
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs101_ProduceCorrectResult) {

    const u8 s[] = {
        0x66, 0x07, 0xd7, 0x93, 0x7d, 0x88, 0xd9, 0x84,
        0xa7, 0x07, 0x4e, 0x40, 0xab, 0x5c, 0x15, 0x65,
        0x7b, 0xe9, 0xee, 0x71, 0x64, 0xc4, 0x10, 0x8d,
        0x7a, 0x17, 0xfb, 0xe8, 0x36, 0x6b, 0x32, 0x07
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x00, 0xc7, 0xbd, 0x3a, 0xda, 0xa6, 0xe4, 0xf4,
        0x93, 0xb2, 0xce, 0x4b, 0x87, 0x4a, 0x34, 0x3f,
        0x3d, 0x88, 0xb5, 0xb5, 0x40, 0xfc, 0xe6, 0xe8,
        0x24, 0x43, 0x80, 0xf7, 0xaa, 0xbf, 0x18, 0x63
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs102_ProduceCorrectResult) {

    const u8 s[] = {
        0xd0, 0x27, 0x1e, 0xfb, 0x68, 0x76, 0x9a, 0xf8,
        0x65, 0x74, 0xa1, 0x2f, 0x24, 0xf3, 0x94, 0x78,
        0xb1, 0xd9, 0x11, 0x8c, 0x75, 0x11, 0x00, 0x30,
        0x96, 0x1e, 0x6c, 0x69, 0xc3, 0x75, 0x9d, 0x06
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xd4, 0x89, 0xf8, 0x56, 0xef, 0x54, 0xfc, 0xb0,
        0x91, 0x39, 0x75, 0x7b, 0x04, 0x97, 0xe7, 0xa2,
        0xec, 0x9f, 0x12, 0x9a, 0xa9, 0x3c, 0xe7, 0x42,
        0xb5, 0xd0, 0x95, 0x1c, 0x77, 0xf1, 0xf4, 0x5a
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs103_ProduceCorrectResult) {

    const u8 s[] = {
        0x09, 0x55, 0x7e, 0xb3, 0xe4, 0xff, 0xda, 0x48,
        0xdb, 0xb6, 0xa5, 0x3f, 0x2b, 0xfc, 0x40, 0x3f,
        0x39, 0xe4, 0xb1, 0x10, 0xb6, 0x0a, 0x2d, 0x6e,
        0x40, 0xd8, 0xfd, 0xa8, 0xf7, 0x6a, 0xfb, 0x0b
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xd7, 0x76, 0x70, 0x00, 0x8d, 0x60, 0x11, 0xbb,
        0x87, 0x8a, 0x2c, 0x0c, 0x02, 0x6a, 0x0c, 0x8e,
        0x09, 0x5f, 0x5b, 0xc5, 0x05, 0x29, 0x01, 0x69,
        0xbf, 0xf4, 0x5d, 0x70, 0x75, 0x30, 0x6d, 0xeb
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs104_ProduceCorrectResult) {

    const u8 s[] = {
        0xf1, 0x4e, 0xf7, 0x00, 0x0d, 0x89, 0x0a, 0x43,
        0x6d, 0x51, 0xf6, 0x5d, 0xf7, 0xd0, 0x11, 0xa3,
        0x0f, 0x6e, 0x47, 0x82, 0x6b, 0x47, 0x58, 0x44,
        0xe9, 0x56, 0x45, 0x24, 0x93, 0x36, 0x1e, 0x03
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xbb, 0x1c, 0x9e, 0xcb, 0x64, 0x99, 0xa6, 0x2c,
        0x92, 0x43, 0x53, 0xd0, 0x14, 0x5f, 0x3b, 0x39,
        0x6a, 0x71, 0xed, 0xf7, 0x6b, 0x96, 0x9d, 0x13,
        0x17, 0x51, 0x0b, 0x41, 0xee, 0x00, 0xe5, 0xdc
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs105_ProduceCorrectResult) {

    const u8 s[] = {
        0x45, 0x51, 0x9a, 0x31, 0xaf, 0x49, 0x92, 0xdc,
        0x14, 0xc6, 0xdd, 0x13, 0x9d, 0xc9, 0x8d, 0x90,
        0xaa, 0xdd, 0x67, 0xe2, 0xe1, 0xeb, 0x11, 0x45,
        0xa7, 0x77, 0xe1, 0xd2, 0xfb, 0x2e, 0x7e, 0x04
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xe7, 0x9c, 0x0d, 0xa5, 0xe6, 0xe9, 0x80, 0xf7,
        0xb8, 0x17, 0x38, 0x1b, 0xa8, 0x5d, 0xb4, 0x72,
        0xf0, 0x96, 0x08, 0x3c, 0x15, 0x9b, 0x4e, 0x13,
        0x7c, 0xf8, 0x00, 0x7e, 0x03, 0x71, 0x62, 0xef
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs106_ProduceCorrectResult) {

    const u8 s[] = {
        0xb1, 0xee, 0xda, 0x7f, 0xa0, 0x6f, 0x9d, 0x25,
        0x96, 0x27, 0x74, 0x36, 0x10, 0x54, 0xaf, 0xc0,
        0x5f, 0x97, 0xf1, 0xe0, 0xfc, 0x17, 0x8b, 0x51,
        0x06, 0xab, 0x8a, 0xad, 0x24, 0xc5, 0x74, 0x03
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x66, 0xa5, 0x0a, 0x3a, 0x7f, 0xc5, 0x28, 0x03,
        0x80, 0xd7, 0x36, 0xf5, 0x36, 0x40, 0x04, 0x23,
        0x73, 0xe0, 0xa6, 0x50, 0xbc, 0x83, 0xf1, 0x65,
        0x6e, 0x49, 0x52, 0x7f, 0x7f, 0xd5, 0x5c, 0x25
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs107_ProduceCorrectResult) {

    const u8 s[] = {
        0x00, 0x36, 0xa1, 0xdf, 0x7d, 0x0d, 0xc3, 0xc0,
        0xfd, 0xc7, 0xdc, 0xda, 0x3d, 0xd8, 0x56, 0xd0,
        0x4f, 0xc2, 0x20, 0x72, 0x95, 0xb7, 0x51, 0xf3,
        0xea, 0xa4, 0xca, 0xff, 0x66, 0x9b, 0x16, 0x0b
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xc9, 0xc0, 0xf2, 0x0e, 0xc3, 0x48, 0xda, 0x24,
        0xe4, 0x8e, 0xc5, 0xf8, 0x6d, 0x60, 0xe0, 0x0e,
        0x02, 0x8c, 0x56, 0x07, 0x31, 0xc6, 0x6b, 0xe7,
        0x3a, 0x1c, 0x09, 0x23, 0x2d, 0xed, 0x2e, 0xce
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs108_ProduceCorrectResult) {

    const u8 s[] = {
        0xd0, 0x21, 0xa0, 0xed, 0x34, 0x8c, 0x99, 0x1a,
        0xc0, 0x66, 0xa9, 0x19, 0x77, 0x99, 0xbf, 0x1f,
        0xd2, 0x69, 0xb1, 0x9e, 0x28, 0x94, 0xf5, 0xf1,
        0x13, 0x1f, 0x84, 0x7e, 0xe6, 0x74, 0x34, 0x08
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x88, 0xd8, 0x30, 0x78, 0xf1, 0x19, 0xc9, 0x93,
        0x3a, 0x2c, 0xdc, 0x4b, 0xfb, 0x99, 0x94, 0x8c,
        0xaf, 0x09, 0x97, 0x2e, 0xa7, 0x8b, 0xba, 0x51,
        0x46, 0x3d, 0xad, 0x8b, 0x4d, 0xba, 0xa7, 0x40
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs109_ProduceCorrectResult) {

    const u8 s[] = {
        0x1d, 0xb7, 0x2e, 0xba, 0x8c, 0x7d, 0xb3, 0x92,
        0x39, 0x22, 0x68, 0xcb, 0xb9, 0xac, 0xa6, 0x57,
        0x0d, 0x33, 0x27, 0x07, 0x76, 0xee, 0xe8, 0x9d,
        0xd5, 0x41, 0x67, 0x26, 0x30, 0xea, 0x84, 0x0a
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xe1, 0xe6, 0xfd, 0x44, 0x7e, 0x8d, 0xff, 0xa4,
        0xdd, 0x00, 0x0a, 0xc1, 0xe0, 0xe4, 0x20, 0xa6,
        0x29, 0x17, 0x2e, 0x5a, 0x4b, 0xc5, 0xca, 0xd9,
        0x11, 0x6b, 0xca, 0x4a, 0x2a, 0x00, 0xc1, 0x15
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs110_ProduceCorrectResult) {

    const u8 s[] = {
        0x1b, 0x44, 0x4d, 0x07, 0xfd, 0x77, 0x99, 0x77,
        0x47, 0x91, 0xe9, 0xdd, 0x30, 0xdf, 0x54, 0x7a,
        0x69, 0xd8, 0xcb, 0xd7, 0x0e, 0x4e, 0xc1, 0x11,
        0x49, 0x7e, 0x78, 0x6a, 0x80, 0x00, 0xa3, 0x09
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x48, 0x5b, 0x8e, 0x67, 0xeb, 0xb4, 0x2d, 0xc3,
        0xfc, 0xe1, 0xc6, 0xdf, 0x1d, 0x74, 0x11, 0x61,
        0x46, 0x46, 0x68, 0x2b, 0x75, 0x1f, 0x4c, 0xc4,
        0x7c, 0x1c, 0x3c, 0x77, 0x64, 0x87, 0x58, 0x45
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs111_ProduceCorrectResult) {

    const u8 s[] = {
        0x28, 0x67, 0x08, 0x8c, 0x36, 0xac, 0xbd, 0x00,
        0xe6, 0xd1, 0x7a, 0x1d, 0x6f, 0x3b, 0x0b, 0x72,
        0xba, 0x32, 0xc7, 0xee, 0x63, 0x5d, 0x17, 0x31,
        0x25, 0xa5, 0xd4, 0x02, 0xda, 0x83, 0x58, 0x06
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x4b, 0xa7, 0xe5, 0x27, 0x12, 0x0e, 0xa1, 0xfc,
        0x98, 0xac, 0xdf, 0x70, 0xea, 0x60, 0x0b, 0x72,
        0xde, 0x4c, 0xb9, 0xcc, 0xe8, 0x6a, 0xda, 0x09,
        0x7f, 0x7f, 0xb3, 0x2b, 0x99, 0xc8, 0xf9, 0x5a
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs112_ProduceCorrectResult) {

    const u8 s[] = {
        0xfe, 0x7d, 0x17, 0xbe, 0x22, 0x21, 0x65, 0xa0,
        0x41, 0x77, 0xd7, 0x41, 0x1d, 0x41, 0xc1, 0x7c,
        0xab, 0x14, 0x25, 0x1f, 0xd2, 0x4c, 0x46, 0x24,
        0x1d, 0xfb, 0x78, 0x79, 0x4c, 0x0f, 0xe3, 0x0d
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x4f, 0xfa, 0x73, 0x5e, 0xff, 0xed, 0x0c, 0x4a,
        0x6d, 0xdf, 0x1f, 0x1c, 0xd1, 0x9a, 0xaa, 0x92,
        0xcf, 0x6a, 0x71, 0x5a, 0x5c, 0xcc, 0x83, 0xa8,
        0x39, 0xd7, 0xe5, 0x64, 0x79, 0xe1, 0x02, 0x2b
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs113_ProduceCorrectResult) {

    const u8 s[] = {
        0x7a, 0x7d, 0xcf, 0x5e, 0x26, 0x31, 0x38, 0xeb,
        0xf5, 0x27, 0x18, 0x07, 0xb7, 0xf6, 0x41, 0x35,
        0x9c, 0x24, 0x97, 0xfc, 0x2d, 0x6d, 0x83, 0x8a,
        0x05, 0x68, 0x26, 0xdf, 0xfc, 0x44, 0x6a, 0x03
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xde, 0x00, 0xa7, 0x97, 0x25, 0xb0, 0xcd, 0x34,
        0x00, 0xda, 0xee, 0x10, 0xd4, 0x99, 0x5c, 0x5b,
        0x1a, 0xce, 0x45, 0x7b, 0x19, 0x8d, 0x4f, 0x83,
        0xd3, 0x3b, 0xcc, 0xd7, 0x02, 0xe3, 0x86, 0xf3
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs114_ProduceCorrectResult) {

    const u8 s[] = {
        0x79, 0xda, 0x1c, 0xe5, 0xae, 0x14, 0xe9, 0x95,
        0x1f, 0x4e, 0x33, 0x8d, 0x2d, 0x39, 0x47, 0x12,
        0x92, 0x5c, 0x8b, 0xac, 0x76, 0x77, 0x9a, 0x45,
        0x97, 0x57, 0x9a, 0x55, 0x66, 0x89, 0x0c, 0x0c
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xe4, 0x36, 0xff, 0x42, 0xa1, 0x9a, 0xba, 0xf2,
        0xf0, 0x0e, 0x6f, 0x67, 0xf8, 0x84, 0x8a, 0x9c,
        0xee, 0x82, 0x35, 0x6b, 0x14, 0x39, 0x81, 0x08,
        0x4b, 0xf3, 0x2a, 0x4e, 0xc2, 0xcd, 0xce, 0x56
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs115_ProduceCorrectResult) {

    const u8 s[] = {
        0x5d, 0xae, 0xe2, 0xd8, 0x1c, 0x25, 0xfd, 0x31,
        0x69, 0xbb, 0xf2, 0x4e, 0x52, 0x63, 0x4b, 0x56,
        0x19, 0x59, 0x5c, 0x30, 0xd1, 0xe1, 0x54, 0xfc,
        0x69, 0x0a, 0xd5, 0x85, 0xd9, 0x0f, 0x9f, 0x0a
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x1d, 0xe4, 0xdb, 0xcb, 0x0c, 0xad, 0x34, 0x61,
        0x72, 0xc2, 0x15, 0x85, 0x71, 0x24, 0xdc, 0xfc,
        0xca, 0x21, 0xa8, 0x2f, 0xbd, 0xed, 0x3e, 0x2b,
        0x48, 0xd1, 0xa1, 0xc1, 0x50, 0x19, 0x5d, 0x38
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs116_ProduceCorrectResult) {

    const u8 s[] = {
        0xc4, 0x39, 0x78, 0x2d, 0x21, 0x8d, 0x2c, 0xf5,
        0x47, 0x17, 0x64, 0xc6, 0x51, 0xa6, 0x2f, 0xf7,
        0x3a, 0x9e, 0x7c, 0x97, 0x4c, 0xcc, 0xd5, 0x0d,
        0x7b, 0x42, 0x63, 0xfb, 0x44, 0xac, 0x99, 0x0a
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xcc, 0x19, 0xa3, 0x5f, 0x4c, 0xcd, 0x27, 0x17,
        0x33, 0x41, 0x99, 0x67, 0x46, 0x17, 0x4d, 0x3c,
        0x09, 0x40, 0x5b, 0x92, 0xf6, 0x7c, 0x29, 0xf4,
        0x49, 0xd7, 0x65, 0x10, 0xbf, 0xea, 0xf4, 0xc1
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs117_ProduceCorrectResult) {

    const u8 s[] = {
        0xaf, 0xd0, 0x50, 0xd4, 0xf9, 0x5a, 0x68, 0x78,
        0x35, 0x76, 0x82, 0x40, 0x22, 0x31, 0x71, 0xff,
        0xdc, 0xb3, 0x12, 0xcf, 0xd7, 0xba, 0xfa, 0xc6,
        0x42, 0xcf, 0x9d, 0xdc, 0xea, 0x3e, 0x78, 0x07
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xbb, 0xb1, 0xe6, 0x41, 0x9e, 0x54, 0x90, 0x46,
        0x4a, 0x9d, 0x61, 0xeb, 0xae, 0xe6, 0x87, 0xe7,
        0x06, 0xaf, 0x7a, 0x1a, 0x17, 0xf7, 0x7a, 0x7c,
        0x93, 0xb5, 0x04, 0xfb, 0x8f, 0xed, 0x35, 0x83
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs118_ProduceCorrectResult) {

    const u8 s[] = {
        0x43, 0x23, 0x82, 0xff, 0x5d, 0xf1, 0xaf, 0xa0,
        0x2a, 0x5a, 0x62, 0x17, 0x94, 0x8f, 0x3a, 0x5e,
        0x29, 0x44, 0xb5, 0x40, 0x83, 0xac, 0xba, 0x6b,
        0x94, 0x3d, 0x2e, 0x28, 0x14, 0xfe, 0x58, 0x03
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xd9, 0x84, 0x71, 0x51, 0x7f, 0xe8, 0x30, 0x74,
        0x66, 0xa8, 0x55, 0x53, 0xc3, 0x07, 0xca, 0x46,
        0x33, 0xfa, 0x55, 0x2c, 0x4b, 0xfc, 0xb4, 0x29,
        0x50, 0xa1, 0xf4, 0xcf, 0x59, 0x49, 0x47, 0xf2
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs119_ProduceCorrectResult) {

    const u8 s[] = {
        0xb8, 0x60, 0x65, 0x89, 0x67, 0xb1, 0x1b, 0x7a,
        0x51, 0xcf, 0xed, 0xdb, 0xc9, 0x5b, 0x84, 0xe9,
        0xff, 0x99, 0x60, 0x85, 0x97, 0x18, 0xa9, 0x95,
        0x6a, 0x10, 0xe0, 0xde, 0x3f, 0x72, 0xb4, 0x0e
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x50, 0xeb, 0x20, 0x45, 0xef, 0x61, 0x79, 0x86,
        0x26, 0x0d, 0xfb, 0x9b, 0xfd, 0x35, 0x28, 0x53,
        0xbe, 0x40, 0xc1, 0x87, 0x7d, 0x22, 0xc9, 0x1e,
        0x13, 0x82, 0x03, 0x9c, 0x97, 0x6c, 0x78, 0x9e
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs120_ProduceCorrectResult) {

    const u8 s[] = {
        0xbd, 0xad, 0xa0, 0x96, 0x50, 0xf0, 0x98, 0x0c,
        0xcd, 0x42, 0x47, 0x1c, 0xe8, 0xab, 0x54, 0x5e,
        0xd6, 0x54, 0xd2, 0x06, 0x10, 0x57, 0x06, 0x54,
        0x6e, 0x2d, 0xa0, 0x05, 0xc0, 0x8c, 0xbf, 0x0a
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x73, 0x75, 0x1a, 0x1f, 0x1c, 0x71, 0xc6, 0xb2,
        0xd1, 0x97, 0xa1, 0x66, 0xfc, 0xae, 0x0e, 0x42,
        0x85, 0x1f, 0xc6, 0xa6, 0xd3, 0x89, 0x3d, 0x11,
        0x9f, 0x89, 0x74, 0x88, 0x9b, 0xa3, 0x24, 0x3b
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs121_ProduceCorrectResult) {

    const u8 s[] = {
        0x37, 0x18, 0x74, 0xd8, 0x4d, 0xf1, 0xa6, 0xba,
        0x46, 0x31, 0xe0, 0xb5, 0x15, 0xd8, 0x8d, 0x4f,
        0x93, 0x9f, 0x63, 0x61, 0x57, 0x75, 0xa9, 0xa7,
        0x44, 0xac, 0xa7, 0xc8, 0xac, 0xa0, 0xb6, 0x04
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xea, 0xb1, 0x5e, 0x8d, 0x87, 0x27, 0x35, 0x76,
        0x2b, 0x03, 0x2a, 0x09, 0xd2, 0x71, 0x72, 0x98,
        0x2f, 0x1e, 0x36, 0xbf, 0x95, 0x11, 0x84, 0xbb,
        0x6c, 0x31, 0x85, 0xb4, 0x2a, 0x37, 0x7a, 0xad
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs122_ProduceCorrectResult) {

    const u8 s[] = {
        0xd3, 0xcc, 0x6a, 0x0b, 0x0f, 0x67, 0x12, 0x5e,
        0xac, 0x48, 0xf1, 0xdb, 0x07, 0x7b, 0xfe, 0x9c,
        0xee, 0xa2, 0x8d, 0x1d, 0x38, 0x5a, 0x1f, 0xf6,
        0x3b, 0x74, 0x6e, 0xac, 0x67, 0xa8, 0x98, 0x0d
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x62, 0x5d, 0xf8, 0xe3, 0x5c, 0x35, 0x04, 0xeb,
        0x80, 0xcf, 0xa8, 0x47, 0xa7, 0xde, 0x30, 0x50,
        0xf2, 0x86, 0x29, 0xcb, 0xf4, 0x08, 0xf4, 0x59,
        0x39, 0x8e, 0xe6, 0xa2, 0x3f, 0x3a, 0x07, 0x61
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs123_ProduceCorrectResult) {

    const u8 s[] = {
        0x83, 0x92, 0xc0, 0xd8, 0xd0, 0x89, 0x31, 0x01,
        0x26, 0xb5, 0xab, 0x15, 0x17, 0xa6, 0x03, 0x40,
        0xf1, 0x9c, 0x0e, 0xc0, 0xfa, 0x28, 0x86, 0xd2,
        0x2b, 0x64, 0x50, 0x4b, 0x8c, 0x31, 0x33, 0x07
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xdb, 0x26, 0xc4, 0x3d, 0x9f, 0x95, 0xce, 0x08,
        0xa8, 0x00, 0x78, 0x43, 0x17, 0x12, 0xa2, 0x42,
        0xbb, 0xef, 0x5b, 0x15, 0xc2, 0xe6, 0x06, 0x1b,
        0x19, 0x1a, 0x4f, 0xf0, 0xea, 0x7e, 0x69, 0xd4
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs124_ProduceCorrectResult) {

    const u8 s[] = {
        0x89, 0xc6, 0xfb, 0xbe, 0xc1, 0x71, 0xe4, 0xea,
        0x62, 0xa1, 0x18, 0xcf, 0x12, 0x3e, 0x2a, 0xe0,
        0x9f, 0x86, 0x48, 0x95, 0x65, 0xf5, 0xb5, 0x2c,
        0x03, 0xcf, 0x12, 0xce, 0x8e, 0x9b, 0xbf, 0x00
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x00, 0x90, 0x19, 0x44, 0x34, 0xda, 0xdf, 0x52,
        0x12, 0x53, 0xf1, 0x59, 0x2e, 0xc9, 0xe5, 0x88,
        0xf1, 0xbb, 0xcb, 0xe1, 0xb1, 0x56, 0x16, 0xf6,
        0x38, 0x53, 0x5f, 0x7f, 0x70, 0x2e, 0x9b, 0x0e
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs125_ProduceCorrectResult) {

    const u8 s[] = {
        0x86, 0x2e, 0x2e, 0xfe, 0x7f, 0x18, 0x4e, 0x05,
        0x6f, 0xbc, 0xc6, 0x17, 0xd2, 0xf7, 0x1a, 0xf4,
        0xc8, 0xce, 0xbb, 0x1f, 0x84, 0xac, 0x92, 0x4b,
        0x4d, 0xc8, 0x71, 0x0f, 0x4d, 0xb6, 0x9a, 0x0b
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x40, 0x50, 0xd7, 0x88, 0xd9, 0x52, 0x06, 0xd0,
        0xe2, 0x56, 0x73, 0x57, 0x1f, 0x94, 0x0e, 0x28,
        0xa1, 0x13, 0x40, 0x99, 0x9f, 0x3d, 0x1c, 0x7a,
        0xc0, 0x84, 0x06, 0xd3, 0x6a, 0x2a, 0x38, 0x2e
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs126_ProduceCorrectResult) {

    const u8 s[] = {
        0xef, 0x67, 0x60, 0x2b, 0xc8, 0xb1, 0xac, 0xe8,
        0xcb, 0xdb, 0xbb, 0x6d, 0xfa, 0x51, 0xd2, 0xc2,
        0x71, 0x5d, 0x7d, 0x1b, 0x56, 0x48, 0xa9, 0x9f,
        0xe0, 0xfd, 0xf4, 0x61, 0xcf, 0x98, 0x3c, 0x05
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x20, 0x71, 0x30, 0x94, 0xb5, 0x10, 0x9e, 0x92,
        0x39, 0x39, 0x77, 0xc8, 0xdf, 0x0d, 0x76, 0x33,
        0x3d, 0xe0, 0x53, 0x01, 0x23, 0x1a, 0x4c, 0x40,
        0x5e, 0xe9, 0x91, 0xde, 0x5f, 0x02, 0x26, 0xc1
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs127_ProduceCorrectResult) {

    const u8 s[] = {
        0x42, 0x3d, 0xfc, 0x52, 0xb0, 0x2a, 0x97, 0x84,
        0xe4, 0x5a, 0x26, 0x7a, 0x85, 0x86, 0xec, 0x30,
        0xdb, 0x04, 0xc6, 0xd1, 0x0a, 0x7a, 0x3d, 0xc4,
        0x3a, 0x2b, 0x31, 0xdd, 0xd2, 0x56, 0x6f, 0x02
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xd0, 0x32, 0x24, 0x38, 0xf2, 0x2e, 0x8b, 0xfe,
        0xef, 0xb1, 0x68, 0xde, 0x3f, 0xf9, 0x05, 0x9a,
        0x15, 0xd8, 0x80, 0x34, 0x7f, 0xbf, 0x84, 0xde,
        0xdc, 0xef, 0x5d, 0xa3, 0xba, 0x9c, 0x34, 0x7b
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, MultiplyBasepoint_RandomlyGeneratedInputs128_ProduceCorrectResult) {

    const u8 s[] = {
        0xfe, 0x9f, 0xa5, 0xf4, 0x07, 0x85, 0x8d, 0x0c,
        0x65, 0x1f, 0x35, 0xf8, 0x4a, 0x92, 0xe3, 0xd7,
        0x1c, 0x1e, 0x66, 0xbe, 0x93, 0x81, 0xb4, 0xb3,
        0x00, 0x72, 0x94, 0x56, 0x71, 0x51, 0x13, 0x05
    };
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x6f, 0x05, 0xc9, 0xdf, 0xb1, 0x92, 0xf0, 0x71,
        0x07, 0x53, 0xae, 0x9c, 0x08, 0xa8, 0xc0, 0x88,
        0x8f, 0x16, 0x24, 0x64, 0x78, 0xdf, 0x61, 0x3f,
        0x97, 0x06, 0xfe, 0x43, 0x26, 0x36, 0x8b, 0x40
    };
    ed25519_group_ops.multiply_basepoint(&output, s);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs1_ProduceCorrectResult) {

    const u8 s[] = {
        0x3e, 0x90, 0x88, 0x5a, 0x08, 0xd5, 0x07, 0x82,
        0x76, 0x2e, 0xf8, 0xfa, 0xa8, 0x20, 0x32, 0x80,
        0xcf, 0x87, 0x3b, 0x11, 0x02, 0xf2, 0x2a, 0x00,
        0x7a, 0x27, 0x98, 0x4a, 0x08, 0xfd, 0xe0, 0x0b
    };
    const u8 h[] = {
        0x9e, 0xa3, 0xec, 0x44, 0x74, 0x38, 0x7e, 0xe5,
        0xd6, 0x4e, 0x04, 0xe1, 0xd5, 0x20, 0x89, 0xb2,
        0x9f, 0xb2, 0x01, 0xe4, 0xc0, 0xa0, 0xa6, 0x45,
        0x15, 0x49, 0xda, 0xd3, 0xd5, 0xb7, 0x96, 0x01
    };
    const u8 encoded_input_point[] = {
        0xd5, 0x20, 0x9a, 0xb3, 0x6e, 0x63, 0x3d, 0x0a,
        0x0f, 0x43, 0x76, 0xca, 0xc4, 0x16, 0xb8, 0xae,
        0x78, 0x24, 0xcc, 0xea, 0x1a, 0x85, 0x2e, 0xc7,
        0x29, 0xfb, 0x92, 0xf2, 0x64, 0x49, 0x0f, 0x76
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xdb, 0x13, 0xd4, 0x65, 0x60, 0x58, 0xdb, 0xcf,
        0xbc, 0x3c, 0x9e, 0x4c, 0x54, 0x2a, 0x79, 0x69,
        0xb6, 0x08, 0x1d, 0x8a, 0x0f, 0xf4, 0x2a, 0x5c,
        0xb8, 0x91, 0x3d, 0xd7, 0x9f, 0x59, 0x4f, 0xc0
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs2_ProduceCorrectResult) {

    const u8 s[] = {
        0xa0, 0xfd, 0x3f, 0xb2, 0xdd, 0xba, 0xf1, 0x9e,
        0xa0, 0x9b, 0xbf, 0x3b, 0x66, 0xdc, 0x0f, 0xda,
        0xab, 0x57, 0x30, 0x02, 0x96, 0xae, 0x55, 0xc5,
        0x48, 0x0d, 0x87, 0x55, 0x97, 0xa1, 0x13, 0x09
    };
    const u8 h[] = {
        0xce, 0x84, 0x4c, 0xaf, 0xe4, 0xf0, 0x92, 0xbe,
        0xd9, 0x4f, 0x0c, 0x5f, 0x7a, 0x7d, 0xd7, 0x40,
        0xaa, 0x7e, 0xc7, 0x00, 0x6d, 0x06, 0x02, 0x91,
        0xa3, 0xe4, 0x0e, 0x9f, 0x00, 0xd7, 0x4d, 0x07
    };
    const u8 encoded_input_point[] = {
        0x0a, 0xf8, 0x16, 0x97, 0x94, 0x4c, 0xb6, 0x9a,
        0x7b, 0x1e, 0x43, 0x86, 0xed, 0x51, 0x4a, 0x07,
        0xaa, 0xbe, 0xa6, 0x3d, 0x56, 0x0e, 0xc6, 0x7b,
        0x47, 0x10, 0x4c, 0x14, 0x15, 0x8d, 0x68, 0x88
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x1c, 0xf3, 0x96, 0x92, 0xd1, 0xb5, 0x6a, 0xa5,
        0xd0, 0x61, 0xc4, 0xaa, 0x0a, 0x4a, 0x6e, 0xd6,
        0xb4, 0xa2, 0x06, 0x19, 0x2a, 0xdd, 0x35, 0xa4,
        0xe1, 0x66, 0x21, 0x75, 0x7f, 0x60, 0x87, 0xed
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs3_ProduceCorrectResult) {

    const u8 s[] = {
        0xf2, 0x1d, 0x63, 0x1e, 0x1b, 0x41, 0xfb, 0xb4,
        0x9f, 0xae, 0xbf, 0x67, 0xd3, 0x16, 0xf5, 0xae,
        0x59, 0xd0, 0xce, 0x93, 0xfe, 0x7f, 0x08, 0x2e,
        0x90, 0x93, 0xc9, 0x16, 0x45, 0xf1, 0x2c, 0x05
    };
    const u8 h[] = {
        0x77, 0x35, 0xc8, 0x86, 0x4d, 0xf5, 0xbe, 0x6d,
        0x65, 0xa5, 0x62, 0xeb, 0x98, 0x5c, 0x67, 0x50,
        0x6e, 0xc3, 0x3d, 0xed, 0x05, 0xc7, 0xaa, 0x77,
        0x5a, 0xc8, 0x97, 0x04, 0xcc, 0x26, 0xc1, 0x02
    };
    const u8 encoded_input_point[] = {
        0x39, 0xe2, 0x63, 0xc4, 0x95, 0x8b, 0x16, 0x3e,
        0x9b, 0xfe, 0x5e, 0x44, 0xf9, 0xc1, 0xbf, 0xb3,
        0x4d, 0x65, 0xff, 0x10, 0x69, 0x61, 0x48, 0xda,
        0xb3, 0x2f, 0xe4, 0x3a, 0xfd, 0x77, 0x1b, 0x82
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xcb, 0xfc, 0x0f, 0x2e, 0x16, 0x64, 0x73, 0xa3,
        0xa2, 0x92, 0xdb, 0xfc, 0xd2, 0x81, 0x16, 0x52,
        0x13, 0x8f, 0xdf, 0xd1, 0x8f, 0xcc, 0xc4, 0xe2,
        0xcf, 0x81, 0x9a, 0x01, 0x1e, 0xcb, 0x7c, 0x0e
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs4_ProduceCorrectResult) {

    const u8 s[] = {
        0x4b, 0x0a, 0x3b, 0x68, 0xe6, 0x7f, 0x00, 0x35,
        0x09, 0x66, 0x19, 0xe3, 0x08, 0x77, 0x05, 0x96,
        0x86, 0xb0, 0xdd, 0xb4, 0x74, 0x98, 0x57, 0x5c,
        0x02, 0xdd, 0x3b, 0x70, 0xf2, 0x26, 0xb1, 0x08
    };
    const u8 h[] = {
        0x34, 0x39, 0xe5, 0x43, 0x02, 0x28, 0xdb, 0x54,
        0xcd, 0x67, 0x08, 0x28, 0xa0, 0x25, 0xd3, 0x16,
        0x78, 0xeb, 0xd4, 0x67, 0x42, 0xa1, 0x00, 0xb1,
        0x23, 0xe8, 0x0c, 0x05, 0x73, 0x1d, 0x18, 0x0f
    };
    const u8 encoded_input_point[] = {
        0x2c, 0xa8, 0x8d, 0xde, 0x85, 0x7f, 0x82, 0x1f,
        0x0e, 0x62, 0x13, 0xb2, 0x40, 0x77, 0xf8, 0x40,
        0xc0, 0x74, 0x6b, 0x81, 0x63, 0xee, 0xb1, 0x77,
        0x4e, 0xf5, 0xec, 0x9d, 0xb2, 0xe9, 0x95, 0xf4
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xb5, 0x02, 0x8e, 0xf5, 0xce, 0xb1, 0x92, 0x42,
        0xa4, 0x89, 0xe4, 0x7f, 0x22, 0x69, 0x3c, 0x6e,
        0xe1, 0xa1, 0x57, 0xf7, 0x0c, 0x02, 0x58, 0x45,
        0x73, 0x1e, 0x26, 0xf0, 0xe4, 0x35, 0x93, 0x7f
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs5_ProduceCorrectResult) {

    const u8 s[] = {
        0x50, 0xd4, 0x9f, 0x8a, 0xb8, 0x5c, 0x96, 0xaf,
        0xd8, 0x3c, 0xed, 0x62, 0xc7, 0x30, 0xd9, 0x91,
        0x40, 0x2e, 0xc5, 0xcc, 0x4b, 0x34, 0x75, 0x08,
        0x61, 0x68, 0x9e, 0x11, 0xd6, 0x18, 0xe3, 0x02
    };
    const u8 h[] = {
        0x1c, 0x87, 0x17, 0x23, 0xd7, 0xf9, 0xb8, 0x11,
        0x1b, 0x90, 0xc1, 0x92, 0x2e, 0xdb, 0x34, 0x44,
        0x80, 0x60, 0xe9, 0x4a, 0xdc, 0x62, 0x1a, 0xaf,
        0xe3, 0x58, 0x8a, 0xf2, 0x14, 0xbe, 0xc7, 0x0f
    };
    const u8 encoded_input_point[] = {
        0xd3, 0xb9, 0x7f, 0x28, 0x20, 0xa0, 0x2e, 0xab,
        0xff, 0x90, 0x73, 0x5c, 0xb8, 0xf0, 0x57, 0x02,
        0x60, 0xcb, 0x0f, 0x4d, 0x83, 0x59, 0x57, 0xf5,
        0x91, 0x5a, 0x23, 0x9e, 0x06, 0xf7, 0xf3, 0x56
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xa7, 0x31, 0x6c, 0x67, 0x16, 0x7f, 0x13, 0x89,
        0x60, 0xa6, 0x26, 0x81, 0x24, 0x6c, 0xce, 0xd1,
        0x9a, 0x20, 0xf3, 0xc0, 0xbf, 0x8a, 0x8d, 0x9e,
        0xb7, 0xd0, 0xfc, 0xea, 0xb6, 0x76, 0x91, 0x2d
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs6_ProduceCorrectResult) {

    const u8 s[] = {
        0xd8, 0x33, 0xa7, 0x78, 0x9d, 0x66, 0xcf, 0x6f,
        0xb4, 0xc6, 0x06, 0xae, 0x19, 0x4e, 0x7d, 0xbe,
        0x03, 0x2b, 0xfc, 0x2a, 0xf3, 0x96, 0xe9, 0x01,
        0xa7, 0x29, 0xae, 0x04, 0xd5, 0x61, 0xc9, 0x0b
    };
    const u8 h[] = {
        0x68, 0x87, 0x2a, 0xa2, 0x61, 0xbd, 0xd8, 0xad,
        0xab, 0xc2, 0x27, 0xd8, 0x9e, 0x94, 0x84, 0x3a,
        0x95, 0x9a, 0xae, 0xd4, 0x54, 0x1b, 0x2f, 0xf5,
        0xed, 0x94, 0xf9, 0x09, 0x77, 0xc8, 0xd1, 0x07
    };
    const u8 encoded_input_point[] = {
        0x18, 0x9a, 0xc8, 0x24, 0xaf, 0xf9, 0x2e, 0x6b,
        0xcb, 0x89, 0x95, 0x5e, 0xed, 0x16, 0xcf, 0x25,
        0x3b, 0xf3, 0x3d, 0xca, 0x04, 0xb0, 0x27, 0x97,
        0xfc, 0x27, 0xe3, 0x00, 0x3e, 0x09, 0x66, 0x40
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xec, 0xf2, 0x48, 0x2f, 0x32, 0x0c, 0xab, 0x7a,
        0x60, 0x75, 0xe2, 0x3e, 0xd0, 0xa2, 0x88, 0x0f,
        0xfb, 0xee, 0xf5, 0xa7, 0xf5, 0x7e, 0x8e, 0x7b,
        0x05, 0x3e, 0x42, 0x69, 0x01, 0x55, 0xa7, 0x16
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs7_ProduceCorrectResult) {

    const u8 s[] = {
        0x0e, 0x44, 0xe0, 0xf8, 0x20, 0x5e, 0x1c, 0x48,
        0x0f, 0x37, 0xbc, 0xe1, 0xe3, 0x24, 0xf6, 0x78,
        0xeb, 0x33, 0x50, 0x66, 0x5b, 0xaa, 0x61, 0x7d,
        0x71, 0xec, 0x6b, 0xbe, 0x81, 0xb5, 0x78, 0x0d
    };
    const u8 h[] = {
        0x75, 0xc8, 0xfd, 0x75, 0x4e, 0x7a, 0xbe, 0x6f,
        0x32, 0xc7, 0x61, 0x82, 0x92, 0xcd, 0xac, 0xb2,
        0xd7, 0x2f, 0x85, 0xef, 0x43, 0xf9, 0x6f, 0x82,
        0x29, 0xd8, 0xd4, 0xc1, 0x7f, 0xb1, 0x6e, 0x02
    };
    const u8 encoded_input_point[] = {
        0xaf, 0xd4, 0xcd, 0x81, 0x18, 0x7b, 0x5f, 0xa5,
        0xa4, 0x8a, 0x4d, 0x03, 0xfe, 0x47, 0x9f, 0x4d,
        0xf1, 0x2e, 0xb7, 0xb2, 0x89, 0xdb, 0x10, 0x1e,
        0x3e, 0xbd, 0x28, 0x91, 0x9d, 0xa8, 0x28, 0x3f
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x67, 0x6a, 0xd9, 0x2a, 0x96, 0x7a, 0x60, 0x19,
        0x6e, 0x23, 0xc0, 0x26, 0xed, 0xc4, 0xf6, 0xb1,
        0x31, 0xb8, 0x00, 0x5b, 0x0d, 0x95, 0x5d, 0xdd,
        0x79, 0xea, 0x45, 0x7f, 0x17, 0x3d, 0xda, 0x61
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs8_ProduceCorrectResult) {

    const u8 s[] = {
        0x0a, 0xc4, 0xa9, 0x42, 0xea, 0xc7, 0xe0, 0xca,
        0xae, 0x16, 0x8e, 0xfc, 0x95, 0xc3, 0xf5, 0x9e,
        0x05, 0x7a, 0x82, 0xb4, 0xac, 0xc7, 0xd4, 0xa7,
        0x66, 0xed, 0x6c, 0xb8, 0x7e, 0xeb, 0x81, 0x04
    };
    const u8 h[] = {
        0x4c, 0x54, 0xb9, 0xaa, 0xf0, 0x94, 0xc8, 0x42,
        0xc6, 0x3d, 0xd9, 0x77, 0xb0, 0x22, 0xdb, 0xec,
        0x05, 0x3e, 0x04, 0xde, 0xbc, 0xd4, 0x91, 0xa6,
        0x55, 0x42, 0x6e, 0xb5, 0xaa, 0x8a, 0x36, 0x05
    };
    const u8 encoded_input_point[] = {
        0x3d, 0x69, 0x7e, 0xb3, 0x06, 0x57, 0x9b, 0xee,
        0xd0, 0x01, 0xd4, 0x09, 0xff, 0x76, 0x8c, 0x78,
        0xd3, 0x3f, 0x3b, 0xe5, 0xc0, 0xd6, 0x12, 0x5e,
        0x07, 0xc4, 0x0f, 0x33, 0x1a, 0xd2, 0x5a, 0x5b
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xf0, 0x45, 0x48, 0x6f, 0x53, 0x6c, 0x13, 0xc6,
        0xc3, 0x89, 0xd9, 0x38, 0x1d, 0xc5, 0x66, 0x4b,
        0x21, 0x5f, 0x00, 0xaf, 0x47, 0x6f, 0x39, 0xcf,
        0x7d, 0x7b, 0xa0, 0x38, 0x78, 0x39, 0x83, 0xa1
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs9_ProduceCorrectResult) {

    const u8 s[] = {
        0x10, 0x94, 0xf9, 0x36, 0x8a, 0x4b, 0x78, 0x9a,
        0xc7, 0x21, 0xfd, 0x26, 0x64, 0xd2, 0x50, 0x04,
        0xad, 0xea, 0x49, 0xf8, 0xc4, 0xb3, 0x5c, 0x87,
        0x9e, 0x1a, 0x62, 0xad, 0x8e, 0xff, 0x1c, 0x04
    };
    const u8 h[] = {
        0x12, 0xbe, 0xf6, 0x75, 0x52, 0x52, 0xc4, 0x01,
        0xe9, 0x5e, 0xee, 0xfc, 0x82, 0x9a, 0x2b, 0x7b,
        0x56, 0x6f, 0xd3, 0xfc, 0x4d, 0x08, 0x6a, 0x95,
        0x1f, 0x89, 0xb3, 0x83, 0xc8, 0xba, 0xdc, 0x07
    };
    const u8 encoded_input_point[] = {
        0x3e, 0xa9, 0xe5, 0x9c, 0x23, 0xa5, 0x15, 0x7b,
        0xf2, 0x53, 0x3e, 0xe5, 0x79, 0x2e, 0x4f, 0x95,
        0xbb, 0xe5, 0x2c, 0xf9, 0x2c, 0x6d, 0x04, 0x81,
        0xd5, 0x22, 0xb0, 0x0f, 0xf1, 0x7d, 0x5d, 0x5e
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x03, 0x3b, 0x0a, 0xa4, 0x3c, 0xdb, 0xd9, 0xbf,
        0xa0, 0xfe, 0x12, 0x33, 0xe0, 0xd7, 0xbf, 0xbf,
        0x36, 0x51, 0x89, 0xf1, 0x51, 0xeb, 0xf4, 0x89,
        0xe8, 0xd5, 0xd6, 0xec, 0xda, 0xbe, 0x0f, 0x7d
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs10_ProduceCorrectResult) {

    const u8 s[] = {
        0x4f, 0xc3, 0x47, 0xb9, 0x69, 0x7d, 0xda, 0x72,
        0x83, 0x6d, 0x3f, 0x50, 0xcf, 0x19, 0xac, 0xfd,
        0x84, 0x9f, 0xc5, 0xa6, 0x45, 0x19, 0x21, 0x8d,
        0x99, 0x4d, 0x55, 0x6d, 0x16, 0x29, 0x28, 0x00
    };
    const u8 h[] = {
        0x06, 0xd9, 0x7e, 0xd7, 0x6f, 0x6f, 0x14, 0xfa,
        0x7e, 0xdb, 0x3e, 0x61, 0xe9, 0xeb, 0x1f, 0x96,
        0x5f, 0xa7, 0xed, 0x3d, 0xec, 0xf0, 0xb7, 0x1c,
        0xaa, 0xe0, 0x1c, 0x03, 0xe9, 0xe8, 0x2f, 0x04
    };
    const u8 encoded_input_point[] = {
        0x2f, 0xe3, 0xd3, 0x0a, 0x7a, 0x62, 0x69, 0xdc,
        0x4d, 0x07, 0xb0, 0xcd, 0xbd, 0x4e, 0xed, 0x65,
        0x33, 0xe9, 0x88, 0xe9, 0x12, 0xff, 0x7e, 0x82,
        0x2c, 0x1f, 0xdf, 0x30, 0xca, 0xd9, 0x95, 0x05
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x1c, 0xef, 0xc7, 0xd3, 0x85, 0xce, 0xa2, 0xab,
        0x9b, 0xbc, 0x1a, 0xe7, 0x64, 0x5f, 0x49, 0xd1,
        0x13, 0xc4, 0x26, 0x45, 0x90, 0x5b, 0x80, 0x1f,
        0xfa, 0x2c, 0x4e, 0x0c, 0x5a, 0xb4, 0xa2, 0xc8
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs11_ProduceCorrectResult) {

    const u8 s[] = {
        0x99, 0x94, 0x3f, 0x9d, 0x3a, 0x73, 0x66, 0xba,
        0x42, 0xef, 0x7a, 0x9f, 0x2f, 0x0e, 0x12, 0xa2,
        0x02, 0xe6, 0xf0, 0x20, 0x0f, 0xe8, 0x63, 0x46,
        0xab, 0x52, 0x65, 0x02, 0x81, 0x20, 0xf0, 0x08
    };
    const u8 h[] = {
        0x9e, 0xd7, 0x6a, 0x62, 0xe4, 0xf5, 0x29, 0x53,
        0x32, 0x6f, 0xc2, 0xc7, 0x6c, 0xc1, 0xec, 0x04,
        0x00, 0xad, 0xe0, 0xe9, 0x85, 0x47, 0x9a, 0x60,
        0x7d, 0xf3, 0x8e, 0x97, 0x80, 0x12, 0x5d, 0x00
    };
    const u8 encoded_input_point[] = {
        0xc2, 0x75, 0xd4, 0x5e, 0xea, 0xf5, 0x25, 0x18,
        0xef, 0xd2, 0x41, 0x0a, 0x80, 0xa1, 0x9e, 0xa9,
        0xbd, 0xe0, 0xf4, 0xb1, 0x48, 0x9e, 0xd7, 0x8c,
        0x7f, 0x0c, 0x1d, 0x67, 0x05, 0x4e, 0x7c, 0x38
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xbb, 0xdc, 0x17, 0xfc, 0x78, 0xf7, 0xde, 0x69,
        0x18, 0x54, 0x44, 0x44, 0x71, 0x20, 0xa0, 0xeb,
        0x0f, 0x8c, 0x09, 0x02, 0x57, 0x90, 0xcb, 0x1d,
        0x27, 0x11, 0x88, 0xdc, 0xbc, 0xe3, 0x66, 0xb8
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs12_ProduceCorrectResult) {

    const u8 s[] = {
        0x68, 0x52, 0xd7, 0xab, 0x5a, 0x66, 0xa2, 0x83,
        0xb4, 0xe5, 0x14, 0xcf, 0x74, 0x86, 0x33, 0x7b,
        0x39, 0x15, 0x53, 0xa8, 0xff, 0xa4, 0xea, 0xa7,
        0x79, 0x38, 0x1e, 0x28, 0x1c, 0xb5, 0x90, 0x0d
    };
    const u8 h[] = {
        0x79, 0x2e, 0x9a, 0x7d, 0x58, 0x55, 0xf2, 0x56,
        0xa8, 0x3c, 0x3f, 0x50, 0x2e, 0x48, 0x57, 0xf5,
        0x3d, 0xc7, 0x7f, 0xfe, 0x6d, 0x7e, 0x29, 0x9b,
        0x7e, 0x13, 0x4c, 0xc3, 0xdd, 0x67, 0xa4, 0x0e
    };
    const u8 encoded_input_point[] = {
        0xc8, 0x1f, 0x12, 0x45, 0x72, 0xef, 0xb9, 0x0d,
        0x37, 0x6d, 0x4a, 0x4b, 0x97, 0xe8, 0x78, 0xbd,
        0x32, 0xbf, 0x85, 0xcd, 0xa7, 0xf8, 0x9c, 0xa8,
        0x7e, 0xc0, 0x1a, 0xe7, 0xdd, 0x4e, 0x32, 0x8e
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x1e, 0x9a, 0x73, 0x1c, 0xa3, 0xbb, 0x2a, 0xd9,
        0x75, 0x2f, 0x91, 0x22, 0xb1, 0x8b, 0xc4, 0xf4,
        0x4d, 0xe1, 0xf0, 0xae, 0xd3, 0x1a, 0x47, 0x20,
        0x96, 0x04, 0xe9, 0xc3, 0x4d, 0xb8, 0x29, 0x0a
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs13_ProduceCorrectResult) {

    const u8 s[] = {
        0x07, 0x8e, 0x1b, 0x9e, 0x72, 0x27, 0x8e, 0x9b,
        0xed, 0xcb, 0x35, 0xe6, 0x57, 0x58, 0x3f, 0xd7,
        0xe0, 0x46, 0xc6, 0x71, 0x8a, 0x72, 0x84, 0xbc,
        0xd8, 0x5e, 0xe7, 0xea, 0x1a, 0x2a, 0x68, 0x0f
    };
    const u8 h[] = {
        0x3b, 0xc7, 0x4d, 0xf1, 0x13, 0xe2, 0xad, 0xb3,
        0x89, 0x91, 0x54, 0xc1, 0x81, 0x7e, 0x75, 0x64,
        0xf4, 0x04, 0x7b, 0xa0, 0x59, 0x8d, 0x42, 0xf8,
        0xd0, 0x43, 0x6b, 0xb7, 0xb6, 0xc2, 0xda, 0x0c
    };
    const u8 encoded_input_point[] = {
        0x67, 0xdd, 0xdd, 0x6c, 0xd3, 0xf9, 0xed, 0xe8,
        0x8c, 0x09, 0xc5, 0xfb, 0xef, 0x0d, 0xcf, 0x5d,
        0xf3, 0xb1, 0x58, 0x46, 0xe1, 0xd7, 0xe4, 0x17,
        0x95, 0xf3, 0xe5, 0x63, 0xdc, 0x07, 0xb4, 0xa0
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x7d, 0x33, 0x4d, 0x92, 0x9e, 0x38, 0xf7, 0x25,
        0x8d, 0x1e, 0xde, 0x9d, 0xde, 0x96, 0x23, 0x3d,
        0xba, 0x93, 0x9e, 0x8b, 0x74, 0x00, 0xa5, 0xc3,
        0x32, 0x25, 0xa2, 0xf8, 0x07, 0xdf, 0x9b, 0x47
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs14_ProduceCorrectResult) {

    const u8 s[] = {
        0xed, 0x57, 0x56, 0x2e, 0x42, 0x96, 0x1f, 0xc3,
        0x04, 0x1d, 0xf9, 0x8e, 0x77, 0x9f, 0x95, 0x4a,
        0x6c, 0x3b, 0x43, 0x0e, 0x75, 0x37, 0x34, 0x80,
        0x7f, 0xaf, 0xc8, 0x41, 0x1e, 0x06, 0xfd, 0x07
    };
    const u8 h[] = {
        0xa7, 0x36, 0xf0, 0x20, 0x10, 0x11, 0x13, 0xd5,
        0x40, 0x59, 0x1d, 0xe8, 0xe2, 0xbe, 0x27, 0x4c,
        0xf7, 0x6c, 0xb9, 0x49, 0x77, 0x95, 0x55, 0xf6,
        0xd6, 0x50, 0x3e, 0x79, 0x25, 0xf4, 0xcb, 0x08
    };
    const u8 encoded_input_point[] = {
        0xf8, 0x1d, 0x16, 0xbe, 0x3e, 0x02, 0xea, 0x18,
        0xa4, 0x82, 0xd7, 0x7e, 0xa3, 0x19, 0xb4, 0x54,
        0x46, 0xe8, 0xab, 0xf8, 0xc8, 0x29, 0xb9, 0x6e,
        0x18, 0xf0, 0xe0, 0x25, 0xea, 0xff, 0xe8, 0x00
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x4d, 0xba, 0x79, 0xa9, 0x1b, 0xd3, 0x6d, 0xf8,
        0x00, 0x82, 0xf5, 0x4b, 0xc9, 0x29, 0xcc, 0x4b,
        0x76, 0x74, 0xdc, 0x43, 0xd5, 0x98, 0x99, 0x49,
        0xac, 0xbb, 0x79, 0xf9, 0x9b, 0x0c, 0x00, 0xec
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs15_ProduceCorrectResult) {

    const u8 s[] = {
        0x47, 0x06, 0x56, 0xd5, 0xc9, 0x66, 0x99, 0xc9,
        0x88, 0x6b, 0x29, 0x33, 0xa3, 0xa8, 0x5c, 0xcd,
        0x86, 0x25, 0x00, 0xd7, 0x58, 0x9c, 0xff, 0x22,
        0x96, 0xa1, 0xee, 0xa5, 0xb2, 0x8b, 0xef, 0x05
    };
    const u8 h[] = {
        0xb3, 0x8d, 0xa5, 0x78, 0x38, 0xba, 0xcd, 0xfb,
        0xe2, 0xd7, 0x33, 0x20, 0xa4, 0x80, 0x84, 0xdc,
        0x82, 0x65, 0x52, 0x5a, 0x56, 0x57, 0xad, 0xc5,
        0xd4, 0x7c, 0x47, 0x93, 0x40, 0x7d, 0x8b, 0x00
    };
    const u8 encoded_input_point[] = {
        0xe6, 0x04, 0x08, 0xa6, 0xf4, 0x43, 0x59, 0x48,
        0x2e, 0x7d, 0x07, 0x28, 0x4a, 0x89, 0x97, 0xe9,
        0x87, 0xe1, 0x6a, 0x5c, 0xaa, 0x77, 0x94, 0x28,
        0x7b, 0x40, 0x0c, 0xf1, 0xcd, 0xe5, 0x4a, 0x4a
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xc2, 0x8c, 0xc2, 0xd0, 0xa8, 0x1e, 0x56, 0x98,
        0x4b, 0x4d, 0x22, 0xcb, 0x51, 0x54, 0xf1, 0x69,
        0x0f, 0x01, 0x57, 0xfb, 0xda, 0xa8, 0x62, 0x08,
        0x03, 0xdc, 0x3a, 0x51, 0xc2, 0x47, 0xfb, 0x57
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs16_ProduceCorrectResult) {

    const u8 s[] = {
        0x8c, 0x71, 0x24, 0xf3, 0xdd, 0xe5, 0x50, 0xf7,
        0x5b, 0x91, 0x40, 0x89, 0x7b, 0x57, 0x02, 0xff,
        0x09, 0x29, 0x7d, 0xab, 0xed, 0xbc, 0xef, 0xa4,
        0x18, 0xfc, 0xcf, 0xf2, 0x05, 0x7d, 0x15, 0x0b
    };
    const u8 h[] = {
        0x98, 0x1f, 0xb6, 0x9a, 0xe7, 0x7b, 0x4e, 0x71,
        0x6f, 0x86, 0xeb, 0x20, 0xd7, 0x1c, 0x63, 0x0c,
        0xd8, 0xf5, 0x75, 0xe3, 0x4d, 0xb6, 0x0f, 0xb9,
        0xf9, 0xf8, 0x4a, 0x73, 0x2e, 0x65, 0x3a, 0x08
    };
    const u8 encoded_input_point[] = {
        0x27, 0x6e, 0x90, 0xe4, 0xfb, 0x32, 0x61, 0x91,
        0xf5, 0xc7, 0x77, 0xbb, 0x86, 0xa0, 0x32, 0x67,
        0xc1, 0x9c, 0x5d, 0xb3, 0x0f, 0x3e, 0x0f, 0x04,
        0x3d, 0x2f, 0x46, 0x01, 0x49, 0xf4, 0xc0, 0x9e
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xb6, 0x0f, 0x4f, 0xfe, 0x9d, 0xff, 0x7f, 0x36,
        0x03, 0x63, 0x87, 0xcd, 0xf4, 0x0b, 0x70, 0xf6,
        0x6d, 0x97, 0xfc, 0xba, 0x78, 0x93, 0x7f, 0x6b,
        0x0c, 0x63, 0x4b, 0xbc, 0x59, 0x56, 0x1c, 0x02
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs17_ProduceCorrectResult) {

    const u8 s[] = {
        0xff, 0x84, 0x7a, 0xf3, 0x9f, 0xd8, 0xf4, 0x8d,
        0xf9, 0x0e, 0x72, 0x81, 0x63, 0x55, 0x28, 0xbb,
        0xab, 0xf9, 0xa9, 0xa2, 0xdb, 0xe9, 0x8a, 0x3f,
        0xd9, 0xb0, 0x3f, 0x80, 0xc8, 0x36, 0x33, 0x06
    };
    const u8 h[] = {
        0x9b, 0xb5, 0x9e, 0xea, 0x3f, 0xfe, 0xf5, 0x59,
        0xf3, 0x70, 0xaa, 0x80, 0x36, 0x41, 0x62, 0xe6,
        0x64, 0x19, 0xe0, 0xdf, 0x79, 0x85, 0x37, 0x37,
        0xec, 0x9c, 0x04, 0x84, 0xcd, 0x76, 0x25, 0x0e
    };
    const u8 encoded_input_point[] = {
        0x16, 0x36, 0xaa, 0xa0, 0x17, 0x0f, 0xd3, 0x5c,
        0x41, 0xde, 0xef, 0xdb, 0xa4, 0x20, 0xaa, 0xe5,
        0xe2, 0x12, 0xcd, 0x65, 0x8c, 0x58, 0x5f, 0xbd,
        0xb9, 0x23, 0xd4, 0x4d, 0xd3, 0x40, 0x8a, 0x37
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x99, 0x32, 0xea, 0x89, 0x8c, 0xd4, 0x31, 0x27,
        0xba, 0xdd, 0x1e, 0x29, 0x42, 0x01, 0xb5, 0xd6,
        0xff, 0x40, 0x7f, 0x2a, 0xbe, 0xc6, 0x48, 0x5e,
        0xbd, 0x4c, 0x35, 0x03, 0xe9, 0x22, 0xcb, 0xc9
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs18_ProduceCorrectResult) {

    const u8 s[] = {
        0x2c, 0x2f, 0x40, 0xf6, 0x5a, 0xa1, 0x3f, 0x15,
        0x56, 0xc0, 0x1a, 0x93, 0x85, 0x9c, 0x4f, 0xf2,
        0x39, 0x6d, 0xcb, 0xde, 0xaf, 0xbb, 0x86, 0x0a,
        0xdd, 0x2f, 0xbe, 0x26, 0x8f, 0xf9, 0xd9, 0x05
    };
    const u8 h[] = {
        0x20, 0x94, 0x56, 0x92, 0xf9, 0x83, 0x0d, 0x1b,
        0x22, 0x37, 0x27, 0x3b, 0xfb, 0xbe, 0xb0, 0x8c,
        0x31, 0xac, 0x4c, 0x56, 0xdb, 0xc2, 0xec, 0xb9,
        0x6c, 0xf5, 0xd8, 0xe8, 0x7d, 0x5a, 0xfe, 0x08
    };
    const u8 encoded_input_point[] = {
        0x40, 0x5c, 0x1f, 0x22, 0xb8, 0x26, 0xf0, 0x14,
        0xb8, 0x51, 0xb7, 0xf5, 0x8c, 0x7f, 0x15, 0x65,
        0x1b, 0x42, 0x52, 0x66, 0xf6, 0x1b, 0x79, 0xab,
        0x76, 0xcc, 0xa2, 0xdd, 0xf9, 0x7a, 0x19, 0x6a
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x04, 0xa6, 0xa6, 0x71, 0x04, 0x8e, 0xc9, 0x75,
        0x3c, 0xe0, 0x81, 0x05, 0xbf, 0x99, 0x9e, 0xde,
        0x74, 0xaa, 0x0b, 0x44, 0x20, 0x0d, 0x70, 0xe7,
        0xd6, 0x6e, 0x83, 0x47, 0x24, 0xe7, 0xba, 0x81
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs19_ProduceCorrectResult) {

    const u8 s[] = {
        0x84, 0xb8, 0xea, 0x89, 0x5c, 0x7e, 0xed, 0x73,
        0x70, 0x73, 0x14, 0x27, 0x6a, 0xa1, 0xf4, 0xbd,
        0xee, 0x34, 0xb8, 0xff, 0x28, 0xc3, 0x25, 0x85,
        0xf7, 0x5d, 0x81, 0xde, 0x75, 0x54, 0xf4, 0x00
    };
    const u8 h[] = {
        0x06, 0x4a, 0xd2, 0xc0, 0x15, 0x70, 0x81, 0x02,
        0xec, 0x0a, 0xe6, 0x58, 0xc2, 0xee, 0x8a, 0xe4,
        0x85, 0xba, 0x27, 0xe3, 0xaf, 0xde, 0x10, 0xc2,
        0x18, 0x67, 0x1d, 0x47, 0xf5, 0x09, 0xb9, 0x08
    };
    const u8 encoded_input_point[] = {
        0x73, 0x1a, 0xeb, 0xa1, 0x33, 0x2a, 0x5d, 0x6a,
        0x15, 0x67, 0xd5, 0xe2, 0xed, 0x34, 0x62, 0x92,
        0x39, 0x81, 0x7f, 0x93, 0xf7, 0xc9, 0x8f, 0x7e,
        0x30, 0xe6, 0xa2, 0x3c, 0x5f, 0x32, 0x2b, 0x85
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x64, 0x2b, 0xe3, 0x87, 0x1c, 0x38, 0x4a, 0x7a,
        0xf3, 0xe2, 0xa4, 0x12, 0xab, 0x5d, 0x26, 0x48,
        0x0c, 0x94, 0x6e, 0xd1, 0x8a, 0x78, 0xba, 0xe4,
        0x80, 0x4c, 0xb6, 0x03, 0xdb, 0x87, 0xf9, 0xbb
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs20_ProduceCorrectResult) {

    const u8 s[] = {
        0xc8, 0xd9, 0xe5, 0x64, 0x03, 0xb1, 0x09, 0xb9,
        0xf5, 0x8b, 0xd2, 0x14, 0x19, 0x6b, 0x2c, 0xea,
        0x3f, 0xf5, 0xc6, 0x6a, 0x26, 0x93, 0x86, 0x82,
        0xf2, 0x67, 0xd2, 0x32, 0xfd, 0x16, 0xe3, 0x0f
    };
    const u8 h[] = {
        0x58, 0xe1, 0xe9, 0x90, 0x53, 0x18, 0x42, 0x61,
        0x28, 0x7d, 0x66, 0x4c, 0xdd, 0x55, 0x71, 0x37,
        0x95, 0x73, 0x0a, 0x1e, 0x03, 0x1c, 0xca, 0xe0,
        0x90, 0x6d, 0x9f, 0x9b, 0x25, 0x69, 0xd8, 0x04
    };
    const u8 encoded_input_point[] = {
        0xf2, 0x95, 0xe9, 0xc9, 0x89, 0x30, 0xce, 0x22,
        0xbb, 0x56, 0xfd, 0x82, 0x42, 0xaf, 0x6b, 0xa0,
        0x48, 0xdf, 0x72, 0x08, 0x16, 0x49, 0x35, 0x91,
        0x5b, 0x40, 0xe2, 0x08, 0x5c, 0xd1, 0xe9, 0x37
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xd2, 0xc4, 0x75, 0x7d, 0x5c, 0x8f, 0xef, 0x79,
        0xfb, 0xd9, 0x8e, 0x6e, 0x5d, 0x85, 0x4b, 0xe8,
        0x34, 0x22, 0xd5, 0x28, 0xf0, 0xdf, 0x13, 0x31,
        0xe2, 0x93, 0x4b, 0x2f, 0xf4, 0x97, 0xf0, 0x81
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs21_ProduceCorrectResult) {

    const u8 s[] = {
        0xc8, 0xaf, 0x36, 0x1a, 0xc3, 0x52, 0x52, 0x80,
        0x8e, 0x58, 0x3c, 0x49, 0xb5, 0x22, 0x3f, 0x0e,
        0x20, 0xc8, 0xf8, 0x5b, 0x82, 0x1b, 0x46, 0xac,
        0x78, 0x20, 0xb8, 0x55, 0xcb, 0xd4, 0xbc, 0x07
    };
    const u8 h[] = {
        0x45, 0x46, 0x9e, 0xdb, 0x34, 0xb9, 0x51, 0x80,
        0xb8, 0x58, 0x38, 0x8d, 0x75, 0xed, 0x1f, 0x78,
        0x65, 0x3d, 0xc0, 0x95, 0x95, 0x35, 0x78, 0x66,
        0xdb, 0x27, 0x97, 0x10, 0xbd, 0xb2, 0xda, 0x0b
    };
    const u8 encoded_input_point[] = {
        0x05, 0x3f, 0x24, 0x67, 0x51, 0x89, 0xdd, 0x1e,
        0x4e, 0x30, 0x29, 0x6e, 0x06, 0x6b, 0x2f, 0x25,
        0xd3, 0x6a, 0x00, 0xd2, 0x28, 0xbc, 0x1c, 0xd0,
        0xce, 0xca, 0xca, 0xcd, 0xc7, 0x11, 0x46, 0x2a
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xca, 0xb3, 0x87, 0x2a, 0x76, 0x5f, 0x1b, 0xd1,
        0x59, 0x73, 0x48, 0x0a, 0x02, 0x50, 0x00, 0x92,
        0xb5, 0xcc, 0x8b, 0x7f, 0x50, 0xf9, 0xa3, 0xbf,
        0xdb, 0xef, 0x6d, 0x89, 0xcd, 0xa2, 0xb3, 0xb5
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs22_ProduceCorrectResult) {

    const u8 s[] = {
        0xf0, 0xab, 0x37, 0xb1, 0x3b, 0x1a, 0xc4, 0xb7,
        0x88, 0xc1, 0xda, 0x61, 0xcc, 0xdc, 0xbe, 0x5d,
        0x31, 0x42, 0x26, 0xed, 0x41, 0xf4, 0xb3, 0x40,
        0x1a, 0x30, 0x92, 0x50, 0x11, 0x5d, 0x8a, 0x0a
    };
    const u8 h[] = {
        0x10, 0xfc, 0x29, 0x52, 0x3e, 0x3c, 0x0a, 0x60,
        0x6b, 0x5e, 0x8a, 0x5d, 0x7e, 0xc4, 0x6f, 0xca,
        0x8e, 0x2f, 0xb1, 0xde, 0x54, 0x18, 0x6f, 0xb6,
        0x1a, 0x53, 0xff, 0x73, 0x4f, 0xde, 0x64, 0x01
    };
    const u8 encoded_input_point[] = {
        0xed, 0xd6, 0xf5, 0x18, 0x16, 0x92, 0x16, 0x29,
        0x7b, 0xd9, 0xaf, 0x0b, 0x56, 0xfd, 0xd6, 0x9b,
        0x98, 0xea, 0x7e, 0xbd, 0x2c, 0x22, 0xaf, 0x2d,
        0xda, 0x8a, 0x4d, 0x8c, 0x9f, 0xed, 0xc2, 0xac
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x64, 0x55, 0x47, 0x54, 0x1a, 0xc8, 0x41, 0x4c,
        0x64, 0x1a, 0xca, 0x6e, 0x48, 0x3e, 0xd7, 0x9b,
        0xf1, 0x0c, 0x02, 0x9f, 0x44, 0x33, 0x0c, 0x77,
        0x94, 0xca, 0x62, 0x66, 0x82, 0x25, 0x89, 0x88
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs23_ProduceCorrectResult) {

    const u8 s[] = {
        0xc6, 0x58, 0x7e, 0xcc, 0xd5, 0x8e, 0xb4, 0x81,
        0x3c, 0x44, 0x85, 0x44, 0x22, 0x4d, 0x71, 0xe9,
        0xe7, 0xeb, 0xde, 0x80, 0x08, 0x9b, 0x7e, 0x26,
        0x04, 0x0c, 0x15, 0x6f, 0xf4, 0x6b, 0x73, 0x06
    };
    const u8 h[] = {
        0xf8, 0xde, 0x03, 0xb3, 0x39, 0x58, 0xc5, 0xa7,
        0x27, 0xf0, 0xf1, 0x11, 0xd9, 0xd1, 0x4f, 0x9e,
        0x27, 0xcf, 0xc0, 0x3a, 0xa7, 0xca, 0xb6, 0x4b,
        0x86, 0x5e, 0x96, 0xbb, 0xa5, 0x12, 0xf2, 0x0c
    };
    const u8 encoded_input_point[] = {
        0xe5, 0xda, 0xda, 0x3a, 0x00, 0x37, 0xb1, 0x8e,
        0x0c, 0xf7, 0x06, 0xf1, 0x16, 0x0c, 0x12, 0x81,
        0x40, 0xe3, 0x31, 0x85, 0xc0, 0xa5, 0x71, 0x5a,
        0x21, 0x78, 0x7c, 0xec, 0xab, 0x1a, 0x3e, 0xbf
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x4c, 0x3e, 0x54, 0x40, 0xdf, 0x21, 0x42, 0x40,
        0xbf, 0x87, 0xbe, 0x4a, 0x58, 0xa2, 0x2e, 0xa9,
        0x44, 0x3f, 0x5a, 0xcb, 0x0c, 0xc5, 0xe4, 0x02,
        0xed, 0xeb, 0xd9, 0x84, 0x80, 0x9d, 0xa9, 0x2a
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs24_ProduceCorrectResult) {

    const u8 s[] = {
        0xc8, 0x09, 0x67, 0xff, 0xe1, 0xb6, 0x2d, 0x9a,
        0x93, 0x65, 0x1f, 0xcb, 0x32, 0x44, 0x1d, 0xd7,
        0x7e, 0x92, 0xe1, 0xf9, 0x2d, 0x92, 0x74, 0xa3,
        0x22, 0x77, 0x4d, 0x01, 0x8e, 0xdf, 0xea, 0x0a
    };
    const u8 h[] = {
        0x28, 0xff, 0x3c, 0xc6, 0xb6, 0x32, 0xae, 0x98,
        0xf6, 0xed, 0x56, 0xe9, 0x44, 0xaa, 0x8e, 0x67,
        0x68, 0xb8, 0xb0, 0x86, 0x5b, 0xe0, 0xf0, 0xe9,
        0xc8, 0xd0, 0x6e, 0xf4, 0x8e, 0x3f, 0xf0, 0x09
    };
    const u8 encoded_input_point[] = {
        0xd3, 0x49, 0x3f, 0x71, 0x13, 0x7f, 0xbc, 0xd0,
        0xd7, 0x1c, 0xfe, 0x49, 0x6b, 0x0b, 0x18, 0xa1,
        0x52, 0x3a, 0x53, 0x03, 0x77, 0x55, 0x46, 0x85,
        0xeb, 0xc5, 0xf0, 0x44, 0x23, 0xff, 0xfd, 0x59
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x7d, 0x1c, 0x50, 0x6f, 0x29, 0x2a, 0xcf, 0xc7,
        0x33, 0xe4, 0xbe, 0x44, 0x2a, 0x16, 0x7c, 0xfe,
        0xce, 0xf4, 0x3a, 0x29, 0xeb, 0x9e, 0x39, 0x43,
        0x08, 0xa6, 0x2a, 0xc4, 0xf5, 0xb8, 0xcb, 0xfc
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs25_ProduceCorrectResult) {

    const u8 s[] = {
        0x2d, 0x84, 0x33, 0x66, 0x3a, 0xdf, 0x65, 0x87,
        0xfd, 0x8b, 0x43, 0xd7, 0x21, 0x76, 0x47, 0x67,
        0x1a, 0x2b, 0x83, 0x52, 0xae, 0x55, 0xea, 0x29,
        0x8b, 0x4e, 0x8f, 0xda, 0xa6, 0xda, 0xdd, 0x0d
    };
    const u8 h[] = {
        0x90, 0x43, 0xa0, 0xc0, 0x1f, 0xe8, 0x02, 0x80,
        0x4a, 0xba, 0x0d, 0xdf, 0x3b, 0xaf, 0xcb, 0x28,
        0x7c, 0x15, 0xfc, 0xb0, 0x25, 0xf4, 0x52, 0x9e,
        0xbe, 0xc2, 0x49, 0x8a, 0x20, 0xe0, 0xb7, 0x03
    };
    const u8 encoded_input_point[] = {
        0xe8, 0x92, 0x12, 0xca, 0x58, 0x5d, 0x30, 0x24,
        0x3d, 0x01, 0xab, 0xd6, 0xfd, 0xe8, 0x24, 0x32,
        0xa2, 0x9d, 0xd2, 0xb1, 0x53, 0x90, 0x55, 0x2f,
        0xa7, 0x90, 0x78, 0x07, 0x09, 0xbc, 0x10, 0x36
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x1b, 0xfd, 0x60, 0x72, 0x3b, 0xe3, 0x28, 0xa6,
        0xa0, 0x9d, 0x94, 0xae, 0x56, 0x9a, 0x7e, 0x1b,
        0xfc, 0xc8, 0x16, 0xaa, 0x50, 0xcc, 0xf8, 0x87,
        0x9b, 0xec, 0xb3, 0x39, 0xc3, 0x1c, 0xb5, 0x5b
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs26_ProduceCorrectResult) {

    const u8 s[] = {
        0x72, 0x1d, 0xc3, 0x0b, 0x05, 0x4b, 0xab, 0xb0,
        0xbb, 0x30, 0xa6, 0x08, 0x09, 0x53, 0x96, 0x7e,
        0x80, 0x7c, 0xfc, 0x1b, 0x0c, 0xdc, 0x0e, 0x5d,
        0xa3, 0xc8, 0x43, 0x8a, 0x89, 0x15, 0x49, 0x07
    };
    const u8 h[] = {
        0x04, 0x54, 0x34, 0xb9, 0x6a, 0x33, 0xcd, 0xcd,
        0xfd, 0x19, 0x99, 0xd5, 0xc4, 0x65, 0xc4, 0xa2,
        0x2b, 0x8b, 0x10, 0xc5, 0xf5, 0xe7, 0xa7, 0x6f,
        0x42, 0x09, 0x11, 0x2e, 0x21, 0x52, 0x89, 0x01
    };
    const u8 encoded_input_point[] = {
        0x2d, 0xd9, 0xd4, 0xba, 0x5d, 0x45, 0x38, 0x10,
        0xfa, 0xd2, 0x1c, 0x4d, 0xef, 0x46, 0x79, 0xa6,
        0xe5, 0xf3, 0x0e, 0x59, 0x1b, 0x15, 0xba, 0x3f,
        0x8a, 0x01, 0xbd, 0xe5, 0x1b, 0xd9, 0xb0, 0x01
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x2f, 0x31, 0x48, 0xaf, 0xa7, 0x0f, 0x25, 0x2b,
        0x0b, 0x5e, 0xf7, 0x52, 0x26, 0x94, 0x6b, 0xbc,
        0xf8, 0x95, 0x2c, 0x89, 0x72, 0x27, 0xa0, 0x74,
        0xbf, 0x2a, 0x6f, 0x94, 0x03, 0x87, 0x46, 0x22
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs27_ProduceCorrectResult) {

    const u8 s[] = {
        0x53, 0xc9, 0xc0, 0x23, 0xd8, 0x52, 0x19, 0x83,
        0xe9, 0xe2, 0x09, 0x5f, 0x2d, 0xf7, 0xc9, 0x68,
        0x01, 0x5d, 0x9c, 0x08, 0xa4, 0x08, 0x8e, 0xae,
        0x8a, 0x08, 0x29, 0xa6, 0x3a, 0x3a, 0x55, 0x00
    };
    const u8 h[] = {
        0xf5, 0xad, 0xce, 0x6d, 0xcd, 0x8b, 0x57, 0x54,
        0x52, 0x02, 0x7c, 0x7d, 0xd7, 0xbb, 0xfc, 0x4e,
        0x0e, 0x08, 0xf3, 0x2b, 0x6e, 0x56, 0x6c, 0x02,
        0x0e, 0xef, 0xea, 0x60, 0x27, 0xe0, 0x37, 0x01
    };
    const u8 encoded_input_point[] = {
        0x8a, 0x2e, 0x6a, 0x62, 0x9f, 0x01, 0xcc, 0x39,
        0xeb, 0xe4, 0x8a, 0xc1, 0x28, 0xc1, 0x5b, 0x6c,
        0x4e, 0x2e, 0xf7, 0x5e, 0x85, 0x10, 0x1a, 0x37,
        0xfa, 0x5e, 0xf4, 0xce, 0x79, 0xe9, 0x86, 0x32
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xa3, 0x73, 0x61, 0x21, 0xaa, 0x5d, 0x29, 0x89,
        0x25, 0x4d, 0x92, 0x49, 0xfe, 0x2c, 0x28, 0x93,
        0xbd, 0x2e, 0x9e, 0x0c, 0x12, 0xe4, 0x66, 0xfb,
        0xe9, 0x46, 0xb2, 0xb8, 0x69, 0x0f, 0x37, 0xbc
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs28_ProduceCorrectResult) {

    const u8 s[] = {
        0x61, 0x52, 0xef, 0x2d, 0x81, 0xae, 0x92, 0x30,
        0xba, 0x11, 0x1b, 0xef, 0x68, 0xe2, 0x03, 0xbb,
        0x1c, 0x43, 0xb7, 0x03, 0x31, 0xbe, 0x05, 0x4a,
        0x97, 0x15, 0xdf, 0x15, 0x3b, 0xea, 0x62, 0x03
    };
    const u8 h[] = {
        0x20, 0x6f, 0x68, 0x26, 0xc6, 0xb3, 0x1e, 0xf6,
        0x61, 0x3f, 0x7d, 0x63, 0x3d, 0x62, 0x6e, 0x80,
        0xd8, 0xdb, 0x3b, 0x70, 0x8c, 0xb6, 0x5f, 0x29,
        0x72, 0xc9, 0x2c, 0x4a, 0x70, 0x6b, 0x40, 0x00
    };
    const u8 encoded_input_point[] = {
        0x31, 0x4a, 0x84, 0xb9, 0xd0, 0x1f, 0xdb, 0x8d,
        0xae, 0x45, 0x09, 0x26, 0x5e, 0xb4, 0x63, 0x3d,
        0x9a, 0x0a, 0x44, 0x8f, 0x38, 0x14, 0xab, 0x18,
        0xee, 0x1e, 0x50, 0xb5, 0xe3, 0xf3, 0x8e, 0x00
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xfa, 0x9a, 0xbf, 0x68, 0xeb, 0xeb, 0x01, 0xce,
        0xc8, 0x5f, 0xd7, 0x0d, 0x0e, 0x5a, 0xef, 0xb7,
        0xbd, 0x6d, 0x98, 0xd3, 0x19, 0x71, 0x39, 0x17,
        0x20, 0x90, 0xd6, 0x27, 0xe6, 0x85, 0x4a, 0x2f
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs29_ProduceCorrectResult) {

    const u8 s[] = {
        0x70, 0x4d, 0xf4, 0x41, 0x94, 0xda, 0xb6, 0x89,
        0xdd, 0x8c, 0xcf, 0xe0, 0xe0, 0x82, 0xec, 0xee,
        0x54, 0xcf, 0x6a, 0x4d, 0x8f, 0xf4, 0x03, 0x0e,
        0xcb, 0x74, 0xee, 0x80, 0xe8, 0x41, 0xd4, 0x04
    };
    const u8 h[] = {
        0x11, 0x5c, 0x1f, 0x86, 0x20, 0x4a, 0x33, 0xad,
        0x2d, 0x37, 0xd3, 0x7b, 0x65, 0x7c, 0xa2, 0xd3,
        0x7d, 0x14, 0x92, 0x60, 0x7d, 0x10, 0xf7, 0x64,
        0x4d, 0xa1, 0xff, 0x2d, 0x9e, 0x00, 0x58, 0x02
    };
    const u8 encoded_input_point[] = {
        0x08, 0xfc, 0x37, 0xa2, 0x25, 0xd7, 0xba, 0xd4,
        0x86, 0x3b, 0x1c, 0x53, 0x34, 0x14, 0xd3, 0x1d,
        0xc1, 0x27, 0x5b, 0x98, 0xb5, 0x85, 0x7f, 0x5b,
        0x10, 0x2f, 0xa3, 0x21, 0x4f, 0x70, 0x16, 0xc6
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x2e, 0xd0, 0xe1, 0x4e, 0x55, 0xb8, 0x60, 0x17,
        0x6e, 0xdf, 0xd5, 0xcd, 0xbe, 0xca, 0xec, 0x90,
        0xab, 0x8b, 0x1b, 0xb3, 0xb8, 0x47, 0xeb, 0x8c,
        0xd3, 0x1f, 0x14, 0xaf, 0xca, 0x66, 0x7c, 0xc4
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs30_ProduceCorrectResult) {

    const u8 s[] = {
        0x8f, 0x7b, 0xe3, 0x5b, 0xf0, 0x1a, 0x5d, 0x4b,
        0x5d, 0xb2, 0x83, 0x50, 0xc6, 0xc0, 0x94, 0x1c,
        0xb2, 0x00, 0x12, 0x64, 0x66, 0x5c, 0xc5, 0x98,
        0x02, 0x81, 0xcd, 0x27, 0x72, 0x1a, 0xeb, 0x0b
    };
    const u8 h[] = {
        0xcc, 0xc9, 0xdc, 0xe9, 0xe2, 0x8c, 0xb6, 0x2e,
        0x1c, 0xa4, 0x41, 0xcc, 0x62, 0x71, 0x4a, 0xbc,
        0x7b, 0xbf, 0x10, 0x4f, 0xd7, 0x3b, 0x6c, 0x4c,
        0x8e, 0x26, 0xe8, 0x30, 0x2c, 0x1f, 0x53, 0x0f
    };
    const u8 encoded_input_point[] = {
        0x68, 0xc8, 0xee, 0x3e, 0xf1, 0xfc, 0xeb, 0x29,
        0x70, 0x21, 0x15, 0x8f, 0x56, 0x35, 0x29, 0xae,
        0x23, 0xa1, 0xba, 0x91, 0x09, 0x45, 0x60, 0x6c,
        0x94, 0xf4, 0x56, 0x45, 0x71, 0xa2, 0xde, 0x65
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x6f, 0x80, 0xb9, 0x97, 0x31, 0x4a, 0x48, 0x49,
        0x99, 0x04, 0xf3, 0x56, 0xea, 0x0f, 0x76, 0xe5,
        0x68, 0x73, 0x59, 0x11, 0xa5, 0x5e, 0xef, 0x02,
        0x38, 0x4e, 0x73, 0xa9, 0x49, 0x78, 0x7f, 0xda
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs31_ProduceCorrectResult) {

    const u8 s[] = {
        0x49, 0x4d, 0x0b, 0xf0, 0xbd, 0x38, 0xa9, 0x49,
        0xb8, 0x63, 0xbf, 0xc7, 0x1e, 0x9b, 0x10, 0xb7,
        0xf8, 0x59, 0x0f, 0xe8, 0x13, 0xcb, 0x63, 0x16,
        0x72, 0x5e, 0x67, 0xf3, 0x60, 0x41, 0xd4, 0x05
    };
    const u8 h[] = {
        0x2b, 0xc8, 0x1c, 0x1f, 0x04, 0xf7, 0xaa, 0xc5,
        0x64, 0x32, 0x14, 0xd5, 0x90, 0x1c, 0x6c, 0x5e,
        0xbc, 0x38, 0xe3, 0x4e, 0x82, 0x8f, 0x5a, 0x56,
        0xde, 0x01, 0xe8, 0x2e, 0x0a, 0x94, 0xd2, 0x08
    };
    const u8 encoded_input_point[] = {
        0xbe, 0xd5, 0xfd, 0x70, 0x78, 0x09, 0x7c, 0x1f,
        0x3c, 0xd8, 0xe9, 0x0a, 0xb0, 0x27, 0xf4, 0x93,
        0x90, 0x19, 0xaf, 0x73, 0xb7, 0xb0, 0x5a, 0xd2,
        0x6c, 0x15, 0x9b, 0x34, 0x03, 0x06, 0x8c, 0xdb
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x57, 0x88, 0x1e, 0x07, 0xec, 0x54, 0x9b, 0x48,
        0xe5, 0xd2, 0xff, 0xc8, 0x19, 0xd1, 0x27, 0x30,
        0xa1, 0xa2, 0xfe, 0xc4, 0x64, 0x92, 0xf9, 0x7c,
        0x79, 0x5b, 0x10, 0xab, 0x56, 0xf0, 0x3e, 0x48
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs32_ProduceCorrectResult) {

    const u8 s[] = {
        0x6b, 0x2e, 0x1b, 0xef, 0x5b, 0xcb, 0x10, 0xde,
        0xd0, 0x0e, 0x23, 0xe7, 0x10, 0x57, 0x94, 0xc6,
        0x7e, 0x1b, 0xb5, 0xdb, 0x2d, 0xe7, 0x40, 0xd3,
        0x7e, 0xe5, 0x87, 0xdb, 0x39, 0x83, 0xa9, 0x0c
    };
    const u8 h[] = {
        0xe7, 0x96, 0x17, 0x41, 0x48, 0x39, 0x97, 0xfb,
        0xaa, 0x11, 0x7c, 0x88, 0x22, 0xa4, 0x8f, 0x62,
        0x59, 0x70, 0x0e, 0x3b, 0xd8, 0x9d, 0x65, 0xff,
        0xb5, 0xc3, 0x13, 0xc0, 0x0f, 0xc4, 0x9d, 0x09
    };
    const u8 encoded_input_point[] = {
        0xe2, 0x50, 0xd6, 0x3d, 0x77, 0xab, 0xdf, 0xf5,
        0xc0, 0x86, 0x92, 0x34, 0x83, 0xc1, 0x10, 0xee,
        0xfa, 0x0d, 0xe6, 0x3d, 0xe4, 0x31, 0xfd, 0xb5,
        0x6c, 0x58, 0xfb, 0x6d, 0x04, 0xd4, 0x7d, 0x0c
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x0d, 0x87, 0x82, 0x5f, 0x20, 0x2c, 0x31, 0x11,
        0x8d, 0x8c, 0x52, 0xb8, 0x9a, 0x52, 0x52, 0xb9,
        0x67, 0x3e, 0xbb, 0xbc, 0xc6, 0xa9, 0x6d, 0xc1,
        0xef, 0x22, 0xd5, 0x95, 0xad, 0xd1, 0x44, 0x4f
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs33_ProduceCorrectResult) {

    const u8 s[] = {
        0xae, 0x4d, 0x35, 0x02, 0xb7, 0x09, 0x84, 0x97,
        0x23, 0xd0, 0x88, 0x40, 0x5a, 0xe8, 0xab, 0x8d,
        0xd3, 0x5f, 0xf9, 0xe4, 0x7a, 0xea, 0xd1, 0x4a,
        0xc1, 0x6a, 0xce, 0xb9, 0x4c, 0x99, 0xec, 0x06
    };
    const u8 h[] = {
        0x84, 0x4e, 0x13, 0xec, 0x06, 0xc5, 0x82, 0xe4,
        0x72, 0xe0, 0xf8, 0xa1, 0x32, 0x14, 0xb5, 0x0d,
        0xc2, 0xb5, 0x1d, 0x32, 0xea, 0x1a, 0x28, 0x87,
        0x17, 0xe4, 0xe4, 0xf9, 0x96, 0x20, 0x78, 0x03
    };
    const u8 encoded_input_point[] = {
        0xf2, 0xf1, 0xac, 0x64, 0x95, 0xb6, 0x9d, 0xe2,
        0xdf, 0xf0, 0x20, 0x8a, 0x1c, 0x8c, 0x0f, 0x9b,
        0xf4, 0x1a, 0xfb, 0x6a, 0xd1, 0xbc, 0x79, 0xc1,
        0xd6, 0x46, 0xa3, 0x98, 0x98, 0x6e, 0x5d, 0x2a
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x84, 0x6e, 0x7a, 0x1e, 0x28, 0x92, 0xa2, 0x27,
        0xff, 0x8a, 0xb1, 0xee, 0x44, 0x8e, 0x2f, 0xb1,
        0x0d, 0xdb, 0x9a, 0xf9, 0xd2, 0xa7, 0xd9, 0xb2,
        0x24, 0x61, 0x26, 0xbc, 0xd3, 0xfb, 0xf7, 0x95
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs34_ProduceCorrectResult) {

    const u8 s[] = {
        0x6b, 0x0f, 0x65, 0x6a, 0x4b, 0xc5, 0x2b, 0x63,
        0xc4, 0x14, 0x9d, 0x49, 0x1e, 0xb2, 0x40, 0xce,
        0x9d, 0x9b, 0x10, 0x72, 0x61, 0x35, 0x5d, 0x2c,
        0x91, 0xb4, 0xe1, 0xbf, 0xcb, 0xa1, 0x48, 0x04
    };
    const u8 h[] = {
        0x80, 0x73, 0x19, 0x37, 0x1e, 0xad, 0x4c, 0x50,
        0x0e, 0x06, 0x86, 0x19, 0x7c, 0x66, 0x44, 0xfa,
        0x3b, 0x3c, 0x93, 0xc3, 0xfb, 0x00, 0xd0, 0x11,
        0x45, 0x60, 0xaa, 0x3b, 0x40, 0x16, 0x55, 0x0d
    };
    const u8 encoded_input_point[] = {
        0x3f, 0xd6, 0x06, 0x29, 0x8f, 0x85, 0xd8, 0x11,
        0x17, 0xd6, 0x85, 0x08, 0x0b, 0x25, 0x4d, 0x70,
        0x7f, 0x66, 0xd2, 0x03, 0xfe, 0xdc, 0xbf, 0x27,
        0xde, 0x23, 0xe6, 0x6d, 0xe0, 0x4c, 0xb8, 0x4b
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x0d, 0x98, 0x05, 0xa7, 0xe3, 0xcc, 0x17, 0x35,
        0x4c, 0x1c, 0x18, 0x2a, 0xc6, 0x67, 0x88, 0xca,
        0xce, 0x24, 0x85, 0xd9, 0xcf, 0x48, 0x7e, 0x05,
        0x88, 0xb4, 0xf5, 0x41, 0x65, 0xfe, 0xe9, 0x9b
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs35_ProduceCorrectResult) {

    const u8 s[] = {
        0xcd, 0xc8, 0x67, 0x93, 0xf0, 0x3e, 0xec, 0xb6,
        0x69, 0xac, 0x55, 0x57, 0xea, 0x27, 0x10, 0x6b,
        0xb2, 0x43, 0xa5, 0x1c, 0x64, 0xb3, 0xd2, 0x7f,
        0x9e, 0xd5, 0xe2, 0xae, 0xe7, 0x5c, 0xa4, 0x0c
    };
    const u8 h[] = {
        0x10, 0x1d, 0x1e, 0xca, 0x27, 0xed, 0xf5, 0xaf,
        0x02, 0x8e, 0xce, 0x87, 0x21, 0x68, 0x3e, 0x9a,
        0x9c, 0xff, 0xda, 0x53, 0xb6, 0x67, 0xb5, 0x07,
        0xe7, 0xa1, 0xb6, 0x15, 0x92, 0x04, 0x16, 0x04
    };
    const u8 encoded_input_point[] = {
        0x7f, 0xcf, 0x8e, 0xb2, 0xf1, 0xd9, 0x53, 0xa4,
        0x99, 0x1e, 0x5a, 0x63, 0x26, 0x2e, 0x8e, 0xe0,
        0x96, 0x35, 0x9b, 0xf7, 0xca, 0x12, 0x4f, 0x91,
        0x85, 0x5d, 0x5e, 0xe2, 0xc2, 0x68, 0x07, 0x0b
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x0e, 0x4a, 0x3d, 0x65, 0xd6, 0xbd, 0xb8, 0xc4,
        0x78, 0xc7, 0xf1, 0x6f, 0x5b, 0x49, 0xbe, 0x72,
        0xda, 0x3d, 0x6a, 0xa2, 0xda, 0xe5, 0x2f, 0x5d,
        0xf4, 0x8f, 0xf4, 0xa6, 0xcf, 0x99, 0x98, 0x82
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs36_ProduceCorrectResult) {

    const u8 s[] = {
        0xd9, 0x1c, 0x12, 0x14, 0xea, 0x58, 0x3a, 0x1e,
        0xfd, 0x0a, 0xd7, 0x15, 0x24, 0x01, 0xda, 0x05,
        0x8b, 0x49, 0x8e, 0x5d, 0xaf, 0x84, 0x5f, 0xe8,
        0x56, 0xd8, 0x4b, 0xfa, 0x8a, 0xba, 0xb1, 0x03
    };
    const u8 h[] = {
        0x2b, 0xd6, 0x32, 0x8e, 0x87, 0xf9, 0x86, 0x8e,
        0x72, 0x6e, 0x3c, 0x48, 0xac, 0x7d, 0x66, 0xe6,
        0xd7, 0x01, 0xbf, 0xa0, 0x63, 0xa9, 0x04, 0x57,
        0x25, 0xf1, 0xa0, 0x60, 0x2c, 0xb4, 0x2a, 0x09
    };
    const u8 encoded_input_point[] = {
        0x88, 0xf7, 0xc4, 0x1c, 0x4e, 0x92, 0x7d, 0x8d,
        0x88, 0xec, 0xc1, 0xdc, 0x50, 0xb1, 0x57, 0xc4,
        0xbc, 0x81, 0x9e, 0x6e, 0x14, 0xb0, 0x82, 0xf7,
        0x51, 0xbb, 0x0d, 0xb3, 0x19, 0xce, 0xfa, 0xfd
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xad, 0xe2, 0x85, 0x99, 0xf1, 0x97, 0x66, 0xf8,
        0x20, 0x66, 0xa4, 0x8b, 0xce, 0xad, 0x7d, 0x6c,
        0xba, 0x3c, 0x43, 0x47, 0x08, 0x3b, 0x83, 0x8e,
        0x20, 0x01, 0xd5, 0xb5, 0xa4, 0x95, 0x51, 0xd0
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs37_ProduceCorrectResult) {

    const u8 s[] = {
        0x28, 0x03, 0xea, 0xc5, 0x48, 0x04, 0x33, 0x61,
        0xa7, 0x49, 0x42, 0xbf, 0xd9, 0x44, 0xc3, 0xee,
        0x0c, 0xc2, 0x6f, 0x6c, 0xab, 0x33, 0x91, 0x22,
        0xc0, 0x30, 0xbd, 0x7a, 0xe3, 0x22, 0xff, 0x0a
    };
    const u8 h[] = {
        0x3d, 0xfc, 0xe2, 0x37, 0x13, 0xdc, 0xaf, 0x1a,
        0xdb, 0x3a, 0xe4, 0xfe, 0x11, 0xe2, 0x12, 0x8d,
        0x88, 0xb3, 0xdf, 0x85, 0x15, 0xe7, 0xec, 0xbd,
        0xdb, 0xfa, 0xf0, 0x61, 0x82, 0x62, 0x27, 0x0b
    };
    const u8 encoded_input_point[] = {
        0x1b, 0xe2, 0x34, 0x77, 0xa2, 0x42, 0xf6, 0x07,
        0xdf, 0xd3, 0xfd, 0xee, 0x2e, 0x28, 0xb6, 0x78,
        0xbe, 0xd9, 0x85, 0x54, 0x7a, 0x9e, 0x85, 0xfd,
        0xf9, 0x6f, 0xad, 0x89, 0x2f, 0x9b, 0x2d, 0x2f
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x9a, 0x9e, 0x30, 0xee, 0x0e, 0x09, 0x81, 0x84,
        0x64, 0xf4, 0xca, 0x81, 0xab, 0x5d, 0xd4, 0x2d,
        0x7a, 0x0c, 0x42, 0x8f, 0xbb, 0xf1, 0xd7, 0x7f,
        0xed, 0x5a, 0x5e, 0x5e, 0x40, 0x4a, 0x12, 0x6a
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs38_ProduceCorrectResult) {

    const u8 s[] = {
        0x24, 0x5f, 0x7d, 0x59, 0x52, 0x38, 0x59, 0x88,
        0x5b, 0x82, 0xad, 0x51, 0x53, 0x64, 0xb5, 0x13,
        0x7b, 0xf4, 0x53, 0x91, 0xca, 0x7f, 0x45, 0xc2,
        0x72, 0x28, 0x9e, 0x11, 0x9b, 0x66, 0xb6, 0x0b
    };
    const u8 h[] = {
        0x41, 0xc0, 0x3a, 0x49, 0xb8, 0x19, 0xca, 0x7d,
        0x32, 0x2d, 0xc3, 0x7c, 0x21, 0x62, 0xb2, 0xb7,
        0xea, 0x72, 0x14, 0x3e, 0xe3, 0x60, 0x6f, 0x14,
        0x21, 0x0e, 0x30, 0x44, 0xdd, 0x7f, 0x97, 0x0b
    };
    const u8 encoded_input_point[] = {
        0x7b, 0x30, 0x18, 0x39, 0x0b, 0x27, 0xc2, 0x33,
        0x27, 0x82, 0x4d, 0x11, 0xc2, 0x1f, 0x4b, 0x85,
        0x2b, 0x30, 0x77, 0x52, 0x42, 0x2c, 0x3f, 0x17,
        0x98, 0x44, 0xf5, 0x89, 0xef, 0x72, 0x59, 0xd3
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x0a, 0x40, 0xae, 0x40, 0x90, 0x76, 0xaa, 0xdd,
        0x1e, 0x30, 0x9e, 0x4d, 0xb6, 0x24, 0xdd, 0x91,
        0xdf, 0xaf, 0x82, 0xb5, 0x50, 0x15, 0xc4, 0x89,
        0x65, 0x6a, 0x13, 0x37, 0x8b, 0xe9, 0x7d, 0xf2
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs39_ProduceCorrectResult) {

    const u8 s[] = {
        0x91, 0xdb, 0xac, 0xd9, 0x42, 0xc0, 0x00, 0xb4,
        0x0e, 0xe4, 0x0c, 0x68, 0x12, 0x45, 0x87, 0xd0,
        0x6c, 0x24, 0xc6, 0x79, 0x74, 0xd0, 0xb1, 0xe1,
        0x5b, 0x77, 0xf3, 0x6d, 0xe8, 0x9a, 0xc2, 0x01
    };
    const u8 h[] = {
        0x2a, 0xc7, 0xb5, 0x7b, 0xed, 0xb5, 0x6c, 0x36,
        0x8a, 0x1e, 0xdf, 0x1b, 0xaa, 0x9f, 0x41, 0x39,
        0x58, 0x37, 0xab, 0xf2, 0x1f, 0xff, 0x33, 0xde,
        0xcf, 0x65, 0x7c, 0x17, 0x5e, 0xee, 0x3b, 0x0a
    };
    const u8 encoded_input_point[] = {
        0x93, 0xec, 0xe5, 0x92, 0xa0, 0x99, 0x32, 0xb4,
        0xfb, 0xdc, 0x3d, 0x04, 0x7f, 0x59, 0x0a, 0xca,
        0x17, 0xcd, 0xc1, 0xe0, 0x78, 0xfa, 0xeb, 0x52,
        0xf0, 0x6a, 0xc4, 0xc5, 0x14, 0xa9, 0xd6, 0xea
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x82, 0x85, 0x40, 0xf5, 0x9f, 0xc0, 0x5c, 0x60,
        0x17, 0xd6, 0x19, 0x33, 0x98, 0xf8, 0x95, 0x0a,
        0xa2, 0x79, 0x17, 0xa3, 0xca, 0xc5, 0xf0, 0x8a,
        0xa9, 0x14, 0xa3, 0xaf, 0xe9, 0x9e, 0x30, 0x24
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs40_ProduceCorrectResult) {

    const u8 s[] = {
        0xbb, 0xf3, 0x4e, 0xdf, 0x9b, 0xf3, 0x8d, 0xf4,
        0x7e, 0x73, 0x0a, 0xcd, 0x12, 0x07, 0x0d, 0xdc,
        0xe1, 0x1b, 0x1d, 0xf3, 0x41, 0x19, 0x0f, 0x8b,
        0x93, 0x57, 0xbb, 0x25, 0x99, 0x08, 0x9f, 0x05
    };
    const u8 h[] = {
        0xa7, 0x33, 0xe8, 0x2d, 0x2b, 0xb3, 0x27, 0xdc,
        0xaf, 0xd6, 0x77, 0xae, 0x29, 0xaa, 0x62, 0x30,
        0x45, 0xe1, 0x19, 0xed, 0x3f, 0x8b, 0x87, 0x63,
        0xaf, 0xc9, 0x7d, 0x0f, 0xcc, 0xa8, 0xf9, 0x0d
    };
    const u8 encoded_input_point[] = {
        0x3f, 0x8f, 0x48, 0x85, 0xf4, 0xdd, 0xb3, 0x51,
        0xf8, 0x62, 0x01, 0x6d, 0x61, 0xa1, 0x81, 0x44,
        0x7f, 0xce, 0x43, 0x5b, 0xfb, 0x9c, 0xc7, 0x73,
        0x53, 0x14, 0x73, 0x87, 0x3e, 0x00, 0xe7, 0x5c
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x91, 0x19, 0x10, 0x37, 0x7e, 0xea, 0x6b, 0x05,
        0xbf, 0xb8, 0xcf, 0x3a, 0x35, 0x92, 0x11, 0x2d,
        0xbc, 0xbc, 0x82, 0xbc, 0xc9, 0xc4, 0x9c, 0x58,
        0x4f, 0xbf, 0xf9, 0x99, 0x16, 0x35, 0x7a, 0x7e
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs41_ProduceCorrectResult) {

    const u8 s[] = {
        0x4e, 0x73, 0x24, 0x35, 0x68, 0xd3, 0xfe, 0xcc,
        0xbd, 0x3b, 0x3b, 0xe0, 0xcf, 0xdb, 0xc9, 0x8a,
        0x31, 0x37, 0xba, 0x10, 0xf0, 0x37, 0x0c, 0xf7,
        0x10, 0x10, 0xa1, 0x21, 0xc8, 0x76, 0x65, 0x02
    };
    const u8 h[] = {
        0x0f, 0xf0, 0x7b, 0xf4, 0x3d, 0xeb, 0x27, 0xd2,
        0x10, 0x5f, 0xf5, 0x24, 0x14, 0x5b, 0xbc, 0x28,
        0xc4, 0x99, 0x8f, 0x34, 0x40, 0x68, 0x9a, 0x5b,
        0x8d, 0x86, 0xcb, 0x35, 0xaa, 0x6e, 0xb8, 0x08
    };
    const u8 encoded_input_point[] = {
        0xf4, 0x49, 0x20, 0xfc, 0x22, 0xe6, 0xec, 0x81,
        0xf5, 0x0d, 0xf2, 0xb3, 0xd7, 0x64, 0xcd, 0x70,
        0x70, 0x45, 0xe6, 0x22, 0x5b, 0x87, 0x58, 0x00,
        0x7b, 0x0c, 0xb7, 0xce, 0xaa, 0x7b, 0x59, 0xff
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x08, 0x93, 0xb0, 0x60, 0xb0, 0xf0, 0x17, 0xb2,
        0x93, 0xc3, 0xb9, 0xbb, 0x39, 0x5c, 0x2e, 0xed,
        0x91, 0xb1, 0xc7, 0xb1, 0x84, 0xcf, 0xb2, 0xe4,
        0xee, 0x21, 0xa7, 0x67, 0xe0, 0xa5, 0xd8, 0x03
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs42_ProduceCorrectResult) {

    const u8 s[] = {
        0x23, 0xc0, 0xf0, 0xe2, 0x1c, 0xa9, 0x9d, 0x75,
        0x06, 0x7a, 0x9e, 0xce, 0xf8, 0xbd, 0x2e, 0x11,
        0x5a, 0x66, 0xc6, 0x55, 0xb4, 0x7d, 0xf1, 0x98,
        0xc4, 0x37, 0x79, 0x0b, 0xdf, 0xb7, 0x79, 0x0a
    };
    const u8 h[] = {
        0xd8, 0x50, 0xb4, 0x7a, 0x7f, 0x21, 0x95, 0xc7,
        0xd1, 0xff, 0xe7, 0xe0, 0xa1, 0x9c, 0x98, 0xd8,
        0x62, 0xed, 0x33, 0x5c, 0x3a, 0xe4, 0xcb, 0xec,
        0x13, 0xab, 0xfb, 0x79, 0xa7, 0xe0, 0xe9, 0x0a
    };
    const u8 encoded_input_point[] = {
        0x82, 0xf4, 0x0b, 0xb0, 0xce, 0xfd, 0xb2, 0xbc,
        0x5e, 0x9a, 0x39, 0x37, 0xbc, 0x72, 0x4e, 0xbb,
        0x93, 0xac, 0x46, 0x75, 0x94, 0x4b, 0x52, 0x83,
        0x77, 0x1c, 0x9d, 0x40, 0x79, 0x3c, 0x75, 0x1d
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x54, 0xc8, 0xef, 0xda, 0xbc, 0x57, 0xc3, 0x85,
        0xd3, 0xcb, 0x95, 0xd1, 0x2b, 0x2b, 0x1b, 0x4d,
        0x6d, 0x39, 0xe5, 0x71, 0xc4, 0x58, 0x82, 0x4d,
        0x4e, 0x21, 0xad, 0x3a, 0xf4, 0x4d, 0xb3, 0x22
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs43_ProduceCorrectResult) {

    const u8 s[] = {
        0x9b, 0x37, 0x5e, 0xd1, 0x02, 0x68, 0xc7, 0x27,
        0x38, 0xd2, 0x58, 0x05, 0xcf, 0xb5, 0x26, 0x8a,
        0x91, 0xcb, 0x5e, 0x5c, 0xb6, 0x6a, 0x81, 0xa2,
        0xf6, 0x2a, 0xb9, 0xdc, 0x9f, 0x02, 0x2f, 0x09
    };
    const u8 h[] = {
        0x93, 0x5e, 0x49, 0x7b, 0xe3, 0x99, 0xa3, 0x9d,
        0x13, 0xa6, 0xb4, 0x7f, 0xcb, 0xa9, 0x0a, 0xa1,
        0xf6, 0xdd, 0x43, 0xb1, 0x1c, 0x6c, 0x65, 0x73,
        0x63, 0x80, 0x25, 0x06, 0x1f, 0x48, 0xf8, 0x0c
    };
    const u8 encoded_input_point[] = {
        0xd0, 0xbe, 0xcc, 0xaa, 0xdb, 0xf1, 0xa1, 0x53,
        0xc7, 0x88, 0x33, 0x9e, 0x33, 0x26, 0x12, 0x51,
        0xc5, 0x1c, 0x0c, 0xe2, 0xbb, 0xc2, 0xd1, 0xc4,
        0x54, 0xa9, 0x62, 0x78, 0x73, 0x99, 0x89, 0xa3
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x4c, 0x70, 0x15, 0xed, 0x71, 0x30, 0xea, 0x0d,
        0xb5, 0xe4, 0x95, 0x96, 0x05, 0x64, 0xfb, 0x64,
        0x94, 0xae, 0xc6, 0xdb, 0xcf, 0x21, 0x5e, 0x31,
        0x60, 0xc2, 0x2d, 0x7d, 0x02, 0x7c, 0x4b, 0x2c
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs44_ProduceCorrectResult) {

    const u8 s[] = {
        0x68, 0x36, 0x85, 0x84, 0xe2, 0x67, 0x03, 0x5a,
        0x4f, 0xcc, 0xb0, 0x86, 0xe2, 0x26, 0x55, 0x25,
        0xa5, 0xfc, 0xde, 0x00, 0x15, 0xbc, 0x9c, 0xf9,
        0xd1, 0x49, 0x6b, 0x74, 0xc4, 0x8f, 0x49, 0x0e
    };
    const u8 h[] = {
        0xc3, 0x61, 0x48, 0xe1, 0xa0, 0x0f, 0x28, 0x12,
        0x57, 0xb6, 0xe6, 0xf5, 0x56, 0xd3, 0x4b, 0x20,
        0xe1, 0xaf, 0xa1, 0x07, 0x01, 0x35, 0xdf, 0x82,
        0x06, 0xfe, 0x24, 0x49, 0x51, 0x1c, 0xdc, 0x0a
    };
    const u8 encoded_input_point[] = {
        0x14, 0x48, 0xce, 0x26, 0x8e, 0x0f, 0x9e, 0x45,
        0x07, 0xba, 0x41, 0x0e, 0xe0, 0x58, 0xdc, 0x17,
        0x84, 0xda, 0x51, 0x2b, 0xa4, 0x60, 0xf4, 0xf7,
        0x2c, 0x52, 0x37, 0xf2, 0xda, 0xfe, 0xd6, 0x71
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xb4, 0xb1, 0x63, 0x67, 0x12, 0x60, 0x1b, 0x7b,
        0x9c, 0x18, 0x3a, 0xbd, 0xf2, 0xc2, 0xc6, 0x8d,
        0xb1, 0x67, 0x63, 0xd6, 0xa1, 0x69, 0xad, 0x09,
        0xff, 0x24, 0x42, 0x1f, 0x2e, 0x77, 0x6d, 0xfd
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs45_ProduceCorrectResult) {

    const u8 s[] = {
        0x26, 0xff, 0x2f, 0x36, 0x4e, 0x7e, 0x68, 0xbb,
        0x70, 0x01, 0x8a, 0x29, 0x48, 0xe6, 0x7b, 0xe7,
        0x5e, 0x37, 0xf1, 0x3a, 0x93, 0x0f, 0x1d, 0xa0,
        0xbf, 0x51, 0xb7, 0x41, 0x4c, 0x0a, 0xf6, 0x0d
    };
    const u8 h[] = {
        0x26, 0x2b, 0x57, 0xd1, 0x76, 0x80, 0x87, 0xff,
        0xef, 0x53, 0x9e, 0x43, 0xaa, 0x5a, 0xa2, 0x39,
        0xf2, 0xe4, 0x00, 0x72, 0xa8, 0xaa, 0x5d, 0xe3,
        0x24, 0x73, 0x1c, 0x42, 0xb2, 0x6d, 0xba, 0x02
    };
    const u8 encoded_input_point[] = {
        0x17, 0xb1, 0xb5, 0xad, 0x7e, 0x84, 0xd1, 0xc3,
        0x85, 0xa0, 0x12, 0x36, 0xb5, 0x68, 0x31, 0xca,
        0x49, 0x8b, 0x30, 0x3d, 0x3d, 0x11, 0x29, 0x98,
        0xd7, 0x5c, 0xbb, 0xae, 0x28, 0x64, 0x9f, 0x18
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x9b, 0x96, 0xa9, 0x25, 0xba, 0x31, 0x2e, 0x4d,
        0xbd, 0xed, 0xc8, 0x10, 0x0c, 0x59, 0x87, 0xc3,
        0x2a, 0x83, 0x8a, 0x21, 0x5a, 0xf4, 0xa1, 0xb9,
        0x83, 0x75, 0x01, 0x5b, 0xdd, 0x34, 0xb5, 0x80
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs46_ProduceCorrectResult) {

    const u8 s[] = {
        0x03, 0x43, 0x6d, 0x00, 0x7c, 0x79, 0xd8, 0x72,
        0xb9, 0x56, 0xea, 0x89, 0x81, 0x42, 0x1e, 0x6c,
        0x27, 0xe2, 0x9d, 0xee, 0xef, 0x39, 0x97, 0x73,
        0x28, 0xf0, 0xe6, 0x11, 0x93, 0x85, 0x67, 0x0b
    };
    const u8 h[] = {
        0x5e, 0x4c, 0xba, 0xe2, 0x87, 0xad, 0xe3, 0xe0,
        0xb4, 0x70, 0x76, 0x78, 0x52, 0x1d, 0xe1, 0x8e,
        0xf1, 0xde, 0x00, 0x5f, 0x64, 0x1b, 0xf2, 0xd7,
        0x1e, 0xd0, 0xa9, 0x06, 0xef, 0x46, 0x66, 0x0d
    };
    const u8 encoded_input_point[] = {
        0x2f, 0xa5, 0x29, 0xaf, 0x00, 0xfd, 0x36, 0x97,
        0xa3, 0x7e, 0xdf, 0xee, 0xbe, 0xce, 0xd9, 0x22,
        0xfc, 0xd5, 0x24, 0x50, 0x17, 0x42, 0xa9, 0x5a,
        0x5c, 0x1f, 0x7e, 0x04, 0x33, 0xcc, 0xef, 0x3c
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x9b, 0xa1, 0x7a, 0xf0, 0xee, 0xe6, 0xc2, 0x60,
        0x05, 0xde, 0xf4, 0xac, 0xbe, 0x79, 0x15, 0x79,
        0x7f, 0xe4, 0x34, 0x9d, 0xa6, 0x57, 0xa4, 0x33,
        0x4d, 0xd8, 0x44, 0x6d, 0x36, 0x1f, 0x04, 0xab
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs47_ProduceCorrectResult) {

    const u8 s[] = {
        0x1b, 0xcd, 0x15, 0xed, 0x41, 0x3e, 0xd3, 0xa0,
        0xfd, 0x11, 0xb0, 0xda, 0x66, 0xd7, 0xee, 0xb3,
        0x69, 0x91, 0xa4, 0xcd, 0x52, 0x92, 0xc0, 0x00,
        0x5a, 0xa8, 0x1d, 0xd4, 0x4a, 0x46, 0x0e, 0x0f
    };
    const u8 h[] = {
        0x22, 0x66, 0x84, 0x7e, 0xcc, 0x1c, 0x10, 0xef,
        0xaf, 0xdb, 0xc2, 0x03, 0x76, 0xab, 0x4f, 0x66,
        0x8c, 0x16, 0xd6, 0x24, 0x6d, 0x05, 0x82, 0x26,
        0x56, 0x5c, 0xf4, 0xab, 0xf9, 0x06, 0xfc, 0x0c
    };
    const u8 encoded_input_point[] = {
        0xe1, 0x23, 0xcf, 0xc5, 0x30, 0x48, 0xc2, 0xbd,
        0xac, 0xaa, 0x1e, 0xfc, 0x32, 0x87, 0x0d, 0x56,
        0x85, 0x79, 0x6b, 0xc4, 0xca, 0xe5, 0x86, 0xce,
        0xb4, 0xc9, 0x3a, 0xef, 0x9c, 0xb4, 0x74, 0xf7
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xa7, 0xec, 0x27, 0x3f, 0xbb, 0x8d, 0xe7, 0xc6,
        0xf3, 0xc6, 0xca, 0xae, 0x7c, 0x0b, 0x8c, 0x24,
        0x91, 0x95, 0xb1, 0x40, 0x1f, 0xa0, 0x42, 0xe1,
        0x34, 0x73, 0xf0, 0xcf, 0xec, 0xd6, 0x54, 0xc2
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs48_ProduceCorrectResult) {

    const u8 s[] = {
        0xa9, 0x9e, 0x86, 0x30, 0xc1, 0xb3, 0x57, 0x79,
        0x03, 0x66, 0x6c, 0x08, 0x64, 0x9a, 0x77, 0x49,
        0x8a, 0xcf, 0xc3, 0x2d, 0x58, 0xc9, 0x12, 0x59,
        0x95, 0x4e, 0x75, 0xf2, 0xc9, 0xf7, 0x73, 0x00
    };
    const u8 h[] = {
        0x34, 0x53, 0x80, 0x7b, 0xec, 0x8c, 0xb9, 0x90,
        0xd2, 0xbe, 0x31, 0xcf, 0x7b, 0xe0, 0xe6, 0xf0,
        0x7a, 0x29, 0x9a, 0xc2, 0x86, 0xff, 0x36, 0xad,
        0xaa, 0xa6, 0x70, 0xfd, 0x22, 0xc3, 0xe1, 0x05
    };
    const u8 encoded_input_point[] = {
        0xe8, 0x56, 0x80, 0x6f, 0xa8, 0x98, 0x8f, 0x1d,
        0xc2, 0x81, 0xff, 0xba, 0x27, 0xc4, 0xe2, 0x8b,
        0x4b, 0x85, 0x60, 0xe7, 0x29, 0x3d, 0xe0, 0x90,
        0xb6, 0x97, 0xf5, 0xa3, 0x48, 0xe0, 0x5e, 0x9a
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xc5, 0x7a, 0x5c, 0xad, 0x48, 0x47, 0x2d, 0x4e,
        0x5b, 0xf5, 0x67, 0x69, 0x36, 0x74, 0x1e, 0x61,
        0xaf, 0x4f, 0x30, 0x84, 0xe5, 0x9c, 0xd3, 0x7a,
        0x6f, 0x09, 0x6f, 0x73, 0xe8, 0xfc, 0xfe, 0x4e
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs49_ProduceCorrectResult) {

    const u8 s[] = {
        0xfe, 0xb2, 0x5f, 0x48, 0x44, 0xf8, 0xe9, 0x51,
        0x87, 0x7e, 0xbd, 0x3a, 0x2d, 0x4d, 0xde, 0xba,
        0xea, 0xd8, 0x9c, 0xed, 0x5c, 0x27, 0x24, 0xea,
        0x01, 0xd7, 0x8b, 0xc6, 0x4b, 0xd1, 0x93, 0x06
    };
    const u8 h[] = {
        0xf8, 0xf8, 0xf7, 0x31, 0xec, 0x25, 0x5c, 0x47,
        0xd4, 0x5c, 0x79, 0xfb, 0xa3, 0x1e, 0xd2, 0x65,
        0xff, 0x34, 0x11, 0x0f, 0x22, 0x25, 0xa8, 0x91,
        0x98, 0xcd, 0x68, 0x7f, 0x60, 0xfa, 0x99, 0x02
    };
    const u8 encoded_input_point[] = {
        0x7a, 0xe4, 0x62, 0xa5, 0x16, 0xcb, 0x0b, 0x8a,
        0xdd, 0xec, 0x71, 0x9e, 0xa1, 0x45, 0x4e, 0xf2,
        0xae, 0x14, 0xad, 0xc2, 0xdf, 0xa5, 0xbd, 0x83,
        0x46, 0xd9, 0x43, 0x0b, 0x6d, 0x6e, 0x04, 0xad
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x39, 0x96, 0xe2, 0xa4, 0x44, 0xa6, 0x0b, 0xf1,
        0x34, 0x4e, 0xf7, 0x67, 0x36, 0x7f, 0x26, 0xcf,
        0x49, 0x09, 0x3e, 0x3b, 0xdd, 0x63, 0xc5, 0xd1,
        0x1f, 0xc1, 0x42, 0xb5, 0x95, 0x72, 0x0b, 0xa2
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs50_ProduceCorrectResult) {

    const u8 s[] = {
        0x8c, 0xf8, 0x37, 0x91, 0x9e, 0xaf, 0x4c, 0x85,
        0xb8, 0x88, 0x58, 0x90, 0x3a, 0x85, 0xfa, 0xb9,
        0xf3, 0x67, 0x73, 0xf5, 0x3d, 0xc9, 0xd6, 0xab,
        0x42, 0xc5, 0xc7, 0x34, 0xb7, 0x4b, 0xbd, 0x01
    };
    const u8 h[] = {
        0x75, 0x8f, 0x12, 0xc7, 0x29, 0xec, 0xe5, 0xb5,
        0xd2, 0x8d, 0x4c, 0x6a, 0x9f, 0xb9, 0xa0, 0x42,
        0x23, 0xe2, 0xad, 0xc6, 0xfa, 0x72, 0xa2, 0x7f,
        0x28, 0x5c, 0x0a, 0x7b, 0xf0, 0xa7, 0xb2, 0x08
    };
    const u8 encoded_input_point[] = {
        0xdb, 0x75, 0xf9, 0x3d, 0xfe, 0x53, 0xb2, 0x9b,
        0x31, 0xfa, 0x43, 0x61, 0xe5, 0x62, 0x1f, 0x6a,
        0xfb, 0xe7, 0x5c, 0x6a, 0xf5, 0xf2, 0x5a, 0x9d,
        0xbd, 0x73, 0xa8, 0xc9, 0xd3, 0x1e, 0x9a, 0x6f
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x16, 0x84, 0xcb, 0x9b, 0xd5, 0x85, 0x64, 0xdb,
        0x20, 0x4d, 0x26, 0xc8, 0xff, 0xc8, 0x59, 0xdd,
        0xce, 0xa0, 0x1c, 0x98, 0xed, 0x63, 0xf3, 0xa3,
        0x03, 0x94, 0xad, 0x02, 0x2d, 0x0e, 0x42, 0x22
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs51_ProduceCorrectResult) {

    const u8 s[] = {
        0xfa, 0x82, 0x01, 0xf5, 0xf0, 0xf8, 0x21, 0xe9,
        0x89, 0xee, 0x37, 0x3a, 0x6d, 0xa1, 0x46, 0xa8,
        0xf4, 0xe3, 0xf7, 0x8f, 0x3c, 0xb3, 0x8e, 0x5c,
        0xa2, 0x64, 0x5f, 0x3b, 0x11, 0x1b, 0x85, 0x07
    };
    const u8 h[] = {
        0x3a, 0x0c, 0x8c, 0x51, 0xb8, 0x31, 0x2d, 0x38,
        0x7a, 0xc6, 0x47, 0x6d, 0x26, 0xe7, 0x6a, 0x2c,
        0x15, 0xad, 0xdb, 0xf4, 0x16, 0x0f, 0x10, 0x41,
        0x56, 0xf1, 0x55, 0x26, 0xbe, 0x60, 0x46, 0x01
    };
    const u8 encoded_input_point[] = {
        0xa8, 0xd6, 0x63, 0xad, 0x65, 0xbe, 0xc7, 0xc7,
        0xf0, 0x29, 0x55, 0x73, 0x59, 0xba, 0x8f, 0x09,
        0x6b, 0x2e, 0xc5, 0x02, 0x3c, 0x77, 0xe2, 0xff,
        0x7f, 0xe6, 0xa9, 0x45, 0x76, 0x97, 0x29, 0xab
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xaf, 0xe3, 0x70, 0xbb, 0x35, 0xad, 0x7d, 0x64,
        0xcc, 0x3d, 0x27, 0x5b, 0x22, 0xfa, 0x49, 0xf0,
        0xb6, 0xd5, 0x26, 0x2b, 0x90, 0x72, 0xf7, 0xfb,
        0x68, 0x06, 0xa0, 0x23, 0x30, 0xf9, 0x8c, 0xd8
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs52_ProduceCorrectResult) {

    const u8 s[] = {
        0x64, 0xbc, 0x05, 0x0e, 0x30, 0xbd, 0xd9, 0xbc,
        0x51, 0x72, 0x7e, 0xb5, 0x69, 0xd2, 0xd4, 0x7d,
        0x77, 0x50, 0xe6, 0x63, 0x93, 0x21, 0x9a, 0xb8,
        0x37, 0x15, 0xd7, 0x35, 0x11, 0x02, 0xdc, 0x06
    };
    const u8 h[] = {
        0x56, 0x4c, 0x38, 0xf3, 0xcb, 0xdf, 0x6b, 0xd0,
        0x41, 0x38, 0x0c, 0x94, 0x06, 0x25, 0x0f, 0x72,
        0x5c, 0x4a, 0xea, 0x37, 0xcb, 0x4b, 0x36, 0x9c,
        0x8c, 0x27, 0x80, 0x8e, 0x90, 0xff, 0x37, 0x03
    };
    const u8 encoded_input_point[] = {
        0x8e, 0x4d, 0x8e, 0x07, 0x82, 0x57, 0xc2, 0x1d,
        0x87, 0x8d, 0x96, 0xa7, 0x29, 0x7b, 0x4b, 0xbf,
        0x86, 0x5f, 0x35, 0xf8, 0x2f, 0x78, 0x13, 0x05,
        0x3a, 0xd2, 0x84, 0xd4, 0xb2, 0x10, 0x5b, 0x1d
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x1d, 0x08, 0x76, 0xb7, 0x10, 0xed, 0x88, 0x48,
        0x73, 0x18, 0xd8, 0xe8, 0xa2, 0x32, 0xc6, 0x55,
        0x07, 0x16, 0xfc, 0xa7, 0x2a, 0xc1, 0x89, 0x20,
        0x0a, 0xb0, 0xbe, 0x8a, 0x0a, 0x3d, 0x83, 0x90
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs53_ProduceCorrectResult) {

    const u8 s[] = {
        0x97, 0x51, 0x59, 0x6a, 0x93, 0xd6, 0x30, 0x3c,
        0xa9, 0x99, 0xa5, 0x2d, 0xd3, 0x2e, 0xc1, 0x91,
        0x34, 0x4c, 0x2a, 0xa8, 0x86, 0xd9, 0x3a, 0xc9,
        0x7f, 0x77, 0x78, 0xb9, 0x4f, 0x58, 0xef, 0x09
    };
    const u8 h[] = {
        0x9c, 0xad, 0x9f, 0xa4, 0xdb, 0xf3, 0x24, 0xbe,
        0x17, 0x74, 0x43, 0x0e, 0x88, 0x69, 0x3f, 0x22,
        0xb0, 0xc1, 0x77, 0x5b, 0xa2, 0xa0, 0x09, 0x24,
        0xa8, 0x2a, 0x8d, 0xad, 0xd6, 0x95, 0xcc, 0x07
    };
    const u8 encoded_input_point[] = {
        0xaa, 0xc5, 0xdc, 0x38, 0x21, 0x2e, 0x46, 0x8a,
        0x80, 0x2e, 0xd1, 0x56, 0x67, 0x92, 0x2e, 0xef,
        0x54, 0xf4, 0xa3, 0xdb, 0xe0, 0x50, 0x6f, 0xc4,
        0xb0, 0xcf, 0x4a, 0x4f, 0xe1, 0xd8, 0xa8, 0xc8
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xb1, 0x75, 0x20, 0xfc, 0x2e, 0xce, 0xee, 0x9f,
        0xd3, 0xf3, 0x32, 0xfb, 0x53, 0x9a, 0xc0, 0x9e,
        0x58, 0x88, 0x61, 0x73, 0xc1, 0x09, 0x44, 0xd3,
        0x4a, 0x99, 0x15, 0xc9, 0xb3, 0x31, 0x33, 0xcc
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs54_ProduceCorrectResult) {

    const u8 s[] = {
        0x4e, 0x8b, 0x57, 0x22, 0x61, 0x66, 0xb8, 0x55,
        0xd3, 0xbd, 0xfe, 0xb4, 0xfb, 0xbc, 0x2f, 0x46,
        0x96, 0x4e, 0x4d, 0x43, 0x73, 0x9b, 0x16, 0x8a,
        0xb0, 0x27, 0x77, 0x69, 0x1d, 0x8b, 0x5a, 0x06
    };
    const u8 h[] = {
        0x94, 0x82, 0xb0, 0x69, 0x65, 0x52, 0xf6, 0x16,
        0xab, 0x9c, 0xaa, 0xd2, 0xa6, 0xd9, 0xc9, 0x99,
        0x66, 0xdc, 0x89, 0x61, 0x4b, 0x5f, 0x32, 0x86,
        0x6d, 0xbe, 0x1c, 0xf1, 0x30, 0x15, 0x08, 0x09
    };
    const u8 encoded_input_point[] = {
        0xe6, 0xda, 0x58, 0xea, 0xcf, 0xd9, 0x8b, 0x32,
        0xda, 0xc8, 0xb8, 0x51, 0x28, 0x7b, 0x8e, 0x00,
        0x41, 0x64, 0x75, 0xa4, 0x0f, 0xbf, 0x26, 0xcc,
        0xf0, 0x65, 0x54, 0x97, 0x6b, 0xd9, 0x77, 0xaf
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xc3, 0x46, 0xd7, 0x9f, 0x5b, 0x05, 0x27, 0xd2,
        0xe7, 0xff, 0x7b, 0x1d, 0xad, 0x5c, 0x87, 0xa5,
        0xf6, 0x7e, 0xb4, 0xa7, 0x86, 0x96, 0x08, 0xa5,
        0x77, 0x25, 0xdf, 0x9a, 0xe1, 0xb1, 0x74, 0x08
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs55_ProduceCorrectResult) {

    const u8 s[] = {
        0xa5, 0xb9, 0x2d, 0x1e, 0x2d, 0x49, 0xcd, 0x16,
        0x04, 0xb3, 0x4c, 0x91, 0x19, 0x1c, 0x02, 0x0a,
        0x0c, 0xfc, 0xae, 0xcc, 0x1b, 0xcc, 0xcb, 0x10,
        0xeb, 0xe8, 0x29, 0x7c, 0x18, 0x2f, 0x1c, 0x09
    };
    const u8 h[] = {
        0xc6, 0x03, 0xa4, 0x07, 0xd2, 0x69, 0x3d, 0x5a,
        0xde, 0x0a, 0xfa, 0x4e, 0xe0, 0x7a, 0x99, 0xac,
        0x3b, 0x48, 0xc3, 0x23, 0x84, 0x17, 0x8f, 0x39,
        0x49, 0xa5, 0x07, 0xc3, 0x61, 0x05, 0x78, 0x01
    };
    const u8 encoded_input_point[] = {
        0xf7, 0xf8, 0xfe, 0xaf, 0xc7, 0x18, 0x4c, 0x30,
        0x1f, 0xae, 0x92, 0x82, 0x46, 0x40, 0xc5, 0x49,
        0x52, 0x9f, 0xbd, 0x1e, 0xc5, 0xbe, 0x79, 0xd1,
        0x36, 0x71, 0x28, 0xbc, 0xc7, 0x57, 0xd2, 0x4f
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x45, 0x65, 0x36, 0xb5, 0xfe, 0x56, 0x17, 0xe6,
        0xf0, 0xb6, 0xc0, 0x69, 0x33, 0x4b, 0x30, 0xac,
        0x9f, 0xe7, 0xdd, 0x7c, 0x2c, 0xe3, 0xc7, 0xb0,
        0x9b, 0x6e, 0x54, 0x82, 0xa8, 0xc5, 0x5a, 0x03
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs56_ProduceCorrectResult) {

    const u8 s[] = {
        0x57, 0x39, 0xd3, 0xd7, 0x7d, 0x63, 0xb2, 0x88,
        0x7f, 0xbf, 0x02, 0x1b, 0x61, 0xc5, 0x7d, 0x25,
        0x7c, 0x4d, 0x25, 0x4c, 0x35, 0x23, 0x41, 0xb4,
        0x7a, 0x5f, 0x80, 0xec, 0x56, 0xf8, 0xf1, 0x0d
    };
    const u8 h[] = {
        0x21, 0x58, 0x28, 0xe1, 0xbd, 0x11, 0x9e, 0x3e,
        0x48, 0x7a, 0xd3, 0x80, 0x50, 0xf8, 0x08, 0xfb,
        0x0d, 0x0d, 0x06, 0xd1, 0x5b, 0xf3, 0x02, 0xd9,
        0xbf, 0x2c, 0x36, 0xc4, 0xdc, 0x32, 0xb2, 0x0b
    };
    const u8 encoded_input_point[] = {
        0x1e, 0x81, 0xd2, 0x71, 0xc5, 0x5c, 0xa4, 0x03,
        0x00, 0x60, 0x67, 0xb3, 0x70, 0xeb, 0x54, 0x5d,
        0xaf, 0xe8, 0x40, 0x98, 0x35, 0xc2, 0x41, 0x2b,
        0x7b, 0x8d, 0xcc, 0xd6, 0xf3, 0x66, 0x26, 0x42
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x81, 0x77, 0x36, 0x82, 0x3c, 0x4f, 0xf2, 0x44,
        0xbd, 0x67, 0x56, 0x64, 0xb8, 0xda, 0xff, 0x7b,
        0x14, 0x55, 0xb1, 0xb9, 0x4f, 0x8a, 0xc4, 0xd5,
        0xd4, 0x97, 0xc3, 0x75, 0xf8, 0x9b, 0xd8, 0xc3
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs57_ProduceCorrectResult) {

    const u8 s[] = {
        0x36, 0x09, 0x83, 0x76, 0x62, 0xc5, 0xf1, 0x71,
        0x2e, 0xad, 0x0d, 0x08, 0xcc, 0x02, 0xac, 0x0a,
        0x97, 0x14, 0x0c, 0x53, 0xba, 0x7b, 0x88, 0xd7,
        0xaf, 0xf0, 0xbf, 0xbe, 0xde, 0x3d, 0xb4, 0x0e
    };
    const u8 h[] = {
        0x43, 0xaf, 0xa4, 0xd5, 0x6b, 0xa4, 0x6c, 0xa7,
        0x5f, 0xcb, 0xb5, 0x1c, 0xc6, 0x35, 0x54, 0xa1,
        0x67, 0x9a, 0xb5, 0x6f, 0x94, 0x84, 0x19, 0x65,
        0xf1, 0x0a, 0x61, 0xdf, 0xfc, 0x73, 0xdf, 0x06
    };
    const u8 encoded_input_point[] = {
        0x3d, 0x04, 0xd0, 0x94, 0x08, 0xdd, 0xd0, 0xa5,
        0xb7, 0x95, 0x34, 0xc1, 0xce, 0xdf, 0xb5, 0x3d,
        0x3e, 0x63, 0xab, 0x75, 0xb4, 0x63, 0x63, 0x13,
        0xb0, 0x19, 0xab, 0xf2, 0x82, 0xe7, 0xdd, 0x17
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xa2, 0x6c, 0x7f, 0xbb, 0xb8, 0x7a, 0x4d, 0x3a,
        0x0e, 0x1e, 0xb2, 0x9f, 0x51, 0x62, 0x9e, 0x7d,
        0x5d, 0x30, 0x5d, 0x5d, 0xba, 0xea, 0x9b, 0xd4,
        0x4e, 0xb1, 0x04, 0x38, 0x4f, 0xf4, 0x50, 0x58
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs58_ProduceCorrectResult) {

    const u8 s[] = {
        0xb2, 0xc3, 0x2d, 0x28, 0xc2, 0xc0, 0x55, 0xe0,
        0x28, 0x30, 0x38, 0xc5, 0xfe, 0xfb, 0x42, 0xe9,
        0x6c, 0xc7, 0x9d, 0xbd, 0x23, 0xee, 0xf4, 0x7f,
        0xa7, 0xe3, 0x32, 0xc4, 0xc3, 0xc8, 0x2f, 0x03
    };
    const u8 h[] = {
        0xb9, 0xee, 0xde, 0xb6, 0xf8, 0xdf, 0x6c, 0x5a,
        0x82, 0x90, 0x50, 0x38, 0x1f, 0xd4, 0x50, 0xd7,
        0xa7, 0x96, 0x77, 0x04, 0x88, 0x45, 0xd9, 0xd7,
        0xdc, 0x7c, 0x7d, 0xa3, 0x67, 0x76, 0xf5, 0x02
    };
    const u8 encoded_input_point[] = {
        0xa0, 0x9e, 0x9d, 0x27, 0x26, 0x1a, 0x0e, 0x03,
        0x77, 0x83, 0x53, 0x24, 0x39, 0xc5, 0x45, 0x8b,
        0x48, 0x23, 0xa0, 0x11, 0x3e, 0x50, 0xde, 0x9c,
        0xd6, 0x06, 0x3e, 0xc3, 0xb2, 0xa3, 0xe7, 0x72
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x9d, 0x8a, 0xce, 0x30, 0x0b, 0xba, 0xcf, 0x0e,
        0xe0, 0x8b, 0x8f, 0x06, 0x62, 0x42, 0x4d, 0x7e,
        0x23, 0xe3, 0xcb, 0x88, 0x72, 0xb3, 0x9b, 0xa3,
        0x9c, 0x34, 0x0a, 0xfd, 0x42, 0x95, 0x63, 0xd6
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs59_ProduceCorrectResult) {

    const u8 s[] = {
        0x13, 0x8d, 0xac, 0x7e, 0x85, 0x92, 0x8f, 0x47,
        0x3a, 0x26, 0xfa, 0x0e, 0xfb, 0x1d, 0x99, 0x94,
        0x27, 0x5f, 0xae, 0xa7, 0x7a, 0x08, 0x26, 0x5a,
        0x17, 0x55, 0x0d, 0x16, 0x1b, 0xb7, 0x9d, 0x03
    };
    const u8 h[] = {
        0x22, 0x1a, 0x91, 0xb3, 0x91, 0xec, 0x12, 0x6e,
        0x86, 0x10, 0x88, 0xb1, 0xd1, 0x54, 0x0c, 0xd8,
        0x95, 0x16, 0x80, 0x32, 0xe9, 0xe9, 0x5e, 0xe2,
        0xd3, 0x74, 0xa1, 0x26, 0x65, 0xd2, 0x89, 0x0d
    };
    const u8 encoded_input_point[] = {
        0xc9, 0x7e, 0xa3, 0xe2, 0x8b, 0x84, 0x5c, 0x5b,
        0xd9, 0xa6, 0xa0, 0x62, 0xd7, 0xb6, 0xa1, 0x3c,
        0x2a, 0x0c, 0x50, 0x0f, 0xb4, 0xbd, 0xfc, 0x66,
        0x87, 0x8e, 0x92, 0x1c, 0x48, 0x01, 0x1e, 0x6b
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xb2, 0xe4, 0x2b, 0x41, 0x71, 0x7b, 0x4f, 0xcb,
        0x4d, 0x14, 0x75, 0x9b, 0xd3, 0xce, 0x6b, 0xef,
        0x2c, 0xba, 0x9b, 0xe6, 0x2b, 0xe5, 0xf5, 0xa8,
        0xbb, 0xc6, 0x69, 0x39, 0x1e, 0xd5, 0xf8, 0x53
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs60_ProduceCorrectResult) {

    const u8 s[] = {
        0x5e, 0x4c, 0x53, 0x65, 0x6f, 0xab, 0x5e, 0x06,
        0xca, 0x9c, 0xe5, 0xa9, 0x18, 0x57, 0x83, 0x9b,
        0x8f, 0x33, 0x9b, 0x1d, 0xc9, 0x0f, 0xf3, 0xc5,
        0x88, 0x39, 0x97, 0x16, 0xe7, 0xcd, 0x64, 0x0d
    };
    const u8 h[] = {
        0xde, 0x59, 0x37, 0x9e, 0x3c, 0x77, 0xf2, 0xc9,
        0xd5, 0x69, 0x81, 0xee, 0x38, 0x49, 0x5e, 0x68,
        0x8f, 0xc5, 0xaa, 0xf8, 0x7e, 0xb1, 0xc3, 0x4f,
        0x79, 0x47, 0x63, 0x44, 0x73, 0x9f, 0x0d, 0x09
    };
    const u8 encoded_input_point[] = {
        0xbe, 0x5a, 0x95, 0x4a, 0xa6, 0x38, 0x82, 0x6b,
        0xbb, 0x24, 0x31, 0x71, 0xe9, 0x36, 0xa0, 0x72,
        0xc8, 0x2c, 0x8c, 0x19, 0x32, 0xae, 0x03, 0x68,
        0x3a, 0xfa, 0xaf, 0x25, 0xd4, 0x4c, 0xa9, 0x6c
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x94, 0x27, 0xa1, 0x3a, 0x3b, 0x12, 0xc7, 0xe7,
        0x01, 0x82, 0x00, 0x32, 0x85, 0x40, 0x4b, 0xaf,
        0xec, 0x90, 0x93, 0xa6, 0xb9, 0xba, 0xa3, 0xc8,
        0xb1, 0x3e, 0x75, 0xf7, 0x34, 0x94, 0x2c, 0xb4
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs61_ProduceCorrectResult) {

    const u8 s[] = {
        0xd0, 0x66, 0xc6, 0xe9, 0x24, 0xc2, 0x82, 0x40,
        0x16, 0x23, 0x99, 0x9d, 0x8e, 0x80, 0x75, 0xe7,
        0x26, 0x82, 0x37, 0x86, 0xeb, 0xf7, 0x0b, 0x07,
        0x47, 0x72, 0x63, 0x78, 0xc9, 0x14, 0x46, 0x0c
    };
    const u8 h[] = {
        0x08, 0xdd, 0x4a, 0x0c, 0xc5, 0x5c, 0xb0, 0x5d,
        0x95, 0x19, 0xd1, 0x64, 0x6e, 0xd2, 0x45, 0x19,
        0x05, 0x3b, 0xc4, 0x68, 0xcc, 0x30, 0x38, 0x88,
        0xd4, 0xec, 0x23, 0x72, 0x98, 0x2a, 0x09, 0x05
    };
    const u8 encoded_input_point[] = {
        0x39, 0xed, 0xdf, 0xe2, 0x1e, 0x76, 0x60, 0xa7,
        0x51, 0xd7, 0xf5, 0xca, 0x0c, 0x64, 0xde, 0x32,
        0xad, 0x9e, 0xb1, 0xb4, 0xb1, 0x45, 0x8f, 0x34,
        0x63, 0xfc, 0xdb, 0xf4, 0xd2, 0x31, 0x39, 0xba
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xf8, 0x5b, 0x0b, 0x48, 0xb2, 0xcc, 0xe8, 0xdf,
        0x45, 0x7d, 0x44, 0x64, 0xb9, 0x9c, 0x1a, 0xe6,
        0x87, 0x1b, 0xbe, 0xd0, 0x88, 0x29, 0x31, 0x17,
        0xe2, 0x2b, 0x87, 0x5b, 0x5a, 0xc2, 0x0c, 0xc5
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs62_ProduceCorrectResult) {

    const u8 s[] = {
        0xd9, 0xbc, 0xc6, 0xfe, 0xd9, 0x32, 0x0c, 0xed,
        0x43, 0x37, 0xb6, 0xe1, 0xa4, 0x52, 0x5b, 0x5c,
        0xdd, 0x1f, 0xcb, 0xda, 0x59, 0xde, 0x1b, 0xa4,
        0x44, 0x4e, 0x64, 0x57, 0x91, 0x14, 0x68, 0x0c
    };
    const u8 h[] = {
        0x11, 0x17, 0x2b, 0xff, 0x45, 0x0f, 0x02, 0xcc,
        0x05, 0xd1, 0x33, 0x7e, 0x77, 0x73, 0x81, 0xde,
        0x04, 0x52, 0xcd, 0x81, 0x7d, 0xa5, 0x08, 0x15,
        0x94, 0xc4, 0x40, 0xbf, 0xdd, 0xe6, 0xaa, 0x0d
    };
    const u8 encoded_input_point[] = {
        0xe8, 0x0f, 0x9c, 0xa9, 0x5b, 0x50, 0x53, 0x8e,
        0x89, 0xaf, 0xee, 0x3d, 0xc2, 0x2c, 0x38, 0x70,
        0x89, 0xf9, 0x82, 0x31, 0x96, 0xa2, 0xfd, 0x6d,
        0x9e, 0x89, 0xda, 0xe7, 0x60, 0xc0, 0x94, 0x8a
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xe6, 0xca, 0x4d, 0xbe, 0x1e, 0x49, 0xbf, 0x74,
        0xae, 0x3e, 0x9a, 0xd1, 0x28, 0x6f, 0x02, 0x91,
        0x04, 0xa0, 0x51, 0x2d, 0x5f, 0x1f, 0x46, 0x5b,
        0xc0, 0x49, 0xc9, 0x5e, 0x98, 0xbf, 0x0b, 0xec
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs63_ProduceCorrectResult) {

    const u8 s[] = {
        0xbe, 0x4e, 0x2c, 0x26, 0xc7, 0xcf, 0x4c, 0xa3,
        0x35, 0x4c, 0xe1, 0x87, 0x7e, 0xe8, 0xd9, 0xda,
        0x60, 0x9a, 0xb1, 0x53, 0xc0, 0xda, 0x4e, 0x95,
        0x93, 0x94, 0x31, 0xe0, 0xca, 0xc0, 0xb1, 0x0e
    };
    const u8 h[] = {
        0x20, 0x17, 0x3f, 0x67, 0x1f, 0x18, 0x8b, 0xb5,
        0x49, 0x2a, 0x12, 0x63, 0x44, 0x04, 0x0f, 0x2f,
        0x07, 0x4d, 0x63, 0x6e, 0x51, 0x8c, 0x16, 0x53,
        0xcd, 0x45, 0x6d, 0xe8, 0x7f, 0xb7, 0x84, 0x08
    };
    const u8 encoded_input_point[] = {
        0xb6, 0x4f, 0xef, 0xa5, 0xcb, 0x5b, 0xc6, 0x7c,
        0xda, 0x65, 0xef, 0x0d, 0x66, 0x88, 0x65, 0xed,
        0xa8, 0x33, 0x26, 0xde, 0x68, 0x7e, 0x1e, 0x13,
        0xb9, 0x07, 0xe3, 0x4a, 0x32, 0xfd, 0x4f, 0x14
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x55, 0x03, 0xfa, 0x50, 0x30, 0xc6, 0xcc, 0xb2,
        0x12, 0x1f, 0xa4, 0xce, 0x7e, 0x2e, 0x06, 0x03,
        0x3d, 0xb6, 0x00, 0x13, 0x44, 0x28, 0x65, 0x70,
        0x44, 0xab, 0x09, 0x01, 0x44, 0xcf, 0xd1, 0x9a
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs64_ProduceCorrectResult) {

    const u8 s[] = {
        0x1f, 0x5a, 0xe5, 0xb3, 0xf6, 0xf0, 0x03, 0x8a,
        0xca, 0x63, 0x09, 0xab, 0xe0, 0x71, 0x63, 0xaf,
        0x05, 0x12, 0x4f, 0xda, 0xfc, 0x52, 0xd3, 0xd1,
        0x9e, 0xf4, 0x8c, 0xbe, 0xd7, 0xae, 0xf7, 0x07
    };
    const u8 h[] = {
        0x1e, 0x3b, 0x49, 0xa6, 0x3a, 0xd0, 0xd3, 0xe8,
        0x7f, 0x09, 0x34, 0x37, 0x05, 0x5e, 0xfd, 0x03,
        0x2f, 0x19, 0xcb, 0x09, 0xa3, 0x57, 0x82, 0x81,
        0x01, 0x67, 0xc1, 0x47, 0x78, 0x4b, 0x79, 0x0e
    };
    const u8 encoded_input_point[] = {
        0x0f, 0x81, 0x9e, 0x92, 0xdb, 0x3d, 0x5b, 0xaf,
        0x82, 0xa3, 0xeb, 0x13, 0x34, 0x65, 0xdc, 0x59,
        0x0c, 0x9d, 0x88, 0x16, 0xe9, 0xde, 0x9d, 0x86,
        0xe3, 0x0a, 0xad, 0xb1, 0xf9, 0x89, 0x8c, 0xa7
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x8d, 0x37, 0x07, 0x2f, 0xba, 0x55, 0x39, 0x89,
        0xfa, 0x83, 0xc0, 0x68, 0x35, 0x9c, 0xf8, 0xd0,
        0xa9, 0xd8, 0xf5, 0x51, 0xc1, 0x07, 0x77, 0x39,
        0x84, 0x00, 0xcf, 0xcf, 0xcd, 0xe2, 0xa1, 0xb3
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs65_ProduceCorrectResult) {

    const u8 s[] = {
        0x3e, 0x59, 0xe6, 0xa7, 0xfa, 0xd6, 0xb1, 0x17,
        0x8f, 0xf8, 0xd2, 0x85, 0x87, 0x98, 0x93, 0xc9,
        0x4a, 0x63, 0xc1, 0xc3, 0xda, 0x48, 0x25, 0xb9,
        0xea, 0xd8, 0x0c, 0xe6, 0xf2, 0xfb, 0x35, 0x0f
    };
    const u8 h[] = {
        0xd3, 0xc6, 0x5d, 0x02, 0xc3, 0x90, 0xa0, 0x9c,
        0x90, 0xc3, 0x23, 0x1c, 0x30, 0x2c, 0xf3, 0x23,
        0x82, 0x9c, 0x40, 0x75, 0x1d, 0xa8, 0xeb, 0x1a,
        0xff, 0x5a, 0xab, 0x3a, 0x4e, 0xf4, 0xf7, 0x02
    };
    const u8 encoded_input_point[] = {
        0xfd, 0x8d, 0xbf, 0xbe, 0xb1, 0xa7, 0x5f, 0x6b,
        0x74, 0x63, 0xd0, 0x1e, 0xe2, 0xea, 0xfe, 0x91,
        0x25, 0xd3, 0x5e, 0x80, 0x91, 0x26, 0x3c, 0x4e,
        0x96, 0xe8, 0x36, 0xa3, 0x1c, 0x95, 0x9f, 0xf0
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x8c, 0x64, 0x19, 0x10, 0x9a, 0x86, 0xa9, 0x5c,
        0x86, 0x38, 0xf6, 0x26, 0xdf, 0x07, 0x29, 0x0a,
        0xb2, 0xea, 0x5f, 0x1d, 0x7b, 0xdc, 0xd1, 0x16,
        0xa8, 0xd6, 0x7b, 0x08, 0x88, 0x6a, 0xe7, 0x7a
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs66_ProduceCorrectResult) {

    const u8 s[] = {
        0x09, 0x51, 0xda, 0x3e, 0xaa, 0x4c, 0x6e, 0xac,
        0x1a, 0x02, 0x6f, 0x9f, 0x9f, 0x30, 0xec, 0x7d,
        0xb7, 0xf4, 0x33, 0x91, 0x3d, 0x1c, 0x4a, 0x88,
        0xaf, 0xc6, 0xf0, 0x77, 0x29, 0x22, 0xdc, 0x00
    };
    const u8 h[] = {
        0x3e, 0xcc, 0x08, 0x88, 0x6f, 0xb3, 0xc9, 0xb8,
        0x92, 0xa5, 0xbc, 0x0f, 0x51, 0xb3, 0xe2, 0x12,
        0xdf, 0xdc, 0x0b, 0x8e, 0xcc, 0x06, 0x45, 0xaf,
        0xf7, 0x8a, 0xeb, 0x43, 0x46, 0x16, 0x95, 0x0f
    };
    const u8 encoded_input_point[] = {
        0xcf, 0x57, 0x7b, 0x7f, 0x61, 0xa9, 0x71, 0xe5,
        0xcb, 0x24, 0xd1, 0x37, 0x67, 0x63, 0x28, 0xf1,
        0xa0, 0x1d, 0x90, 0xd7, 0xb5, 0xbd, 0x55, 0xe9,
        0x6e, 0x72, 0x01, 0x57, 0x6b, 0x6c, 0xc9, 0x7a
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xaf, 0x81, 0xd6, 0x24, 0xcc, 0xf7, 0x06, 0x49,
        0x19, 0x1a, 0x1d, 0x74, 0xc2, 0x01, 0xda, 0xd0,
        0xfc, 0xb8, 0xc5, 0x41, 0x12, 0xdf, 0x47, 0xe9,
        0x80, 0xad, 0x3d, 0x1e, 0xab, 0xe1, 0xfb, 0x8e
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs67_ProduceCorrectResult) {

    const u8 s[] = {
        0xaa, 0xd0, 0x57, 0xdb, 0x9f, 0xf5, 0xf0, 0xe4,
        0xb4, 0xb4, 0xcf, 0xdf, 0xde, 0xdc, 0x7d, 0xe2,
        0x9a, 0x3a, 0x31, 0x59, 0x59, 0xfa, 0xe8, 0xd4,
        0x0f, 0xc7, 0x5a, 0x8d, 0x58, 0x22, 0xb5, 0x0b
    };
    const u8 h[] = {
        0x48, 0x64, 0x46, 0x8f, 0xff, 0x3d, 0x31, 0x0d,
        0xeb, 0x4f, 0xdd, 0xe2, 0xf4, 0x7a, 0x49, 0xa4,
        0x57, 0xa9, 0x79, 0xfc, 0xea, 0x9a, 0x97, 0x25,
        0x8b, 0xc0, 0xa2, 0xca, 0x1e, 0x76, 0x86, 0x04
    };
    const u8 encoded_input_point[] = {
        0x56, 0x60, 0x24, 0x38, 0x1f, 0x3e, 0x24, 0x2c,
        0x1a, 0x84, 0x6a, 0x37, 0x42, 0x3a, 0x52, 0x3f,
        0xc2, 0x8b, 0xd0, 0xc5, 0x47, 0x54, 0x67, 0x0e,
        0x84, 0xa5, 0x8f, 0x7c, 0x1c, 0x09, 0x27, 0x2b
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x9a, 0x70, 0x7d, 0x4e, 0xf9, 0xb7, 0x6e, 0x90,
        0x4e, 0x69, 0x20, 0xc7, 0x5b, 0x89, 0x4d, 0x6f,
        0xfc, 0xfd, 0x01, 0xa2, 0x72, 0xc4, 0xee, 0xe2,
        0x6c, 0x64, 0xe6, 0xd4, 0x8c, 0xda, 0xdd, 0xfe
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs68_ProduceCorrectResult) {

    const u8 s[] = {
        0x25, 0xb9, 0xa3, 0x65, 0x04, 0xd7, 0x86, 0x45,
        0x3c, 0x09, 0xc8, 0xef, 0xc7, 0x73, 0xd5, 0x1c,
        0x51, 0xb3, 0xea, 0x3b, 0xa4, 0x0e, 0x65, 0x05,
        0xc9, 0x5a, 0x57, 0x17, 0x7e, 0xf4, 0x3a, 0x05
    };
    const u8 h[] = {
        0x79, 0xf4, 0xb4, 0x1b, 0x34, 0x1b, 0xe4, 0x41,
        0x4e, 0xb4, 0x3c, 0x69, 0x0d, 0x02, 0xe3, 0x6e,
        0x0a, 0xa2, 0xcf, 0xd5, 0x0f, 0x00, 0x80, 0x12,
        0x38, 0xe8, 0xfe, 0x67, 0x35, 0x13, 0xc0, 0x0a
    };
    const u8 encoded_input_point[] = {
        0x7b, 0x18, 0x4d, 0xdf, 0x6a, 0xcd, 0x33, 0xaa,
        0x1c, 0x71, 0x80, 0xa5, 0xf6, 0x23, 0xae, 0x8d,
        0x37, 0xeb, 0x4d, 0x0e, 0xf2, 0x74, 0x43, 0x49,
        0xd3, 0xc1, 0x02, 0x36, 0x75, 0x6d, 0x4e, 0x31
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x70, 0x10, 0x17, 0x18, 0xf8, 0x55, 0x47, 0xd4,
        0x90, 0x86, 0xaa, 0x1b, 0x74, 0x60, 0xac, 0xda,
        0x57, 0xbe, 0x73, 0x71, 0x90, 0x4c, 0xb0, 0xff,
        0xff, 0x98, 0x6f, 0x09, 0x41, 0xa7, 0x58, 0xe6
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs69_ProduceCorrectResult) {

    const u8 s[] = {
        0x43, 0xe5, 0xc9, 0xb2, 0xc4, 0x1a, 0x4b, 0x66,
        0x39, 0x6c, 0xd3, 0xb4, 0x88, 0x5a, 0x7a, 0xc3,
        0x48, 0x13, 0x02, 0x35, 0xfb, 0xfb, 0xcb, 0x05,
        0x10, 0x47, 0x43, 0x1d, 0x90, 0x51, 0x2e, 0x0b
    };
    const u8 h[] = {
        0x2e, 0xe0, 0x8e, 0x31, 0xa5, 0xf0, 0x2a, 0x71,
        0x0d, 0x99, 0xe4, 0x59, 0xcd, 0xc1, 0x3e, 0x28,
        0xef, 0x94, 0xb3, 0xfd, 0x32, 0xf8, 0x1c, 0x1c,
        0xae, 0xb6, 0x39, 0x32, 0xa9, 0x20, 0xe4, 0x0e
    };
    const u8 encoded_input_point[] = {
        0x5b, 0x0e, 0x76, 0xfd, 0xa1, 0x1c, 0x06, 0x39,
        0xe5, 0x44, 0x06, 0x84, 0xb4, 0x1f, 0xb8, 0x98,
        0x92, 0xd6, 0xaa, 0x3f, 0x47, 0x37, 0xe3, 0xfc,
        0x17, 0x31, 0x00, 0x9a, 0xef, 0xe8, 0x8e, 0x8f
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xb7, 0x67, 0xff, 0xbe, 0x0a, 0x39, 0xa3, 0x73,
        0x72, 0xee, 0xc6, 0x5b, 0x1c, 0xe8, 0xd0, 0x8b,
        0x4a, 0xdc, 0xb2, 0x8a, 0x3a, 0x4f, 0x84, 0x91,
        0x8c, 0x50, 0x91, 0x9b, 0x8b, 0x3f, 0x00, 0xd6
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs70_ProduceCorrectResult) {

    const u8 s[] = {
        0x7b, 0x96, 0xaa, 0x84, 0x89, 0xc0, 0xec, 0xf3,
        0xd0, 0x26, 0x80, 0xdc, 0x5c, 0x3a, 0x00, 0x6d,
        0x6f, 0x57, 0x75, 0x2a, 0x44, 0x7d, 0x70, 0x46,
        0xf7, 0x4e, 0xbc, 0x75, 0xda, 0x95, 0x03, 0x02
    };
    const u8 h[] = {
        0x9c, 0xcd, 0x1a, 0x45, 0xfe, 0x4b, 0x54, 0x12,
        0x99, 0x2c, 0xc7, 0x39, 0x47, 0x38, 0x6a, 0x00,
        0xb1, 0x57, 0x12, 0xb8, 0xd8, 0x56, 0x7e, 0x4d,
        0x1a, 0xc2, 0xd3, 0xb7, 0x02, 0x32, 0x48, 0x04
    };
    const u8 encoded_input_point[] = {
        0x38, 0x9c, 0xe5, 0x6b, 0x99, 0xbb, 0xa3, 0x51,
        0x41, 0x69, 0x9f, 0x31, 0xcc, 0x21, 0xf2, 0x03,
        0x07, 0x6a, 0xc4, 0xf7, 0x70, 0x98, 0xdd, 0x33,
        0x5c, 0x33, 0x65, 0xa3, 0x43, 0x5c, 0xe9, 0x69
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xfd, 0x43, 0xd6, 0xfb, 0x21, 0xf1, 0x80, 0xf0,
        0x83, 0x27, 0x4b, 0x25, 0x1a, 0x60, 0xac, 0xca,
        0x03, 0x18, 0x16, 0x3b, 0xd4, 0x8e, 0xbe, 0xe3,
        0x6f, 0x18, 0x7d, 0x25, 0xcc, 0xb0, 0x0a, 0x58
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs71_ProduceCorrectResult) {

    const u8 s[] = {
        0x99, 0xab, 0x1e, 0x0d, 0x84, 0xc4, 0x9d, 0x80,
        0x16, 0xde, 0xbd, 0xbd, 0x3c, 0x2e, 0xe3, 0x3e,
        0x2a, 0x30, 0x5b, 0xe3, 0xc2, 0xbd, 0x01, 0x18,
        0x0d, 0x9d, 0xc2, 0x41, 0x78, 0xf5, 0x61, 0x03
    };
    const u8 h[] = {
        0xbb, 0xce, 0xbd, 0x0f, 0xf8, 0xdb, 0xca, 0x56,
        0x72, 0x4c, 0xae, 0x3f, 0x6f, 0xf9, 0x77, 0x0d,
        0x48, 0xcb, 0xdb, 0x57, 0xa9, 0x31, 0x1c, 0x59,
        0xb6, 0x13, 0x8f, 0x4c, 0xdc, 0xde, 0xbc, 0x0e
    };
    const u8 encoded_input_point[] = {
        0xfb, 0x0f, 0x27, 0xe9, 0x2f, 0x39, 0x5b, 0xe0,
        0x74, 0xd6, 0xd6, 0x88, 0xa4, 0xf2, 0x9b, 0x94,
        0x7f, 0x30, 0x85, 0xd0, 0x52, 0x87, 0xe4, 0x05,
        0x92, 0x3a, 0xff, 0x51, 0x17, 0xbd, 0xff, 0xfa
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xfa, 0x59, 0xcd, 0x91, 0xa2, 0xd4, 0x7f, 0x3e,
        0xa5, 0xbd, 0x27, 0x22, 0x0f, 0x86, 0x89, 0x5b,
        0x94, 0x6c, 0x50, 0x1b, 0xad, 0x5a, 0xdf, 0x11,
        0xdb, 0x7d, 0x7f, 0x2b, 0x53, 0x3f, 0xa0, 0xbf
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs72_ProduceCorrectResult) {

    const u8 s[] = {
        0x63, 0xc4, 0x7f, 0x43, 0x6b, 0x7b, 0xf8, 0x48,
        0x5c, 0x17, 0x3a, 0x3e, 0x35, 0x8d, 0xda, 0xee,
        0x3e, 0x80, 0xf8, 0xf3, 0xa6, 0x17, 0xf5, 0x91,
        0xe7, 0xb3, 0x85, 0x82, 0x58, 0x4b, 0x5a, 0x05
    };
    const u8 h[] = {
        0x67, 0xf0, 0x10, 0x26, 0x99, 0xca, 0x6c, 0x51,
        0x12, 0x02, 0x85, 0x92, 0xf1, 0x56, 0x9a, 0xea,
        0xe0, 0x64, 0x52, 0x6e, 0xaf, 0xc1, 0x5c, 0x26,
        0x73, 0x20, 0x69, 0xea, 0xed, 0x09, 0xf6, 0x08
    };
    const u8 encoded_input_point[] = {
        0x12, 0x7d, 0x20, 0xaf, 0x8f, 0x9b, 0x7e, 0xe0,
        0x16, 0xd7, 0xa8, 0x73, 0xf2, 0xd6, 0xab, 0x11,
        0xae, 0x6a, 0x86, 0xd3, 0x4f, 0x27, 0x80, 0x21,
        0x2f, 0xec, 0x06, 0x46, 0x92, 0x54, 0x0e, 0xc8
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xae, 0xde, 0x76, 0xd5, 0xc7, 0xb5, 0xa2, 0x4f,
        0x2e, 0x63, 0x59, 0x82, 0x96, 0x61, 0x78, 0x39,
        0x16, 0x5b, 0xbc, 0xc1, 0xd0, 0xa5, 0x1b, 0xe5,
        0xbc, 0xa6, 0x2a, 0x10, 0x4a, 0x1e, 0x7b, 0xbc
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs73_ProduceCorrectResult) {

    const u8 s[] = {
        0x81, 0x0c, 0xc7, 0x8b, 0x9c, 0xd0, 0x48, 0xdf,
        0x15, 0x66, 0xc8, 0x71, 0x03, 0xd3, 0x2a, 0x87,
        0x72, 0xf0, 0x59, 0x81, 0x35, 0x4b, 0x31, 0x15,
        0x07, 0x18, 0x79, 0xc4, 0x14, 0x06, 0x95, 0x00
    };
    const u8 h[] = {
        0x6b, 0xeb, 0x9e, 0x21, 0xf4, 0x70, 0xe6, 0xce,
        0xc7, 0xe4, 0xc2, 0x26, 0x62, 0xf3, 0xc1, 0x44,
        0x4b, 0x42, 0xc1, 0xc5, 0x51, 0x52, 0xb8, 0xac,
        0xa5, 0xc5, 0xea, 0x04, 0xd4, 0x1e, 0x3d, 0x06
    };
    const u8 encoded_input_point[] = {
        0xf7, 0x9c, 0x10, 0x26, 0x5c, 0x64, 0x77, 0xeb,
        0xae, 0xfb, 0x98, 0x23, 0x20, 0xe1, 0xbc, 0x65,
        0x53, 0x7d, 0x4b, 0x2d, 0xdc, 0x59, 0x3d, 0xce,
        0x5f, 0x46, 0x64, 0xa6, 0x32, 0xa0, 0x49, 0xad
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x4d, 0x6a, 0x12, 0xd9, 0x0f, 0x43, 0x9a, 0x46,
        0xa4, 0x81, 0x9f, 0xf8, 0xda, 0xf6, 0xde, 0x69,
        0x84, 0x5c, 0x0b, 0xb2, 0xa4, 0x25, 0x0c, 0x94,
        0x64, 0x02, 0x16, 0x73, 0x66, 0x94, 0xdb, 0xd2
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs74_ProduceCorrectResult) {

    const u8 s[] = {
        0x45, 0x97, 0xd1, 0x77, 0x31, 0x0b, 0x1c, 0x7c,
        0xf4, 0xb3, 0xec, 0xb3, 0x9a, 0x64, 0xb6, 0x10,
        0x0c, 0xd1, 0xb0, 0x03, 0xe5, 0xc5, 0xe2, 0x91,
        0x6d, 0xf2, 0x46, 0x12, 0x5e, 0x80, 0x42, 0x09
    };
    const u8 h[] = {
        0x8a, 0xb3, 0x1c, 0xcb, 0x50, 0xfb, 0x11, 0x33,
        0xce, 0xe5, 0x37, 0xb7, 0x13, 0xe6, 0xfa, 0x27,
        0x87, 0xd4, 0xcf, 0xb1, 0x5b, 0xe3, 0x74, 0x8e,
        0x56, 0x50, 0xa1, 0xeb, 0xc1, 0x8b, 0x44, 0x00
    };
    const u8 encoded_input_point[] = {
        0x46, 0xea, 0x7b, 0xbf, 0x78, 0x01, 0xfc, 0x76,
        0xe0, 0xcc, 0xbf, 0x99, 0x9e, 0x0f, 0x60, 0xf5,
        0x02, 0x75, 0x58, 0x9e, 0x8b, 0xc3, 0xe4, 0x34,
        0xb6, 0xea, 0x39, 0x50, 0xcd, 0xd4, 0x20, 0x54
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xf1, 0xf9, 0xa5, 0x21, 0xc7, 0xe3, 0x14, 0x6c,
        0x96, 0xde, 0x0f, 0x06, 0x1d, 0xac, 0x18, 0x2c,
        0xba, 0xe5, 0x66, 0x14, 0x2f, 0x96, 0x2e, 0x6b,
        0x68, 0xf4, 0x37, 0xf0, 0x82, 0x44, 0xa2, 0xa4
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs75_ProduceCorrectResult) {

    const u8 s[] = {
        0xf6, 0xb8, 0x6a, 0x16, 0x60, 0xf2, 0xd2, 0xa0,
        0xfe, 0x7c, 0xb6, 0xe9, 0xc9, 0x56, 0xac, 0x8d,
        0x65, 0xfe, 0x97, 0xcb, 0x6a, 0xdf, 0xd9, 0x9f,
        0x44, 0xa6, 0x88, 0x13, 0x9a, 0xc5, 0x55, 0x0d
    };
    const u8 h[] = {
        0x1f, 0x0e, 0xec, 0x9f, 0x8e, 0x14, 0xa2, 0xe6,
        0x1d, 0x29, 0x18, 0xd5, 0xed, 0x85, 0x57, 0x4a,
        0x92, 0x94, 0x67, 0x5d, 0x40, 0xaa, 0xc8, 0x37,
        0xb8, 0xd8, 0x15, 0xad, 0xb3, 0xd4, 0x69, 0x08
    };
    const u8 encoded_input_point[] = {
        0x7d, 0x61, 0xea, 0xb0, 0x73, 0x78, 0x51, 0x69,
        0xa2, 0x29, 0xcb, 0x82, 0x20, 0x25, 0x2b, 0x7b,
        0x73, 0xe7, 0xa6, 0x17, 0xf3, 0x6c, 0x74, 0xac,
        0xaf, 0x5c, 0x30, 0x31, 0x0a, 0xf7, 0x49, 0xb0
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x05, 0xc2, 0x28, 0x96, 0xf4, 0x23, 0x54, 0xde,
        0xa1, 0x72, 0xb1, 0x7f, 0xd7, 0xcb, 0x93, 0xe1,
        0x4d, 0x24, 0x6d, 0xad, 0x81, 0x51, 0x30, 0xc3,
        0x33, 0x63, 0x2f, 0x5b, 0xa1, 0x87, 0xab, 0x32
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs76_ProduceCorrectResult) {

    const u8 s[] = {
        0xd4, 0x01, 0x9a, 0xa0, 0x95, 0x9a, 0x54, 0x16,
        0xf6, 0x03, 0xd4, 0x49, 0xaf, 0x62, 0xdd, 0xb0,
        0x93, 0xf3, 0xe4, 0xb0, 0xe2, 0xfc, 0x75, 0x2d,
        0xd8, 0xb2, 0x35, 0x1e, 0xfd, 0x09, 0x76, 0x06
    };
    const u8 h[] = {
        0xca, 0x20, 0x94, 0xb8, 0x8e, 0xec, 0x56, 0x39,
        0xd3, 0x67, 0xb0, 0x3c, 0x08, 0x1c, 0x2d, 0x46,
        0x90, 0x80, 0x05, 0xe3, 0x78, 0xf2, 0xfb, 0xb3,
        0xfc, 0xc2, 0x42, 0x91, 0xa6, 0x7e, 0x57, 0x06
    };
    const u8 encoded_input_point[] = {
        0x12, 0x6a, 0x14, 0xe1, 0x9e, 0xde, 0x9f, 0x8d,
        0x44, 0x5e, 0x87, 0x1d, 0xe8, 0xfb, 0x9d, 0x4b,
        0xcf, 0x87, 0xc0, 0xd0, 0x6e, 0x2e, 0x67, 0xcc,
        0x29, 0x51, 0x68, 0x5b, 0xbb, 0x7e, 0xe2, 0xbf
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xbb, 0x1c, 0x00, 0x8b, 0x9a, 0x9e, 0x39, 0xc1,
        0xc3, 0x5c, 0x67, 0x12, 0x77, 0xea, 0xac, 0x48,
        0x07, 0xea, 0xe6, 0x5c, 0x96, 0x1f, 0x5a, 0x2c,
        0xf3, 0x21, 0x43, 0x7c, 0x13, 0x74, 0x74, 0x62
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs77_ProduceCorrectResult) {

    const u8 s[] = {
        0x44, 0x85, 0x00, 0xdc, 0x97, 0x80, 0x2d, 0xbb,
        0x0b, 0x43, 0xc4, 0x53, 0x52, 0x20, 0x12, 0x05,
        0x00, 0xcc, 0x76, 0xd5, 0x6b, 0x2a, 0xef, 0x63,
        0x35, 0x08, 0x55, 0x40, 0x20, 0x28, 0xa1, 0x0f
    };
    const u8 h[] = {
        0x44, 0x0c, 0x8c, 0x94, 0x92, 0x9d, 0x7c, 0x5a,
        0xca, 0x10, 0xbd, 0x0b, 0xb4, 0xf7, 0xc5, 0x65,
        0xa2, 0x05, 0xb4, 0x11, 0x97, 0xb1, 0x36, 0xd8,
        0xa6, 0x17, 0xda, 0x4e, 0xf5, 0xf0, 0x19, 0x02
    };
    const u8 encoded_input_point[] = {
        0x51, 0x17, 0xda, 0x11, 0x71, 0x84, 0x25, 0xcd,
        0x50, 0x84, 0xee, 0xb4, 0xa8, 0x13, 0xcd, 0xdc,
        0x53, 0xaa, 0x5a, 0x9a, 0x3c, 0xe4, 0x7e, 0x2c,
        0x48, 0x16, 0x0a, 0xaa, 0xbc, 0xe4, 0x09, 0x16
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x3e, 0x17, 0xe0, 0x85, 0xd5, 0xad, 0x88, 0x84,
        0xb9, 0x25, 0x6d, 0xf6, 0xeb, 0xb3, 0x97, 0xb9,
        0xed, 0x9a, 0x6d, 0x24, 0x89, 0x68, 0xff, 0x71,
        0x34, 0x54, 0xb3, 0x41, 0xf6, 0xcf, 0xec, 0x36
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs78_ProduceCorrectResult) {

    const u8 s[] = {
        0xc4, 0x77, 0x21, 0xea, 0xc2, 0x27, 0x7b, 0x77,
        0xd4, 0x87, 0xe8, 0x54, 0x3d, 0xda, 0x62, 0x35,
        0x4a, 0xaf, 0x50, 0xca, 0xb7, 0x81, 0x8d, 0x9b,
        0x90, 0x83, 0x1d, 0x0d, 0x70, 0x87, 0x3f, 0x0e
    };
    const u8 h[] = {
        0x06, 0xf1, 0x79, 0x3d, 0x05, 0x28, 0x2c, 0x76,
        0x24, 0x68, 0x22, 0xcc, 0xd0, 0xc0, 0x88, 0x70,
        0x87, 0x88, 0x29, 0xb6, 0x17, 0x31, 0x00, 0x62,
        0x5a, 0x87, 0xfb, 0x10, 0x74, 0x2f, 0x62, 0x07
    };
    const u8 encoded_input_point[] = {
        0xea, 0xe2, 0xca, 0xfb, 0x08, 0xc6, 0xdb, 0x00,
        0xec, 0x0a, 0x0a, 0x15, 0x09, 0x52, 0x30, 0x52,
        0xe7, 0x58, 0x6c, 0xb9, 0xea, 0x9a, 0xc4, 0x76,
        0x73, 0xe5, 0x6c, 0xef, 0x26, 0x75, 0xfe, 0x32
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x73, 0x4e, 0x3f, 0xbf, 0xe4, 0x2d, 0x24, 0xaa,
        0xa1, 0x5b, 0x65, 0x86, 0xab, 0xb7, 0xc5, 0xe1,
        0xcd, 0x66, 0x8a, 0xcc, 0x0b, 0x45, 0xc0, 0x1c,
        0x87, 0x4e, 0x2f, 0x80, 0xe9, 0x89, 0x95, 0xad
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs79_ProduceCorrectResult) {

    const u8 s[] = {
        0xc0, 0xeb, 0xd7, 0x38, 0xdf, 0x47, 0xf6, 0x0d,
        0x42, 0xc5, 0x03, 0x9b, 0x0f, 0xb3, 0x03, 0xe4,
        0xd4, 0xd1, 0x2b, 0xdb, 0xb3, 0x6f, 0x11, 0xd6,
        0x2e, 0x82, 0x25, 0xaf, 0xb6, 0xe4, 0x5d, 0x0a
    };
    const u8 h[] = {
        0x4a, 0xe4, 0xa1, 0x14, 0x24, 0xf9, 0xf9, 0xc4,
        0xf9, 0x4e, 0x0b, 0xaf, 0xce, 0xe5, 0x82, 0xed,
        0x20, 0xc2, 0x5e, 0xfa, 0x28, 0xfc, 0xae, 0xb9,
        0x78, 0x6b, 0xd5, 0xc5, 0x0f, 0xbc, 0xdb, 0x04
    };
    const u8 encoded_input_point[] = {
        0x67, 0xc2, 0x7b, 0x19, 0xba, 0xcc, 0x56, 0xce,
        0x8f, 0x8f, 0xf2, 0x25, 0xf2, 0xce, 0x89, 0xc4,
        0xeb, 0x7f, 0xd1, 0xb6, 0x4b, 0xa7, 0xb4, 0x4a,
        0x6f, 0x29, 0xdc, 0x42, 0xed, 0x1b, 0xc1, 0xfa
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xb6, 0x65, 0x31, 0x13, 0x6c, 0x01, 0x88, 0xdb,
        0xba, 0xfc, 0x5b, 0x6a, 0xeb, 0x6c, 0xfa, 0x7c,
        0x3c, 0x7e, 0x20, 0x12, 0x34, 0x39, 0x5d, 0xed,
        0x94, 0xe2, 0xc6, 0xe2, 0x3a, 0xb9, 0xb8, 0x29
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs80_ProduceCorrectResult) {

    const u8 s[] = {
        0x1f, 0x47, 0x60, 0x91, 0xe4, 0x71, 0x76, 0x04,
        0xf4, 0x01, 0x2b, 0x06, 0xf0, 0xa3, 0xb9, 0x04,
        0x6f, 0x21, 0xb3, 0x71, 0x78, 0x31, 0x4a, 0x30,
        0xd8, 0x19, 0x29, 0xda, 0xec, 0x89, 0x6b, 0x0e
    };
    const u8 h[] = {
        0x20, 0xec, 0xa2, 0x0d, 0x69, 0x60, 0x3d, 0x31,
        0x62, 0x7b, 0xf3, 0x75, 0x0f, 0x68, 0x27, 0xd2,
        0x47, 0x9f, 0xaf, 0x65, 0x2d, 0xae, 0x50, 0x45,
        0x87, 0xf7, 0x5f, 0xe8, 0xc7, 0x2b, 0x11, 0x00
    };
    const u8 encoded_input_point[] = {
        0x0b, 0xde, 0x9d, 0x2a, 0x16, 0xf4, 0xdc, 0xc5,
        0xb7, 0x5d, 0xc0, 0x21, 0x5a, 0xc6, 0xdf, 0x60,
        0x2e, 0xc2, 0x0e, 0xb6, 0xb0, 0xd4, 0x17, 0x89,
        0x98, 0xe5, 0xd1, 0xb8, 0xef, 0x67, 0x12, 0xeb
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x96, 0x41, 0x36, 0x2d, 0xc4, 0x49, 0xe9, 0x39,
        0x24, 0xbb, 0x0b, 0x21, 0x44, 0xb5, 0x2b, 0xcc,
        0xc9, 0x29, 0x98, 0x18, 0xf8, 0x8e, 0xca, 0x31,
        0xd5, 0x2b, 0x7e, 0x8b, 0x2e, 0x17, 0x6f, 0x14
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs81_ProduceCorrectResult) {

    const u8 s[] = {
        0x13, 0xc4, 0x1e, 0xe4, 0xd7, 0xae, 0x59, 0xfb,
        0x40, 0xd7, 0xf2, 0x0e, 0xa2, 0x92, 0xc7, 0xae,
        0x91, 0xd0, 0x77, 0xe7, 0x95, 0x94, 0x01, 0x00,
        0x2b, 0xa2, 0xd0, 0xd1, 0x4f, 0x4f, 0x91, 0x01
    };
    const u8 h[] = {
        0x8a, 0x10, 0xf5, 0x87, 0x7a, 0xc6, 0x84, 0x1e,
        0xd8, 0x68, 0x28, 0x71, 0x13, 0xea, 0x71, 0x56,
        0x7c, 0x01, 0xd3, 0x5f, 0xab, 0x3d, 0x25, 0x92,
        0xb3, 0x95, 0x9a, 0x9b, 0xb5, 0x1a, 0x8f, 0x08
    };
    const u8 encoded_input_point[] = {
        0x12, 0x0c, 0xd3, 0xaa, 0xbc, 0x29, 0xa8, 0xee,
        0x0f, 0x84, 0x6f, 0x16, 0xef, 0x95, 0x1e, 0x73,
        0x3d, 0x7e, 0x26, 0x28, 0xa5, 0x4b, 0x86, 0x83,
        0x10, 0x1f, 0x97, 0xd0, 0x0a, 0x2a, 0x5b, 0xc5
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x89, 0xcd, 0x05, 0x46, 0x50, 0xb6, 0x10, 0xb9,
        0xb0, 0x7e, 0xbd, 0x7d, 0xb9, 0x0c, 0x5f, 0xab,
        0xb9, 0x7d, 0xd2, 0xb1, 0x98, 0x33, 0xc3, 0xfa,
        0x76, 0x4c, 0x6b, 0xbb, 0x70, 0x89, 0x61, 0xb0
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs82_ProduceCorrectResult) {

    const u8 s[] = {
        0xdc, 0x2a, 0xa8, 0x15, 0x78, 0xa7, 0x50, 0xaf,
        0xbb, 0xc0, 0xa5, 0x61, 0x1b, 0xf7, 0x82, 0x9f,
        0x10, 0xb0, 0xa7, 0x26, 0xd1, 0x05, 0xa6, 0x67,
        0x1e, 0xfb, 0xb6, 0xd3, 0xd9, 0x74, 0xb7, 0x09
    };
    const u8 h[] = {
        0x72, 0x8f, 0xe1, 0x47, 0x69, 0x61, 0xda, 0x30,
        0x5e, 0x36, 0x85, 0x50, 0xfd, 0xa3, 0x6c, 0x32,
        0xf3, 0x38, 0xeb, 0x01, 0xf0, 0xe9, 0x7d, 0xa8,
        0x9a, 0x4d, 0xc4, 0x95, 0x2a, 0x59, 0xb1, 0x09
    };
    const u8 encoded_input_point[] = {
        0xf6, 0x37, 0x31, 0x31, 0x47, 0xf2, 0xb9, 0x32,
        0x09, 0xda, 0xa4, 0x75, 0x34, 0x8c, 0xf5, 0x20,
        0x3d, 0x1c, 0x1a, 0x3d, 0x81, 0xa8, 0x2a, 0xd4,
        0xcc, 0x4d, 0xe6, 0x9d, 0xe1, 0xaa, 0x1e, 0xec
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x47, 0x9f, 0xb6, 0x3a, 0x1d, 0xde, 0x54, 0x2a,
        0x8e, 0x6a, 0x9a, 0x74, 0xfb, 0x66, 0x0e, 0x34,
        0xa6, 0xd7, 0xba, 0xf9, 0x1e, 0x4b, 0xa5, 0xb1,
        0x31, 0xf8, 0x4c, 0xc1, 0xa3, 0xb7, 0x19, 0x08
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs83_ProduceCorrectResult) {

    const u8 s[] = {
        0x16, 0x8c, 0xf7, 0xbe, 0xba, 0x09, 0xa8, 0x8e,
        0x8f, 0xbc, 0x2c, 0xd7, 0x8a, 0x59, 0x6a, 0x07,
        0x87, 0xfb, 0x0f, 0xfa, 0x25, 0x04, 0x8c, 0x39,
        0xda, 0x22, 0xaa, 0xd6, 0xd3, 0x16, 0xf5, 0x0b
    };
    const u8 h[] = {
        0xaf, 0x48, 0x2d, 0xf5, 0x84, 0x3a, 0xb8, 0x03,
        0x7a, 0x17, 0x3d, 0x12, 0xf6, 0x16, 0x65, 0xf4,
        0x49, 0xe1, 0x45, 0xea, 0xa1, 0x7e, 0x42, 0x2f,
        0x08, 0xa8, 0x89, 0x05, 0x2e, 0xf0, 0x10, 0x0c
    };
    const u8 encoded_input_point[] = {
        0xf3, 0x56, 0x69, 0xd8, 0xbb, 0x7c, 0xf6, 0xe6,
        0x63, 0x43, 0xdd, 0x57, 0x9a, 0x88, 0x49, 0x81,
        0x47, 0xe6, 0x65, 0xd6, 0x7e, 0xfd, 0xcc, 0x1f,
        0xe4, 0x45, 0xbf, 0x17, 0x1d, 0xe4, 0xc6, 0x98
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x25, 0x22, 0xbd, 0x63, 0x88, 0xe7, 0xf7, 0x07,
        0x31, 0xc3, 0x75, 0xf1, 0xd2, 0x74, 0x76, 0xad,
        0x4b, 0x1b, 0xf8, 0x48, 0x2c, 0x31, 0xb3, 0x8a,
        0x80, 0xad, 0xa0, 0x7f, 0x8c, 0xf5, 0x90, 0x5c
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs84_ProduceCorrectResult) {

    const u8 s[] = {
        0xa5, 0x1f, 0x8e, 0xfb, 0x6a, 0x25, 0x2c, 0xdf,
        0xc7, 0x22, 0x95, 0xea, 0xfb, 0xe7, 0x77, 0xfe,
        0x81, 0x8b, 0x3b, 0xbe, 0xf8, 0x0c, 0x23, 0xef,
        0x23, 0x1c, 0x5a, 0xac, 0x76, 0xe0, 0xfd, 0x06
    };
    const u8 h[] = {
        0xea, 0x19, 0xed, 0x80, 0xef, 0x21, 0x2c, 0x8f,
        0xab, 0xe6, 0xdc, 0xd5, 0x43, 0x45, 0xec, 0x6d,
        0x52, 0x1a, 0x10, 0x34, 0xce, 0xa3, 0xf0, 0x1a,
        0x6b, 0x83, 0xcb, 0xd2, 0xf7, 0xe5, 0xfa, 0x09
    };
    const u8 encoded_input_point[] = {
        0xdc, 0x81, 0x5d, 0x36, 0x8c, 0x19, 0x68, 0x14,
        0x12, 0xa2, 0x8f, 0x7e, 0xd4, 0x36, 0x38, 0xf0,
        0xd4, 0xad, 0x47, 0x45, 0x55, 0x65, 0x44, 0xca,
        0x18, 0x81, 0xb5, 0x07, 0xfa, 0x25, 0x65, 0x05
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x3a, 0xbb, 0xd6, 0x91, 0xb8, 0x65, 0xd0, 0x07,
        0x46, 0x00, 0xe6, 0x39, 0x12, 0x81, 0xc8, 0xa3,
        0x1c, 0xe0, 0x14, 0x23, 0x8f, 0x2c, 0x40, 0x34,
        0x3d, 0xe9, 0xaf, 0x73, 0x7a, 0xa8, 0xe1, 0xbf
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs85_ProduceCorrectResult) {

    const u8 s[] = {
        0xf1, 0xbd, 0xff, 0x58, 0xe2, 0x87, 0x14, 0x08,
        0x2e, 0xe5, 0x76, 0xfb, 0x69, 0xfd, 0x36, 0xb8,
        0xe4, 0xc8, 0xc1, 0xc2, 0x37, 0x43, 0x79, 0xe6,
        0x88, 0xdc, 0x9b, 0xff, 0xb4, 0xfd, 0xc7, 0x04
    };
    const u8 h[] = {
        0x70, 0xb1, 0x30, 0x9c, 0xc6, 0x6b, 0x45, 0x8e,
        0xda, 0xd0, 0xe1, 0xa7, 0xaa, 0x42, 0x8b, 0xe8,
        0x09, 0xc1, 0x50, 0x68, 0x6d, 0x5c, 0xaf, 0x5a,
        0x9c, 0xfa, 0xea, 0xcc, 0x4b, 0x4a, 0x92, 0x0b
    };
    const u8 encoded_input_point[] = {
        0x17, 0x67, 0x46, 0x02, 0x04, 0x16, 0xaa, 0xe5,
        0x6e, 0x2a, 0x98, 0x7a, 0x81, 0xeb, 0x66, 0x74,
        0x60, 0x58, 0x27, 0x1f, 0x6b, 0x7e, 0x97, 0xe9,
        0x25, 0x75, 0x2b, 0xce, 0xa9, 0xde, 0xc2, 0x42
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x40, 0xf1, 0x56, 0x76, 0x65, 0xc1, 0x33, 0xc9,
        0xea, 0xdd, 0x02, 0xb2, 0x29, 0xed, 0x44, 0x57,
        0xd1, 0xe5, 0x2d, 0x24, 0x6f, 0x2e, 0x2b, 0xbe,
        0x33, 0x3d, 0x10, 0x7b, 0x91, 0x87, 0x07, 0x59
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs86_ProduceCorrectResult) {

    const u8 s[] = {
        0xab, 0x80, 0x12, 0xa6, 0x09, 0xf3, 0x36, 0xec,
        0xe8, 0x05, 0x4a, 0xec, 0xc9, 0x2d, 0xf5, 0x94,
        0x86, 0x05, 0x33, 0x2c, 0x90, 0x37, 0xd4, 0x96,
        0x61, 0xac, 0x8e, 0x43, 0x1c, 0xbb, 0x1c, 0x08
    };
    const u8 h[] = {
        0xd7, 0x7a, 0x09, 0xa8, 0x6b, 0xfb, 0xd1, 0x72,
        0x5a, 0xdc, 0xdf, 0x1e, 0x03, 0x87, 0x83, 0xb2,
        0x12, 0x93, 0x08, 0x8d, 0xe0, 0xc7, 0xc5, 0x2e,
        0xb8, 0xcd, 0x7c, 0xa7, 0x21, 0x8d, 0x9d, 0x02
    };
    const u8 encoded_input_point[] = {
        0xc5, 0x0f, 0xfa, 0x79, 0x63, 0x34, 0xc5, 0x73,
        0x49, 0x6a, 0xf1, 0x9d, 0x32, 0x88, 0xf9, 0x3f,
        0x67, 0x09, 0x79, 0x14, 0x7d, 0x81, 0x95, 0xeb,
        0x23, 0x3a, 0xc8, 0x9a, 0x0c, 0xd2, 0xd1, 0x7c
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x0f, 0x8c, 0xeb, 0xb9, 0xf7, 0xa5, 0x66, 0x5f,
        0x14, 0x45, 0x8b, 0xee, 0x33, 0x74, 0x57, 0x94,
        0xb7, 0xe9, 0xf7, 0x35, 0x38, 0xb8, 0x53, 0x26,
        0xb4, 0xd0, 0xe8, 0xf9, 0x3d, 0xca, 0x64, 0x16
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs87_ProduceCorrectResult) {

    const u8 s[] = {
        0x33, 0x65, 0x16, 0x70, 0xcc, 0xf2, 0xdf, 0xb6,
        0xd9, 0xb5, 0x9b, 0x12, 0x8c, 0x58, 0x30, 0x25,
        0x61, 0x45, 0xf3, 0x11, 0xf5, 0x8b, 0xf0, 0xfa,
        0x8a, 0x63, 0x1c, 0xd8, 0xc2, 0x3c, 0xad, 0x0e
    };
    const u8 h[] = {
        0x6b, 0x81, 0xa6, 0xee, 0xb7, 0x69, 0xe3, 0x29,
        0x3a, 0xc1, 0xa2, 0x32, 0x4b, 0x16, 0x0f, 0x7f,
        0x0d, 0x49, 0xb3, 0xcd, 0x98, 0x17, 0x7f, 0x43,
        0x79, 0x2c, 0x61, 0xd6, 0xc3, 0xc2, 0x13, 0x08
    };
    const u8 encoded_input_point[] = {
        0x82, 0xfa, 0x8d, 0x84, 0xc5, 0x86, 0x46, 0x02,
        0xb6, 0x51, 0x5d, 0x29, 0xf5, 0xbb, 0x9c, 0x04,
        0x49, 0xaa, 0x3a, 0x64, 0xbf, 0x4a, 0x2a, 0x26,
        0x5d, 0x02, 0x5d, 0x99, 0xfc, 0x72, 0xd8, 0xdb
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x1c, 0x5a, 0xd3, 0xf2, 0x56, 0xb9, 0x6c, 0xf5,
        0x2b, 0xfd, 0xbe, 0xf1, 0x9a, 0x58, 0x9f, 0x97,
        0xc2, 0x1c, 0x04, 0xe7, 0x25, 0x89, 0xca, 0xdb,
        0x66, 0xd8, 0x27, 0x6f, 0xcb, 0x04, 0x38, 0xdb
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs88_ProduceCorrectResult) {

    const u8 s[] = {
        0xbe, 0xed, 0x78, 0xb3, 0x30, 0x5c, 0x7f, 0x67,
        0xcd, 0x98, 0xbb, 0xb1, 0xc3, 0x44, 0x74, 0x6e,
        0xbd, 0x4d, 0xa0, 0x9b, 0xa9, 0xce, 0x82, 0xb5,
        0x7c, 0xc9, 0xf9, 0xfb, 0x82, 0x07, 0x84, 0x05
    };
    const u8 h[] = {
        0xcb, 0x23, 0x39, 0xdd, 0x12, 0xd5, 0x85, 0x6b,
        0x24, 0xc1, 0x2f, 0x54, 0x1c, 0xec, 0xcd, 0xef,
        0xf0, 0xcb, 0xca, 0x39, 0xe3, 0x14, 0x1d, 0xd9,
        0xf6, 0x44, 0x09, 0x0c, 0x5f, 0x7b, 0xd2, 0x04
    };
    const u8 encoded_input_point[] = {
        0xbe, 0x3f, 0x7d, 0x17, 0x3b, 0xb8, 0xea, 0x0b,
        0xbd, 0xea, 0x80, 0xf4, 0x04, 0x3e, 0xa2, 0x46,
        0xa5, 0x9c, 0x1e, 0x59, 0x5a, 0xc2, 0x02, 0x2b,
        0xe1, 0x21, 0x9d, 0xb0, 0x81, 0x31, 0x5b, 0xe7
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x4c, 0xcd, 0x2c, 0x62, 0xaf, 0xe9, 0x8b, 0x10,
        0x03, 0x17, 0xd9, 0x37, 0x56, 0x65, 0xa9, 0x85,
        0xb7, 0xa8, 0x83, 0x2d, 0x05, 0x4a, 0xdb, 0x76,
        0x34, 0x15, 0x9d, 0xa9, 0x2d, 0x9d, 0xef, 0x71
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs89_ProduceCorrectResult) {

    const u8 s[] = {
        0x8d, 0x5c, 0x1c, 0x81, 0x6d, 0x0f, 0x88, 0x44,
        0x20, 0x7b, 0xa2, 0x21, 0xc9, 0x34, 0x3d, 0xc6,
        0xfb, 0x91, 0x09, 0x64, 0xba, 0xcb, 0x03, 0xf2,
        0xcc, 0xc3, 0x3c, 0x87, 0x68, 0x69, 0x10, 0x09
    };
    const u8 h[] = {
        0xaa, 0xe0, 0xb2, 0x9d, 0xbb, 0xef, 0x2d, 0x84,
        0xcd, 0x7e, 0x6d, 0x3e, 0x33, 0x07, 0xc2, 0x39,
        0xdb, 0x63, 0x4e, 0xd4, 0x2c, 0x69, 0x42, 0xfc,
        0x13, 0x53, 0x78, 0x38, 0xbb, 0x17, 0x16, 0x00
    };
    const u8 encoded_input_point[] = {
        0xd0, 0xa6, 0xdf, 0x0b, 0xaa, 0xc4, 0x11, 0x03,
        0x2f, 0x0f, 0xb6, 0xb8, 0x83, 0xcb, 0x67, 0x75,
        0x24, 0x46, 0xe4, 0xcf, 0x5e, 0x05, 0xab, 0x41,
        0xaa, 0x53, 0xb0, 0x92, 0x7c, 0x44, 0xf5, 0xd4
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xc9, 0xec, 0x22, 0xe2, 0xf9, 0x14, 0xb9, 0x57,
        0x8b, 0x7f, 0x5c, 0xd1, 0x64, 0xaf, 0x1c, 0xe0,
        0x28, 0xf8, 0x3a, 0xe3, 0x31, 0xfb, 0x43, 0x28,
        0x69, 0x19, 0x99, 0x58, 0xb3, 0x2f, 0x4d, 0x22
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs90_ProduceCorrectResult) {

    const u8 s[] = {
        0x5d, 0x7a, 0x6f, 0x9a, 0x77, 0xff, 0xec, 0x90,
        0x86, 0x38, 0x4b, 0xd8, 0x57, 0x4e, 0xd1, 0x86,
        0x38, 0x09, 0x79, 0x1b, 0x0a, 0xf9, 0x75, 0xfe,
        0xcd, 0x09, 0x22, 0xe6, 0xc0, 0x90, 0x66, 0x00
    };
    const u8 h[] = {
        0x96, 0x3a, 0xac, 0x68, 0x09, 0x34, 0x90, 0x34,
        0xd0, 0xc6, 0x94, 0xe0, 0x73, 0xeb, 0x13, 0x48,
        0x20, 0x19, 0x01, 0xb2, 0xbf, 0xc1, 0x15, 0xdc,
        0x26, 0xa3, 0x81, 0xe6, 0x4d, 0xeb, 0x1c, 0x09
    };
    const u8 encoded_input_point[] = {
        0x77, 0x1b, 0xe9, 0x15, 0x23, 0x63, 0x85, 0x58,
        0xd8, 0xc2, 0xf5, 0x7e, 0xe1, 0xc9, 0xf2, 0x3a,
        0x82, 0x2b, 0x66, 0xb2, 0x9c, 0x54, 0x94, 0xe5,
        0x6f, 0x58, 0xf8, 0xeb, 0x38, 0xcd, 0xd3, 0x1a
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xe9, 0x74, 0xfe, 0x64, 0x38, 0xad, 0x97, 0xd0,
        0xa6, 0xa3, 0xbf, 0xbd, 0x6a, 0xa7, 0xc3, 0xee,
        0x1c, 0x6f, 0x89, 0x6d, 0x27, 0xc1, 0x75, 0x93,
        0xb8, 0xfd, 0x43, 0x95, 0x8c, 0xf4, 0xb9, 0xb2
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs91_ProduceCorrectResult) {

    const u8 s[] = {
        0x97, 0x5f, 0xd6, 0x4a, 0x62, 0x75, 0xa5, 0x52,
        0x50, 0x4b, 0x7b, 0xbf, 0x20, 0x39, 0x0a, 0x6e,
        0x3b, 0xe2, 0x0d, 0x37, 0x26, 0x0e, 0x49, 0x9a,
        0x9a, 0x83, 0x08, 0xcc, 0xee, 0x03, 0xf6, 0x08
    };
    const u8 h[] = {
        0xb9, 0xd9, 0xfc, 0x1d, 0x94, 0xa3, 0x3c, 0xb0,
        0x27, 0x28, 0xda, 0x1a, 0x2d, 0x8a, 0x1e, 0x3d,
        0x8c, 0x84, 0x39, 0x17, 0x5c, 0x5c, 0x63, 0x68,
        0xee, 0x7b, 0x10, 0xbf, 0xf4, 0x0f, 0xad, 0x0d
    };
    const u8 encoded_input_point[] = {
        0xc4, 0x73, 0xc1, 0xe3, 0xd5, 0x73, 0x6c, 0x0e,
        0x7e, 0x43, 0x26, 0xfa, 0x90, 0xf9, 0xfb, 0xd0,
        0xf6, 0xdc, 0xc6, 0xf9, 0x02, 0x9d, 0x19, 0x82,
        0xda, 0x09, 0x02, 0x72, 0x0c, 0xcc, 0xf6, 0x77
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x5d, 0xbb, 0x09, 0x24, 0x16, 0x04, 0x32, 0xac,
        0xdd, 0x2a, 0x0c, 0x76, 0xca, 0x27, 0xd5, 0x77,
        0x5c, 0x42, 0x0d, 0x50, 0xf6, 0xa1, 0x96, 0xb6,
        0xaa, 0x0a, 0x38, 0x6e, 0xf8, 0x1c, 0xc8, 0xdd
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs92_ProduceCorrectResult) {

    const u8 s[] = {
        0x00, 0x4a, 0x3c, 0x31, 0x05, 0x15, 0x2c, 0x34,
        0xbb, 0x8c, 0xc0, 0x2e, 0x6b, 0xde, 0x6c, 0xe0,
        0xe6, 0x83, 0xf0, 0x5c, 0xe7, 0x2b, 0x36, 0xff,
        0x39, 0xdf, 0x58, 0xd9, 0xc5, 0xd3, 0xca, 0x0b
    };
    const u8 h[] = {
        0x6c, 0x02, 0x64, 0xde, 0x85, 0x70, 0x60, 0x77,
        0x5e, 0xdd, 0x86, 0xa4, 0x1e, 0xf0, 0xa6, 0x3e,
        0xbf, 0xcc, 0x00, 0x88, 0x85, 0x30, 0xc6, 0x3e,
        0x77, 0xf1, 0x6a, 0x3e, 0xd3, 0xf8, 0x2c, 0x02
    };
    const u8 encoded_input_point[] = {
        0x1f, 0x72, 0x9c, 0xe0, 0x4f, 0x6e, 0xc3, 0x64,
        0x10, 0xec, 0xf2, 0x05, 0x1a, 0xe9, 0x21, 0x38,
        0x43, 0x0a, 0xd4, 0x5e, 0x54, 0x6f, 0x6e, 0xe1,
        0xfa, 0xbf, 0x05, 0xc8, 0xb8, 0xd8, 0x19, 0x6c
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x55, 0x70, 0x3c, 0xa7, 0x3a, 0xb4, 0x5e, 0xdf,
        0x89, 0x63, 0xa6, 0x0b, 0xc2, 0xe9, 0xe1, 0x75,
        0xa9, 0xc8, 0x1a, 0xc9, 0xa3, 0x7c, 0x80, 0xf3,
        0xfd, 0x8a, 0x5a, 0x2e, 0x5d, 0x53, 0xb2, 0xab
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs93_ProduceCorrectResult) {

    const u8 s[] = {
        0x49, 0xfa, 0xa5, 0x7f, 0x67, 0x64, 0x11, 0xe5,
        0x24, 0xe7, 0xb1, 0x3f, 0xaf, 0x42, 0x2f, 0x7f,
        0xf2, 0x25, 0x8f, 0x35, 0x1e, 0xb3, 0x23, 0xac,
        0xe9, 0xc2, 0x91, 0xa3, 0xb6, 0x27, 0x7a, 0x05
    };
    const u8 h[] = {
        0x77, 0xf0, 0x34, 0xb1, 0x63, 0xad, 0x97, 0x0c,
        0x63, 0xae, 0x95, 0x05, 0xbe, 0x55, 0xa9, 0x1f,
        0x47, 0x85, 0xa2, 0xc0, 0x09, 0x2a, 0x4e, 0xc1,
        0xd7, 0xb0, 0xca, 0x2f, 0xcf, 0x8b, 0xc1, 0x05
    };
    const u8 encoded_input_point[] = {
        0x32, 0x94, 0x1c, 0xbd, 0x29, 0xbf, 0x75, 0xca,
        0x7b, 0x5d, 0xf3, 0x65, 0xb9, 0xcb, 0x06, 0x58,
        0x82, 0xae, 0xf9, 0x68, 0x34, 0xfa, 0x1d, 0x1d,
        0xfc, 0xa8, 0x06, 0xd9, 0xcc, 0xf0, 0xe4, 0x93
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x80, 0x11, 0xb9, 0x6d, 0xe6, 0xbc, 0x38, 0xda,
        0x80, 0xb1, 0xc7, 0xb7, 0x9c, 0x9d, 0xb0, 0x54,
        0xcc, 0xc9, 0x05, 0x2f, 0xd8, 0xf4, 0xb4, 0xe3,
        0x03, 0x4f, 0xab, 0xd0, 0x9e, 0x62, 0x18, 0xde
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs94_ProduceCorrectResult) {

    const u8 s[] = {
        0xa6, 0x84, 0x10, 0x5a, 0x68, 0xde, 0x0a, 0x4c,
        0x8b, 0xf3, 0x3b, 0x44, 0xf0, 0x07, 0x0b, 0xab,
        0x47, 0x1d, 0xae, 0xcc, 0x69, 0x30, 0xc0, 0x98,
        0x15, 0x2b, 0x63, 0xdb, 0xa5, 0x75, 0x6a, 0x04
    };
    const u8 h[] = {
        0x1e, 0x85, 0x39, 0xde, 0x8f, 0x33, 0x03, 0x5c,
        0x6c, 0x97, 0x5e, 0x22, 0xc3, 0xa6, 0x0a, 0x65,
        0xf9, 0x14, 0x4c, 0x7c, 0xf7, 0xce, 0xb0, 0x86,
        0xd3, 0x90, 0x3b, 0xae, 0xfb, 0x34, 0xc3, 0x07
    };
    const u8 encoded_input_point[] = {
        0x0d, 0x21, 0x3c, 0xd4, 0x53, 0x3d, 0x90, 0x75,
        0x6b, 0x8f, 0x50, 0x15, 0xd4, 0x5c, 0x96, 0xcf,
        0x53, 0xed, 0xfd, 0x7d, 0x16, 0x29, 0x6a, 0x7f,
        0x79, 0xfe, 0xa4, 0xb9, 0x76, 0xdb, 0x63, 0x0e
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x16, 0x5e, 0x3e, 0x97, 0xef, 0x9a, 0xae, 0xa4,
        0x24, 0x06, 0x41, 0x7a, 0x00, 0x7a, 0x7f, 0xe6,
        0x9f, 0x15, 0xec, 0x5c, 0xbd, 0x03, 0x68, 0x29,
        0x57, 0x2c, 0x68, 0x9f, 0xb1, 0x9b, 0x6f, 0x5c
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs95_ProduceCorrectResult) {

    const u8 s[] = {
        0xb8, 0xf1, 0x0c, 0x5b, 0xc7, 0x6d, 0x18, 0xe2,
        0x13, 0xbb, 0xa7, 0x1c, 0x6a, 0x90, 0x1a, 0xda,
        0xb5, 0xa6, 0xaa, 0x1a, 0x81, 0x88, 0xd9, 0xea,
        0x97, 0xa0, 0xfa, 0x99, 0x61, 0x76, 0x78, 0x0b
    };
    const u8 h[] = {
        0x73, 0xcc, 0x01, 0x32, 0x77, 0x69, 0xbd, 0xa9,
        0x82, 0x30, 0x48, 0x8f, 0xd2, 0x0f, 0x5a, 0x54,
        0x44, 0x9a, 0x0f, 0x10, 0xaa, 0x80, 0x3c, 0x90,
        0x68, 0x14, 0xdb, 0xcc, 0x61, 0x40, 0x0e, 0x05
    };
    const u8 encoded_input_point[] = {
        0x72, 0xce, 0xbb, 0x48, 0x4e, 0xa4, 0x85, 0xc9,
        0xfc, 0xf4, 0xc4, 0x58, 0xde, 0x49, 0xd7, 0x80,
        0xe7, 0x2e, 0xd8, 0x2c, 0xc8, 0xa4, 0xe9, 0xfd,
        0xfd, 0x81, 0x3c, 0xb4, 0xd2, 0x53, 0x04, 0xd5
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x43, 0xd0, 0xd0, 0xfd, 0x98, 0xe1, 0x5d, 0x88,
        0xda, 0xea, 0x2e, 0x58, 0x2b, 0x3f, 0x3a, 0x2f,
        0x0c, 0x89, 0xb8, 0xa2, 0x3e, 0xcf, 0xdf, 0xd5,
        0x16, 0x8d, 0xd9, 0x1b, 0xbd, 0xa2, 0x6b, 0x03
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs96_ProduceCorrectResult) {

    const u8 s[] = {
        0x38, 0x1f, 0x51, 0x41, 0xc8, 0x21, 0x9a, 0x9f,
        0xd3, 0x2f, 0xa2, 0x8e, 0xbd, 0x35, 0xa1, 0x0a,
        0x58, 0x57, 0x3d, 0x51, 0x86, 0x0e, 0x9b, 0x27,
        0x90, 0xe8, 0x9e, 0x4f, 0x30, 0x8a, 0xf1, 0x0d
    };
    const u8 h[] = {
        0x01, 0x1d, 0xc7, 0xd1, 0xeb, 0x57, 0x89, 0xbe,
        0xf5, 0x4e, 0x54, 0xc8, 0xec, 0xd6, 0xbe, 0x68,
        0xe4, 0xee, 0x1f, 0x3a, 0x06, 0x6f, 0x14, 0x0a,
        0xf8, 0x44, 0x2a, 0xd4, 0x12, 0x86, 0x1a, 0x00
    };
    const u8 encoded_input_point[] = {
        0xd1, 0xc6, 0x07, 0x7a, 0xd5, 0xe0, 0xfd, 0xb7,
        0x88, 0x39, 0x3c, 0xc9, 0xbc, 0xdf, 0x5f, 0xd2,
        0x63, 0xcb, 0x9b, 0xf2, 0x8c, 0x92, 0x1a, 0x65,
        0xf1, 0xeb, 0xf1, 0x01, 0x5f, 0x43, 0x4c, 0xc9
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xcc, 0xda, 0xa8, 0x0b, 0x4d, 0xcd, 0x36, 0xc8,
        0xac, 0x16, 0xb8, 0x6f, 0x0e, 0x7a, 0x8d, 0x24,
        0x52, 0x1e, 0x61, 0x6a, 0x71, 0x28, 0x64, 0xa1,
        0x22, 0xc9, 0x3a, 0xbe, 0x5c, 0x35, 0x1d, 0x0e
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs97_ProduceCorrectResult) {

    const u8 s[] = {
        0x04, 0x3f, 0x75, 0xc0, 0xd9, 0xff, 0x3d, 0x9e,
        0xf4, 0xa6, 0xfc, 0x7f, 0x53, 0xf2, 0x33, 0xba,
        0xd0, 0xee, 0x66, 0xda, 0xe6, 0x56, 0xba, 0x2a,
        0x4b, 0xf3, 0x86, 0x0f, 0x94, 0x06, 0x53, 0x0e
    };
    const u8 h[] = {
        0xe8, 0x8e, 0x88, 0x74, 0x27, 0x93, 0xaf, 0x8f,
        0x4d, 0xd9, 0x07, 0x53, 0x04, 0xd1, 0xd4, 0x5e,
        0xf8, 0xe3, 0x72, 0x62, 0x6c, 0x5b, 0x69, 0xba,
        0xf2, 0xbf, 0x17, 0x0a, 0x14, 0xe5, 0xd8, 0x09
    };
    const u8 encoded_input_point[] = {
        0x72, 0x85, 0xe2, 0x82, 0x1c, 0x08, 0x2d, 0xea,
        0x98, 0xb2, 0x5c, 0xe4, 0xec, 0x72, 0x7b, 0x49,
        0x60, 0xb4, 0x1b, 0x2f, 0xbd, 0xda, 0x68, 0x91,
        0x54, 0x04, 0x73, 0xea, 0xa5, 0x76, 0x4b, 0xba
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xf8, 0x8d, 0xeb, 0x95, 0x18, 0xf4, 0x9e, 0x93,
        0x6b, 0xc0, 0x4d, 0x12, 0x09, 0xb7, 0xdd, 0x06,
        0x7e, 0x17, 0x59, 0xf1, 0xc2, 0x1d, 0x6a, 0xbb,
        0xc0, 0x3f, 0xab, 0x56, 0xa4, 0xb2, 0x2e, 0xca
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs98_ProduceCorrectResult) {

    const u8 s[] = {
        0xeb, 0xdf, 0xda, 0x06, 0x6c, 0x96, 0x56, 0x47,
        0x67, 0x4a, 0x92, 0x85, 0xca, 0x8a, 0x81, 0x72,
        0x1a, 0x48, 0x76, 0xb9, 0xd5, 0xcf, 0x6e, 0x1c,
        0x65, 0x7a, 0xd4, 0xd0, 0xa7, 0x7b, 0xac, 0x0c
    };
    const u8 h[] = {
        0x58, 0x8a, 0x22, 0x8f, 0xb5, 0x0c, 0x93, 0x29,
        0xdc, 0xca, 0x0f, 0x31, 0xc7, 0x57, 0xe7, 0x5d,
        0x0b, 0x5a, 0x63, 0xbc, 0x97, 0xfa, 0xb2, 0xe1,
        0x9d, 0x5f, 0x7f, 0x21, 0x6d, 0xc8, 0x47, 0x0a
    };
    const u8 encoded_input_point[] = {
        0x4c, 0x46, 0xeb, 0x9b, 0x2f, 0x7f, 0xc8, 0xb2,
        0xdf, 0xb6, 0x03, 0xc5, 0x2b, 0xb5, 0x95, 0x77,
        0xa9, 0x44, 0xd2, 0xa3, 0x0a, 0xe0, 0xb6, 0xdb,
        0xb8, 0x89, 0xfe, 0x45, 0xf8, 0xf8, 0xf5, 0x74
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x3e, 0x69, 0x63, 0x72, 0x47, 0xde, 0xc1, 0x26,
        0xc5, 0x43, 0x5f, 0x0d, 0x86, 0x32, 0x4d, 0x00,
        0x96, 0xe2, 0x33, 0xe3, 0x7f, 0x9c, 0x38, 0xe9,
        0x8c, 0x59, 0xb1, 0x64, 0xfe, 0xa2, 0xba, 0x34
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs99_ProduceCorrectResult) {

    const u8 s[] = {
        0x58, 0xc4, 0xea, 0x83, 0xe4, 0xee, 0x7a, 0xce,
        0x58, 0x56, 0x09, 0x13, 0x9c, 0xed, 0xc5, 0xb9,
        0x0f, 0xf9, 0x5c, 0xf8, 0xb8, 0xd7, 0x28, 0x0b,
        0x19, 0x94, 0x6e, 0x4d, 0x66, 0xdc, 0xee, 0x0b
    };
    const u8 h[] = {
        0x97, 0xea, 0xa4, 0x5b, 0x8c, 0xa1, 0x1e, 0x62,
        0x0d, 0x21, 0xb0, 0xac, 0x70, 0xc8, 0x18, 0xae,
        0x33, 0x3c, 0x10, 0x48, 0x9a, 0x10, 0xd1, 0xdf,
        0x1c, 0xd5, 0xd7, 0xfd, 0xc3, 0x43, 0x2f, 0x0d
    };
    const u8 encoded_input_point[] = {
        0x9b, 0x27, 0xb7, 0x32, 0xb2, 0x7a, 0xf4, 0xa6,
        0x7f, 0x9f, 0xaa, 0x52, 0xa6, 0x32, 0xa4, 0xa8,
        0x01, 0xae, 0x7d, 0x06, 0x95, 0xc2, 0x16, 0xc0,
        0x86, 0x82, 0xd5, 0xa0, 0x2c, 0x66, 0xda, 0xc8
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x3e, 0xcc, 0x4e, 0x53, 0x75, 0xce, 0x11, 0xc8,
        0xc7, 0xad, 0xc1, 0xb4, 0xbf, 0x34, 0xe0, 0x79,
        0x91, 0xe4, 0x83, 0x0b, 0x47, 0x99, 0x8c, 0x59,
        0x0d, 0xdb, 0xf2, 0xd2, 0x3b, 0x0a, 0xad, 0xb4
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs100_ProduceCorrectResult) {

    const u8 s[] = {
        0xc7, 0xe5, 0x9c, 0xf5, 0x83, 0x22, 0xb2, 0x3f,
        0x0a, 0x36, 0xff, 0xe9, 0x96, 0x05, 0x91, 0x3b,
        0xbf, 0x04, 0xfe, 0x03, 0xbd, 0xb7, 0xfb, 0x7a,
        0x52, 0x61, 0x9d, 0x00, 0x6a, 0x6a, 0x26, 0x0c
    };
    const u8 h[] = {
        0x1c, 0x8c, 0xdf, 0xb8, 0x6b, 0x0d, 0x9e, 0x86,
        0xff, 0xe5, 0x57, 0xe0, 0x53, 0xe7, 0x0c, 0x77,
        0x5c, 0xa8, 0xda, 0xb8, 0x78, 0x53, 0x1d, 0xc8,
        0x6c, 0xa2, 0xe4, 0x8a, 0xa9, 0x97, 0xb5, 0x07
    };
    const u8 encoded_input_point[] = {
        0xf5, 0x1c, 0x80, 0xe1, 0xf3, 0x87, 0xb5, 0x07,
        0x79, 0x12, 0xed, 0x4f, 0xb7, 0xd0, 0x5c, 0xd4,
        0x20, 0x75, 0x1e, 0x68, 0x4d, 0xa6, 0xef, 0xff,
        0x07, 0x09, 0xc3, 0x7e, 0x6a, 0x20, 0x0a, 0xe4
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x52, 0x42, 0x94, 0x8c, 0xa4, 0xf6, 0xa2, 0x90,
        0x91, 0x4e, 0xbc, 0x4c, 0x4c, 0x33, 0xe4, 0x1f,
        0xb0, 0x80, 0x67, 0x33, 0xa2, 0x1b, 0xb0, 0x14,
        0x20, 0xbc, 0x63, 0x65, 0x24, 0xae, 0x01, 0x27
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs101_ProduceCorrectResult) {

    const u8 s[] = {
        0xba, 0xdb, 0x10, 0x6a, 0xed, 0x27, 0x68, 0x57,
        0x94, 0x24, 0x3f, 0x53, 0xa7, 0x09, 0x5e, 0xa6,
        0x14, 0x4b, 0x05, 0xcb, 0x83, 0xf2, 0x04, 0xd4,
        0xc0, 0x09, 0x5a, 0x68, 0xe6, 0x1a, 0x84, 0x0b
    };
    const u8 h[] = {
        0x36, 0xdf, 0x36, 0xa3, 0xf3, 0x3f, 0xab, 0xd7,
        0x5a, 0x77, 0x5d, 0x9d, 0x4b, 0x62, 0xdb, 0x94,
        0x2f, 0xc9, 0x4e, 0xa7, 0x7a, 0x6e, 0x0d, 0x5f,
        0x05, 0x49, 0x4d, 0x80, 0x6a, 0xf5, 0x39, 0x07
    };
    const u8 encoded_input_point[] = {
        0x19, 0xb5, 0xac, 0x30, 0x26, 0x04, 0x0b, 0xb5,
        0x9e, 0xfa, 0x42, 0x65, 0xdf, 0xee, 0xdb, 0xd8,
        0x22, 0x62, 0x3a, 0x35, 0x58, 0x72, 0x92, 0x15,
        0x7d, 0x4c, 0xd2, 0x19, 0x44, 0x97, 0x07, 0x96
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x14, 0x81, 0x3d, 0x0b, 0x4d, 0x31, 0xeb, 0xcb,
        0xeb, 0x21, 0x12, 0xf5, 0x0f, 0xbc, 0xb1, 0x0b,
        0x1c, 0xc1, 0x9f, 0x3e, 0x85, 0x88, 0x02, 0x08,
        0xbe, 0x0b, 0x13, 0x08, 0xee, 0x8e, 0x95, 0xd0
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs102_ProduceCorrectResult) {

    const u8 s[] = {
        0xd3, 0xb9, 0x0f, 0x79, 0xc5, 0x87, 0x98, 0xf2,
        0x43, 0xe9, 0x5f, 0xe9, 0xd4, 0xe3, 0xc8, 0x0f,
        0x35, 0xa9, 0x4e, 0x9b, 0x16, 0x01, 0x7f, 0xad,
        0xbb, 0xef, 0xe4, 0xd8, 0x96, 0xc6, 0xbd, 0x00
    };
    const u8 h[] = {
        0x8a, 0x73, 0xd9, 0xba, 0x8c, 0x23, 0x00, 0xb4,
        0x70, 0xbc, 0xc8, 0xc7, 0x78, 0x4d, 0x3a, 0x98,
        0x07, 0x2b, 0x43, 0x9e, 0xc1, 0x01, 0xe5, 0x86,
        0x81, 0x33, 0xf7, 0x13, 0x55, 0x91, 0x38, 0x0d
    };
    const u8 encoded_input_point[] = {
        0x11, 0x64, 0x63, 0x6e, 0x62, 0x74, 0x01, 0xd1,
        0xc5, 0x6a, 0xdf, 0xeb, 0x32, 0xc4, 0xf3, 0x74,
        0x09, 0xaa, 0x2b, 0xa6, 0xf6, 0xda, 0xec, 0xda,
        0xf2, 0xf7, 0xa1, 0x2d, 0xe7, 0x60, 0xdf, 0xdf
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x26, 0xaf, 0xf3, 0x49, 0x9e, 0x5c, 0xc7, 0x50,
        0xb3, 0x6a, 0xc6, 0xe5, 0xb6, 0x9f, 0x1c, 0x72,
        0x5d, 0x30, 0x22, 0x98, 0x7b, 0x35, 0x75, 0x50,
        0x36, 0x87, 0xfa, 0x35, 0x66, 0xd4, 0x70, 0x6e
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs103_ProduceCorrectResult) {

    const u8 s[] = {
        0x2e, 0x13, 0x3a, 0x4c, 0xb1, 0x2a, 0xd5, 0x82,
        0x26, 0xad, 0x21, 0x5d, 0xf0, 0x63, 0x5f, 0xfd,
        0xbf, 0x6b, 0x8b, 0x9b, 0xd7, 0x02, 0x6d, 0x3f,
        0x4a, 0xa1, 0xf6, 0x74, 0x96, 0x4c, 0x4a, 0x0a
    };
    const u8 h[] = {
        0x7e, 0x2a, 0x2f, 0xb1, 0x5e, 0x0f, 0x3c, 0xf7,
        0x99, 0x07, 0xda, 0x18, 0x16, 0x62, 0x5a, 0xab,
        0xd1, 0xef, 0xff, 0x23, 0x72, 0x06, 0x93, 0x19,
        0xe4, 0x76, 0x1a, 0x0d, 0xb3, 0xe5, 0x00, 0x0d
    };
    const u8 encoded_input_point[] = {
        0x37, 0xda, 0x58, 0x3a, 0xa6, 0x23, 0xe7, 0xdd,
        0x96, 0xa6, 0x22, 0x2d, 0x29, 0xa6, 0x7e, 0xaf,
        0x0b, 0x62, 0xdc, 0xba, 0x8a, 0xfa, 0x96, 0xdd,
        0x01, 0x13, 0x0d, 0x58, 0xe3, 0xdb, 0x6a, 0x81
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x78, 0x55, 0xc5, 0x4e, 0x10, 0xbc, 0x2c, 0x8f,
        0xb8, 0x2f, 0xee, 0x06, 0x12, 0x3e, 0x7e, 0x02,
        0xd3, 0xe9, 0x10, 0x05, 0x79, 0xac, 0x39, 0x43,
        0x50, 0x55, 0xd0, 0xff, 0x90, 0x6f, 0xf6, 0x94
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs104_ProduceCorrectResult) {

    const u8 s[] = {
        0xab, 0x78, 0xe1, 0xac, 0x27, 0xe9, 0x21, 0x83,
        0x1b, 0xb0, 0xe5, 0x0b, 0x6d, 0x33, 0x54, 0x10,
        0x0c, 0x26, 0x41, 0xa1, 0xd3, 0x4b, 0x72, 0xa7,
        0x4f, 0x62, 0x2d, 0x00, 0xcd, 0xaa, 0x60, 0x01
    };
    const u8 h[] = {
        0xeb, 0xb1, 0x76, 0x2a, 0xb9, 0x3f, 0x0a, 0xa1,
        0xd1, 0x1d, 0x77, 0xf0, 0x36, 0xa8, 0xc6, 0xf5,
        0xfe, 0x18, 0x1a, 0xac, 0x91, 0xfd, 0xf3, 0x27,
        0x2c, 0x82, 0xba, 0x71, 0x46, 0x5b, 0xc4, 0x01
    };
    const u8 encoded_input_point[] = {
        0x05, 0xbf, 0x83, 0x56, 0x4d, 0xf6, 0x59, 0x32,
        0x91, 0x7a, 0xa0, 0xca, 0xad, 0x89, 0x1e, 0xe8,
        0x88, 0xeb, 0x81, 0x31, 0xe5, 0x4d, 0x4e, 0x7b,
        0x7f, 0xe4, 0x92, 0x74, 0xa2, 0x39, 0x47, 0x45
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xb0, 0x13, 0xf5, 0x07, 0xc8, 0x15, 0x28, 0xd3,
        0x5f, 0x03, 0xb6, 0xed, 0xe2, 0x09, 0x9f, 0xee,
        0xfa, 0x98, 0x9d, 0xfd, 0x45, 0x5e, 0x00, 0xb3,
        0x55, 0x1c, 0x79, 0x6c, 0x2b, 0xf4, 0xc8, 0x9f
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs105_ProduceCorrectResult) {

    const u8 s[] = {
        0x02, 0xff, 0x9e, 0x8f, 0x2c, 0x0f, 0xd5, 0xbb,
        0x6a, 0xad, 0x0d, 0x54, 0x95, 0xab, 0xca, 0x4f,
        0xf5, 0x52, 0x21, 0x9a, 0x17, 0x6b, 0xb1, 0x89,
        0x31, 0x7a, 0xf5, 0x3e, 0x30, 0xb3, 0x1d, 0x07
    };
    const u8 h[] = {
        0x1b, 0xbe, 0x98, 0xcc, 0xf6, 0x9d, 0x68, 0x07,
        0x87, 0xb2, 0xb2, 0x31, 0xf3, 0x7f, 0x77, 0x27,
        0x72, 0x97, 0x4a, 0xcd, 0xc2, 0x65, 0xa3, 0x89,
        0x56, 0x3d, 0x1f, 0x27, 0xbc, 0x30, 0x24, 0x02
    };
    const u8 encoded_input_point[] = {
        0x00, 0x7b, 0xf2, 0x85, 0x5f, 0x49, 0xf6, 0xdd,
        0x39, 0x2b, 0x01, 0x32, 0xf0, 0xb4, 0x20, 0xec,
        0x99, 0xe3, 0xf6, 0xe7, 0x5e, 0x3b, 0x82, 0x15,
        0x72, 0x54, 0xb7, 0x3f, 0x62, 0x42, 0x41, 0x50
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x4d, 0x17, 0x9b, 0x4b, 0xd6, 0xeb, 0x1d, 0x24,
        0xf8, 0x8b, 0xae, 0x7c, 0x63, 0x2a, 0x22, 0xb9,
        0x0c, 0xb6, 0xb0, 0x51, 0x31, 0xe6, 0x3a, 0xc3,
        0x9e, 0xcf, 0x2e, 0xf2, 0x0c, 0xdf, 0xfb, 0xf1
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs106_ProduceCorrectResult) {

    const u8 s[] = {
        0x15, 0xdc, 0x35, 0xaf, 0x56, 0x2f, 0xd5, 0xf4,
        0xde, 0x79, 0xb7, 0xb2, 0x42, 0x94, 0x2f, 0x44,
        0xcf, 0xbb, 0x6a, 0xda, 0x50, 0x18, 0x3b, 0x45,
        0x2b, 0x5a, 0xee, 0x45, 0x59, 0x69, 0x86, 0x0f
    };
    const u8 h[] = {
        0xc6, 0xf2, 0xcb, 0x1f, 0x48, 0x3d, 0x64, 0xe4,
        0x69, 0xe8, 0xe2, 0xef, 0xff, 0x28, 0x53, 0xf4,
        0xa9, 0xba, 0xde, 0x49, 0x11, 0x53, 0x66, 0xdb,
        0x97, 0xdd, 0xa1, 0x9b, 0x6a, 0xe4, 0x1d, 0x08
    };
    const u8 encoded_input_point[] = {
        0x0a, 0xf0, 0xa9, 0xa5, 0x40, 0xac, 0xa1, 0x60,
        0xa9, 0x02, 0x57, 0x6b, 0xf5, 0x08, 0xb4, 0x49,
        0x0b, 0xbd, 0x48, 0xb7, 0x63, 0xef, 0xc2, 0xe3,
        0x1c, 0xd1, 0x6a, 0x72, 0xb6, 0xec, 0x9b, 0xbc
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xb5, 0x87, 0x6e, 0x16, 0xad, 0x5c, 0x92, 0x20,
        0x22, 0x82, 0x05, 0x36, 0x3e, 0x16, 0x06, 0x08,
        0x4f, 0x3c, 0x06, 0xc7, 0xbd, 0x2f, 0x79, 0xd7,
        0x20, 0x65, 0x7f, 0x1d, 0x02, 0x21, 0xba, 0x5d
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs107_ProduceCorrectResult) {

    const u8 s[] = {
        0x08, 0x4a, 0x50, 0x27, 0x30, 0x65, 0xaf, 0xd5,
        0x2b, 0xce, 0x5e, 0x5f, 0xa9, 0xae, 0xe6, 0x5d,
        0x0e, 0xa9, 0xb3, 0x3d, 0xf7, 0x0a, 0xdd, 0xb9,
        0x07, 0x3a, 0xb7, 0x31, 0x9e, 0x9c, 0x7a, 0x01
    };
    const u8 h[] = {
        0xfb, 0xa5, 0x34, 0x21, 0x99, 0x9f, 0xa9, 0xa3,
        0x71, 0x85, 0x74, 0x3a, 0x9f, 0x3a, 0xcc, 0xd4,
        0xe7, 0x99, 0xa6, 0x87, 0xc7, 0x7d, 0xf5, 0x18,
        0xdc, 0xee, 0x7d, 0x6e, 0x4e, 0x2c, 0xa5, 0x05
    };
    const u8 encoded_input_point[] = {
        0x6a, 0x26, 0xd2, 0x8d, 0xbd, 0x7f, 0xb6, 0xcc,
        0x4e, 0xbb, 0x49, 0x9a, 0xbf, 0x72, 0xe0, 0x97,
        0x71, 0x35, 0xff, 0xd0, 0xb7, 0xf1, 0xba, 0xf7,
        0x0e, 0x10, 0x25, 0x44, 0x1c, 0xb5, 0xe0, 0xb5
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x49, 0x44, 0x58, 0x73, 0x91, 0xff, 0xd0, 0x48,
        0xfa, 0xc1, 0x0e, 0x0d, 0x51, 0x18, 0x12, 0x24,
        0x2f, 0x9f, 0x26, 0x94, 0x7d, 0x82, 0x5d, 0x17,
        0xc7, 0xed, 0x6e, 0x10, 0x03, 0x47, 0x14, 0x79
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs108_ProduceCorrectResult) {

    const u8 s[] = {
        0x59, 0x78, 0x9a, 0x0f, 0xe3, 0x51, 0x77, 0x20,
        0xca, 0x60, 0xee, 0x02, 0xec, 0x4a, 0xdd, 0xd5,
        0x0b, 0xbc, 0x2d, 0x88, 0x90, 0x1f, 0x2c, 0x6c,
        0xc6, 0xa5, 0xfd, 0xc9, 0x4a, 0x8c, 0x14, 0x04
    };
    const u8 h[] = {
        0xce, 0xeb, 0x51, 0x39, 0xca, 0xef, 0x25, 0x4a,
        0xf0, 0xe3, 0x0e, 0xf5, 0x68, 0x0c, 0xc4, 0xa0,
        0xaf, 0xa1, 0xd5, 0xe9, 0xbc, 0x72, 0x76, 0x42,
        0xed, 0x4d, 0x68, 0x68, 0x70, 0xf4, 0xb5, 0x04
    };
    const u8 encoded_input_point[] = {
        0xee, 0xdb, 0x77, 0x52, 0x1b, 0xaf, 0x55, 0x93,
        0x99, 0x00, 0xeb, 0xce, 0x55, 0x6b, 0xa7, 0xe1,
        0x16, 0x6d, 0xed, 0xb5, 0xca, 0x19, 0x0d, 0xb3,
        0x82, 0x05, 0x3a, 0x9b, 0x08, 0x43, 0xe6, 0x03
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x27, 0xf1, 0x44, 0x58, 0xa8, 0x80, 0x18, 0xc5,
        0xfd, 0x3a, 0xd1, 0x24, 0x1e, 0x69, 0xd9, 0xef,
        0xf1, 0x87, 0x45, 0x3b, 0x58, 0x3d, 0x35, 0x90,
        0x07, 0x4b, 0x92, 0xbc, 0xe6, 0x7b, 0xfd, 0xad
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs109_ProduceCorrectResult) {

    const u8 s[] = {
        0x95, 0xee, 0xff, 0x86, 0x5e, 0x9b, 0xc0, 0xe2,
        0xfe, 0xfe, 0xab, 0xe4, 0x16, 0xbd, 0xa3, 0x95,
        0x90, 0xb7, 0xd8, 0xeb, 0x51, 0x3e, 0xb2, 0xf9,
        0xee, 0x5e, 0x21, 0xf8, 0xde, 0xb7, 0x5e, 0x03
    };
    const u8 h[] = {
        0xf9, 0xf1, 0xac, 0x1e, 0xad, 0x26, 0x29, 0xf2,
        0x46, 0x7f, 0x27, 0xa3, 0x24, 0xde, 0xe6, 0x7d,
        0x9d, 0x98, 0x32, 0x68, 0x41, 0x20, 0x63, 0x24,
        0xa8, 0x52, 0x5f, 0xbc, 0x8c, 0x12, 0x6c, 0x0e
    };
    const u8 encoded_input_point[] = {
        0x2f, 0xf0, 0xf6, 0xf3, 0x7a, 0x7f, 0xd3, 0xa7,
        0xae, 0x7d, 0x65, 0x4a, 0x0b, 0x7c, 0xa9, 0x1c,
        0x1e, 0x5b, 0x5b, 0xfd, 0xdd, 0x48, 0x14, 0x8e,
        0x75, 0x4f, 0x3a, 0xc6, 0x9b, 0x82, 0x36, 0xac
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xcd, 0x0a, 0xc0, 0xa0, 0x06, 0x73, 0xe3, 0xd0,
        0xff, 0xed, 0xda, 0x09, 0x0c, 0x6a, 0x09, 0xe5,
        0xa6, 0xf3, 0xa8, 0xb9, 0x02, 0x21, 0x97, 0x39,
        0x8d, 0x22, 0x2d, 0xfb, 0x19, 0x0f, 0xd6, 0xff
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs110_ProduceCorrectResult) {

    const u8 s[] = {
        0x8a, 0xb6, 0xf3, 0x6f, 0x27, 0x99, 0xa4, 0xfe,
        0xed, 0xf7, 0x23, 0x2f, 0x44, 0x26, 0x00, 0x15,
        0x56, 0xf3, 0xd6, 0xd3, 0x07, 0x2d, 0xc7, 0xe7,
        0xc3, 0x44, 0xbe, 0xfc, 0xc2, 0xdc, 0xa2, 0x0b
    };
    const u8 h[] = {
        0x23, 0xe3, 0x6a, 0x8a, 0x82, 0x0f, 0xf0, 0xae,
        0x3f, 0x27, 0x53, 0xab, 0xf0, 0xc1, 0x2e, 0x94,
        0xa2, 0x0e, 0xab, 0x7c, 0x8d, 0x8a, 0xd8, 0x96,
        0x2b, 0xc3, 0x73, 0x03, 0x2f, 0x71, 0x06, 0x09
    };
    const u8 encoded_input_point[] = {
        0xf6, 0xa0, 0xf7, 0x8f, 0xe7, 0x87, 0x58, 0xf9,
        0x12, 0x72, 0x94, 0xfe, 0xcf, 0xf8, 0x40, 0x39,
        0xf6, 0x4e, 0x08, 0xaa, 0x5b, 0xd2, 0x6a, 0x4d,
        0x05, 0xa1, 0x9f, 0x33, 0xc2, 0xd4, 0xb6, 0xab
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x13, 0x2c, 0x50, 0x2d, 0x45, 0xad, 0x52, 0x6e,
        0x6f, 0x2d, 0x77, 0xb7, 0x19, 0x40, 0xc2, 0x5e,
        0xd4, 0x57, 0xe6, 0x4b, 0xbc, 0x27, 0x21, 0xb9,
        0x09, 0x7c, 0x0e, 0xa4, 0xd5, 0xc4, 0xf8, 0xa4
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs111_ProduceCorrectResult) {

    const u8 s[] = {
        0x40, 0x04, 0x5f, 0x14, 0x64, 0x31, 0xa2, 0x81,
        0x04, 0x4e, 0xc5, 0xeb, 0x24, 0x5f, 0xab, 0x52,
        0xda, 0xef, 0x61, 0xa5, 0x2d, 0x5d, 0x1d, 0x88,
        0x0a, 0xad, 0x0c, 0xc2, 0xde, 0x06, 0x3f, 0x0e
    };
    const u8 h[] = {
        0x9e, 0x65, 0x5d, 0xed, 0xd5, 0xe8, 0xe1, 0xe8,
        0xda, 0xc2, 0x06, 0xca, 0x05, 0x1f, 0x65, 0xd9,
        0x2c, 0x82, 0x77, 0x18, 0x51, 0x20, 0x53, 0x6b,
        0x5b, 0x74, 0x9f, 0x9d, 0xb8, 0xc1, 0x8e, 0x0a
    };
    const u8 encoded_input_point[] = {
        0xb2, 0x6e, 0x47, 0xe8, 0xa1, 0x01, 0x01, 0x2c,
        0xe0, 0xf0, 0xfc, 0x29, 0xb2, 0x9c, 0xd4, 0xea,
        0xa2, 0x61, 0x86, 0x02, 0x38, 0x50, 0xd4, 0x13,
        0xc1, 0x7a, 0x98, 0x73, 0x10, 0x0e, 0x30, 0x26
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x09, 0x00, 0xff, 0x4e, 0x78, 0x6b, 0x48, 0x7e,
        0xc1, 0xd6, 0xae, 0xae, 0x9d, 0xa9, 0x27, 0x33,
        0x04, 0xfa, 0x31, 0x54, 0x51, 0xdf, 0x96, 0x9b,
        0xc9, 0x30, 0x1b, 0x68, 0xc6, 0x0e, 0x6b, 0x7a
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs112_ProduceCorrectResult) {

    const u8 s[] = {
        0x70, 0x81, 0x61, 0xbc, 0x45, 0x0d, 0x18, 0x9d,
        0x1e, 0xe2, 0xf1, 0x1b, 0xe1, 0xd1, 0xac, 0x02,
        0xc3, 0xab, 0xb9, 0xa8, 0x22, 0xf8, 0x93, 0x89,
        0x53, 0x32, 0xfc, 0x14, 0x67, 0x58, 0xf0, 0x00
    };
    const u8 h[] = {
        0xf1, 0xc5, 0x0d, 0x77, 0xee, 0x6f, 0xe6, 0x8d,
        0xf5, 0x7b, 0x97, 0x3e, 0xf6, 0xfe, 0xb1, 0x38,
        0xaa, 0x82, 0x35, 0x55, 0xe9, 0xd5, 0x15, 0x2a,
        0x1e, 0x02, 0x62, 0xb9, 0xda, 0x2c, 0xbc, 0x02
    };
    const u8 encoded_input_point[] = {
        0x98, 0x1f, 0x6a, 0x2d, 0x9f, 0xef, 0xb4, 0x13,
        0x57, 0xd3, 0xa1, 0x8e, 0xfe, 0xa6, 0x7a, 0x9b,
        0x65, 0xf5, 0x0e, 0xd2, 0x94, 0xa3, 0x78, 0x95,
        0xb8, 0x2d, 0x71, 0x41, 0xf9, 0x0e, 0xe8, 0x17
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x61, 0x23, 0x15, 0x49, 0x10, 0x89, 0x61, 0x13,
        0xbe, 0xbf, 0xc4, 0x07, 0x0c, 0xa0, 0xfa, 0xd4,
        0xcb, 0x86, 0x77, 0x8e, 0xf5, 0x22, 0x24, 0xd9,
        0xb8, 0xd0, 0x26, 0xf1, 0xdb, 0x9f, 0xc9, 0xfe
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs113_ProduceCorrectResult) {

    const u8 s[] = {
        0x86, 0xac, 0xea, 0x09, 0xb1, 0x0a, 0x1a, 0xba,
        0x48, 0x93, 0x7d, 0x6e, 0xa8, 0x96, 0xf9, 0xd6,
        0x0e, 0x8a, 0x65, 0xf7, 0x81, 0x86, 0xc4, 0x70,
        0x3c, 0xd2, 0x9d, 0x09, 0x96, 0x08, 0xd2, 0x0d
    };
    const u8 h[] = {
        0x78, 0xda, 0xa9, 0x43, 0x28, 0x24, 0xd0, 0x4f,
        0x17, 0x9b, 0xf5, 0xaf, 0x4c, 0x5f, 0x9d, 0x49,
        0x65, 0x88, 0x11, 0xfa, 0xcf, 0x75, 0x6a, 0xa8,
        0x91, 0x55, 0x0c, 0x1d, 0x0d, 0x67, 0xba, 0x0a
    };
    const u8 encoded_input_point[] = {
        0xde, 0x43, 0x01, 0xc9, 0xc4, 0xcc, 0x62, 0x37,
        0xaa, 0x87, 0x0e, 0xda, 0xca, 0xae, 0xea, 0x47,
        0x77, 0x84, 0x22, 0xcd, 0x68, 0x2e, 0xfe, 0x7f,
        0x5a, 0x10, 0x0f, 0xeb, 0x3c, 0x8a, 0x23, 0xe0
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x97, 0xac, 0x06, 0x3d, 0xd8, 0x3e, 0x1d, 0x61,
        0xf3, 0x10, 0xbe, 0xff, 0xb6, 0x68, 0xfb, 0xb7,
        0x88, 0x2c, 0x95, 0x53, 0x5d, 0x58, 0xcf, 0x8f,
        0xfb, 0xe7, 0x49, 0xbb, 0xde, 0x9d, 0x9f, 0xe8
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs114_ProduceCorrectResult) {

    const u8 s[] = {
        0x21, 0x8a, 0x49, 0x66, 0x5f, 0x74, 0xa7, 0x15,
        0x0c, 0xe0, 0xba, 0x1e, 0x25, 0xd0, 0x61, 0x6f,
        0x6b, 0x93, 0xe5, 0xdd, 0xf3, 0x9a, 0x5d, 0x63,
        0x05, 0x15, 0x64, 0xca, 0x7f, 0xf0, 0x50, 0x05
    };
    const u8 h[] = {
        0xd4, 0x0f, 0xe1, 0x8a, 0xda, 0x41, 0x3b, 0x1d,
        0x22, 0x6f, 0x33, 0xfa, 0xfa, 0x49, 0x9b, 0xba,
        0xf4, 0xec, 0x70, 0xd5, 0x57, 0xe6, 0x9c, 0x71,
        0x28, 0x31, 0x52, 0x93, 0x5a, 0xf1, 0xc2, 0x00
    };
    const u8 encoded_input_point[] = {
        0x3f, 0x13, 0x10, 0xfa, 0x42, 0x6c, 0x1c, 0x6d,
        0x05, 0x75, 0x51, 0x66, 0x57, 0xae, 0xc4, 0xde,
        0x37, 0xd8, 0xc9, 0x9d, 0x1a, 0x0e, 0x38, 0x9c,
        0x34, 0xd0, 0x31, 0xc0, 0xa5, 0x42, 0x8b, 0xe4
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x8b, 0x9c, 0x21, 0x43, 0x47, 0x05, 0x84, 0x05,
        0x27, 0xe7, 0xb6, 0xff, 0xcd, 0xf0, 0x57, 0x5c,
        0xb7, 0xc3, 0x5f, 0x0c, 0x7b, 0x8c, 0xce, 0x38,
        0x57, 0x24, 0x04, 0x72, 0x33, 0x55, 0x39, 0xec
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs115_ProduceCorrectResult) {

    const u8 s[] = {
        0x4a, 0xb1, 0xa2, 0xa5, 0x59, 0x55, 0x89, 0x3f,
        0x3d, 0x78, 0x51, 0xd8, 0xc4, 0x21, 0x1f, 0xa6,
        0x52, 0xd4, 0xd0, 0x5a, 0x38, 0xe4, 0x7f, 0xed,
        0xf5, 0xa6, 0x32, 0x2d, 0xab, 0x50, 0xce, 0x01
    };
    const u8 h[] = {
        0x94, 0x44, 0x0d, 0x3f, 0xa9, 0x08, 0x2f, 0x07,
        0x59, 0x69, 0x83, 0xdb, 0xff, 0x9e, 0xd3, 0x82,
        0xbc, 0x75, 0x23, 0xd7, 0xcb, 0x94, 0x31, 0x6f,
        0x8d, 0xfb, 0x7b, 0xc5, 0xfa, 0x46, 0xc3, 0x06
    };
    const u8 encoded_input_point[] = {
        0x8e, 0xee, 0x65, 0xd7, 0x4f, 0x2d, 0x7e, 0x22,
        0x6e, 0x4d, 0xcc, 0x20, 0x35, 0x33, 0x09, 0xe2,
        0x58, 0x48, 0x05, 0x1c, 0x6a, 0x4a, 0xca, 0x6f,
        0x8a, 0x0d, 0xb5, 0xab, 0xb0, 0x2b, 0x64, 0x1d
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x51, 0xaa, 0xc4, 0x64, 0x45, 0xd5, 0xa8, 0x53,
        0x2b, 0x9d, 0x84, 0xc4, 0x60, 0x43, 0x29, 0x8f,
        0xee, 0x53, 0x0c, 0x8c, 0x53, 0x96, 0xaa, 0x2a,
        0x79, 0x02, 0xd1, 0x42, 0xe5, 0x55, 0xbc, 0xe2
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs116_ProduceCorrectResult) {

    const u8 s[] = {
        0x8e, 0x69, 0x4a, 0xc7, 0x4f, 0x4b, 0x63, 0x95,
        0x81, 0x58, 0xbc, 0x08, 0x69, 0x16, 0x75, 0xaf,
        0x19, 0xfa, 0x77, 0xf4, 0xdb, 0x34, 0x15, 0xf1,
        0x5b, 0xc6, 0x09, 0x57, 0x86, 0xde, 0xc5, 0x0a
    };
    const u8 h[] = {
        0x5c, 0xd4, 0x90, 0x8c, 0xe6, 0x99, 0xf6, 0xc7,
        0x65, 0x2b, 0xb5, 0x75, 0xb6, 0xea, 0xb5, 0x6f,
        0x9c, 0x41, 0x30, 0x9b, 0x76, 0x12, 0xb1, 0x64,
        0x93, 0xc1, 0xe4, 0xa1, 0x6e, 0x4a, 0x74, 0x09
    };
    const u8 encoded_input_point[] = {
        0x72, 0xfe, 0x15, 0xf3, 0x50, 0x62, 0x1c, 0xfc,
        0x29, 0x2a, 0xb4, 0xe1, 0xb8, 0x17, 0x92, 0x6e,
        0x8a, 0xf6, 0x8f, 0xc0, 0xd5, 0x78, 0x74, 0xb6,
        0x1f, 0x1e, 0x98, 0x08, 0x9c, 0x67, 0x73, 0x40
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x0f, 0x43, 0x3d, 0x53, 0xe8, 0x60, 0xa7, 0x55,
        0xe0, 0x2a, 0x20, 0xac, 0x34, 0x39, 0xe9, 0x72,
        0x8e, 0x73, 0xbc, 0x8f, 0x4d, 0x5e, 0x38, 0x9b,
        0x78, 0xa6, 0xdc, 0x53, 0x7b, 0xa9, 0x35, 0x93
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs117_ProduceCorrectResult) {

    const u8 s[] = {
        0x47, 0x76, 0xa3, 0xfd, 0xf4, 0x1a, 0x1f, 0x58,
        0x2d, 0xa3, 0xef, 0x8a, 0xa1, 0x42, 0x2d, 0xb1,
        0xf8, 0x39, 0xc8, 0x32, 0x7d, 0xbb, 0xeb, 0x16,
        0x6a, 0xd4, 0x02, 0x21, 0xe5, 0x5b, 0x61, 0x05
    };
    const u8 h[] = {
        0xb3, 0x54, 0x74, 0x3f, 0xfb, 0x16, 0x0e, 0xad,
        0x55, 0xfa, 0xb5, 0xf9, 0x6f, 0x24, 0xcd, 0xc6,
        0x01, 0x33, 0xa8, 0xc0, 0xe4, 0xfe, 0xa9, 0xc4,
        0x7f, 0x88, 0x71, 0x3a, 0xd7, 0x0a, 0x8a, 0x03
    };
    const u8 encoded_input_point[] = {
        0xed, 0xeb, 0xf0, 0xe0, 0x9e, 0xff, 0xb8, 0xbf,
        0x51, 0xed, 0xf5, 0x90, 0xe0, 0xda, 0x25, 0x81,
        0x28, 0x6b, 0x03, 0x5a, 0x8d, 0x77, 0xaa, 0xa3,
        0xb0, 0x0b, 0xc8, 0x6d, 0x99, 0x1b, 0x97, 0xdb
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xc0, 0x8a, 0xc1, 0x96, 0x19, 0x5c, 0x91, 0x2f,
        0xbc, 0x0e, 0x4f, 0x91, 0x34, 0x86, 0x52, 0x70,
        0xb2, 0x93, 0x80, 0x53, 0x82, 0xc2, 0x1a, 0x9c,
        0x24, 0x47, 0xf1, 0x3e, 0xbc, 0xe8, 0xfa, 0x85
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs118_ProduceCorrectResult) {

    const u8 s[] = {
        0xbe, 0x16, 0xa2, 0x08, 0x84, 0x13, 0x46, 0xb5,
        0xe7, 0xa0, 0xec, 0xf9, 0xbe, 0x30, 0xdd, 0x1b,
        0x1a, 0xa5, 0xcb, 0x9a, 0x98, 0xf7, 0xd2, 0x7a,
        0x38, 0xb0, 0x3c, 0x77, 0x3e, 0x87, 0x96, 0x01
    };
    const u8 h[] = {
        0x1b, 0x55, 0x6c, 0xd9, 0xe9, 0x0e, 0xe3, 0x7e,
        0xce, 0xec, 0xb4, 0x85, 0xda, 0x4e, 0xee, 0x41,
        0x53, 0x95, 0x5d, 0x9b, 0x5f, 0x86, 0xe8, 0x66,
        0xcb, 0x51, 0xab, 0x68, 0x97, 0x32, 0x17, 0x04
    };
    const u8 encoded_input_point[] = {
        0x3a, 0x46, 0x4b, 0x05, 0x87, 0x68, 0x4d, 0x86,
        0xce, 0xac, 0xbb, 0xa9, 0x11, 0x00, 0x20, 0x07,
        0x99, 0x0a, 0x4e, 0x8a, 0x89, 0xe6, 0x63, 0xa2,
        0xe5, 0xf4, 0x8e, 0x47, 0xc0, 0xd8, 0x69, 0x5a
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xb3, 0x7b, 0x87, 0x84, 0x73, 0xc5, 0x7e, 0xa3,
        0xac, 0x00, 0x6f, 0xd8, 0x6e, 0x5f, 0x8f, 0xad,
        0xec, 0xab, 0x83, 0x08, 0x21, 0xc3, 0xbc, 0xe2,
        0xd1, 0xb8, 0x63, 0x29, 0x56, 0x9b, 0xa8, 0x8a
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs119_ProduceCorrectResult) {

    const u8 s[] = {
        0x3b, 0xee, 0x7e, 0x6d, 0x13, 0xeb, 0x59, 0x71,
        0xe5, 0x99, 0x38, 0x31, 0xdf, 0x2c, 0x67, 0x3f,
        0xbf, 0xb3, 0xff, 0x07, 0x0c, 0x58, 0x1a, 0xd5,
        0xa5, 0x22, 0x38, 0x74, 0x7c, 0xf8, 0x47, 0x08
    };
    const u8 h[] = {
        0x89, 0x1b, 0x7e, 0x0a, 0x31, 0x1f, 0x86, 0x77,
        0x27, 0x23, 0x5c, 0xca, 0xa3, 0x23, 0xd0, 0xad,
        0x88, 0x79, 0x1d, 0x3e, 0x2a, 0xbf, 0x08, 0x6b,
        0x58, 0x41, 0xfb, 0xc2, 0x4f, 0x6c, 0xd6, 0x0c
    };
    const u8 encoded_input_point[] = {
        0x76, 0x59, 0x84, 0xcc, 0x32, 0x5a, 0x95, 0x50,
        0xc6, 0xef, 0x64, 0x92, 0x09, 0x3e, 0x80, 0x06,
        0x6e, 0x64, 0x18, 0xd2, 0x81, 0xd7, 0xab, 0xa8,
        0xa7, 0x9a, 0x5b, 0x3f, 0x0d, 0x7f, 0xc4, 0xba
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x5f, 0xfe, 0xc9, 0x04, 0xd5, 0xd0, 0x42, 0xd3,
        0x6b, 0x2b, 0x8d, 0xb7, 0x12, 0x20, 0x17, 0xc7,
        0x87, 0xed, 0x2e, 0xa3, 0x7e, 0xd0, 0xb4, 0xba,
        0x1e, 0x62, 0xfe, 0xe4, 0x4b, 0x0b, 0x3b, 0x6d
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs120_ProduceCorrectResult) {

    const u8 s[] = {
        0x4d, 0x5d, 0x93, 0x68, 0xb9, 0x9f, 0xc6, 0x58,
        0x32, 0xab, 0x04, 0x8a, 0x50, 0xb1, 0x4b, 0xa6,
        0x97, 0x64, 0x04, 0xd3, 0x5b, 0xa9, 0x6d, 0xf5,
        0x5b, 0x13, 0xa1, 0x9a, 0x06, 0xc7, 0x07, 0x01
    };
    const u8 h[] = {
        0xa3, 0x96, 0xd2, 0xfa, 0x84, 0x64, 0xc3, 0xb4,
        0xb2, 0xb8, 0x55, 0x4f, 0x68, 0x50, 0xa7, 0x85,
        0xe1, 0x9f, 0x0b, 0x55, 0x9d, 0x41, 0xee, 0x2c,
        0x1a, 0xa9, 0x72, 0x61, 0xa4, 0xb5, 0x3a, 0x09
    };
    const u8 encoded_input_point[] = {
        0xe6, 0xa3, 0xe1, 0xac, 0xa7, 0x9b, 0x28, 0x99,
        0x8d, 0x4d, 0x85, 0x8e, 0x28, 0xaa, 0xd1, 0x0e,
        0xb9, 0x02, 0xfc, 0x09, 0x1a, 0x5d, 0xf2, 0x81,
        0x84, 0xd4, 0x52, 0x76, 0x83, 0xb1, 0x59, 0x9f
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xd1, 0xe2, 0x65, 0x6a, 0xf8, 0x9a, 0xdd, 0xd8,
        0x62, 0x1f, 0xa7, 0xb4, 0x47, 0x4d, 0xe0, 0x2c,
        0x58, 0xa7, 0x93, 0xbd, 0x1a, 0x39, 0x05, 0x6a,
        0x73, 0xec, 0xbe, 0x3f, 0x5c, 0x08, 0x73, 0xec
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs121_ProduceCorrectResult) {

    const u8 s[] = {
        0xcb, 0x87, 0x75, 0x8f, 0x06, 0x10, 0xb1, 0x1a,
        0x01, 0x47, 0x4e, 0x0d, 0xb0, 0x99, 0x10, 0xd1,
        0xde, 0x22, 0xea, 0xff, 0x6b, 0x3b, 0xea, 0x55,
        0xe6, 0x40, 0x3b, 0x16, 0x43, 0x90, 0x30, 0x0e
    };
    const u8 h[] = {
        0x46, 0x43, 0x02, 0xae, 0x3e, 0x6c, 0x9e, 0x3a,
        0xfa, 0xc2, 0x46, 0xed, 0xf4, 0xe0, 0x5d, 0x86,
        0x27, 0x39, 0x23, 0xc1, 0x21, 0xfc, 0xee, 0x16,
        0x35, 0x1e, 0x5a, 0x7c, 0x4d, 0x5d, 0x76, 0x01
    };
    const u8 encoded_input_point[] = {
        0x18, 0x99, 0xb2, 0xbf, 0xfe, 0x50, 0x87, 0xa8,
        0xfc, 0xfb, 0xff, 0x02, 0x5d, 0xb4, 0xe8, 0xd8,
        0x30, 0xc8, 0x85, 0xdb, 0xa8, 0x49, 0x9e, 0xc9,
        0xf5, 0x1b, 0x60, 0x83, 0x03, 0x2a, 0x8c, 0xad
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x8a, 0xef, 0xa8, 0xc4, 0x6f, 0x48, 0x9f, 0x77,
        0x63, 0xe4, 0x78, 0x66, 0x5c, 0xd9, 0x07, 0x81,
        0xc7, 0x61, 0xfb, 0x7c, 0x6b, 0xf6, 0xbf, 0xc8,
        0x5c, 0x26, 0xa4, 0x4a, 0x39, 0x31, 0x88, 0x6a
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs122_ProduceCorrectResult) {

    const u8 s[] = {
        0x71, 0x49, 0x3d, 0x2e, 0x09, 0x1f, 0x53, 0xc9,
        0xec, 0xa3, 0x50, 0x7f, 0x7f, 0x88, 0x9a, 0x78,
        0x57, 0xab, 0x3e, 0x74, 0xd3, 0xf5, 0x24, 0x03,
        0x2c, 0xf9, 0xff, 0x70, 0x91, 0xf0, 0x61, 0x0b
    };
    const u8 h[] = {
        0xd6, 0xc9, 0x65, 0xe1, 0xaf, 0x1f, 0x35, 0x2e,
        0x7d, 0x8d, 0x5f, 0xfc, 0xdb, 0xe0, 0x8d, 0x54,
        0xc9, 0xcf, 0x4c, 0xf6, 0x2e, 0x1f, 0x57, 0xe3,
        0xe6, 0x1d, 0xa3, 0x1a, 0xed, 0x85, 0xca, 0x0f
    };
    const u8 encoded_input_point[] = {
        0xa2, 0xc0, 0x14, 0x84, 0xd7, 0xce, 0x72, 0xb6,
        0x9a, 0x51, 0xbc, 0x66, 0x47, 0x43, 0xe3, 0x58,
        0xa6, 0xb1, 0xe7, 0x9b, 0xd1, 0x0b, 0xc5, 0x8c,
        0x23, 0xfd, 0x51, 0xac, 0x86, 0xfb, 0xdc, 0x7a
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x73, 0xf2, 0x3a, 0xef, 0xec, 0xd6, 0xf7, 0xbe,
        0x81, 0xf4, 0xe6, 0x3e, 0xce, 0xdf, 0x76, 0xc0,
        0x6b, 0x99, 0x63, 0x4e, 0x82, 0xe0, 0x51, 0x30,
        0x2b, 0x3f, 0xd1, 0x56, 0xed, 0x2c, 0x6e, 0xa8
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs123_ProduceCorrectResult) {

    const u8 s[] = {
        0x59, 0xab, 0x9c, 0x2d, 0x9d, 0x9a, 0x69, 0x58,
        0x52, 0x5e, 0x85, 0x5a, 0xa1, 0x68, 0x84, 0xd9,
        0xcd, 0x89, 0xf1, 0xeb, 0x82, 0x57, 0xe2, 0xe4,
        0xf2, 0x1c, 0xa6, 0x8d, 0x38, 0xb1, 0xed, 0x0c
    };
    const u8 h[] = {
        0x9e, 0x82, 0x55, 0x69, 0x4e, 0xf5, 0x0b, 0x30,
        0xc2, 0xb1, 0xd1, 0x20, 0x95, 0xf4, 0xf1, 0xe5,
        0x98, 0xcc, 0x7e, 0x65, 0xf1, 0xb2, 0x3a, 0xb9,
        0x55, 0xf3, 0x50, 0x72, 0x12, 0x26, 0x65, 0x09
    };
    const u8 encoded_input_point[] = {
        0x47, 0x08, 0x12, 0x16, 0xe6, 0xda, 0x60, 0x50,
        0x53, 0x6b, 0x89, 0x69, 0x32, 0xa1, 0x14, 0x82,
        0xa9, 0x0e, 0x1c, 0x35, 0x06, 0x82, 0x7e, 0xb5,
        0xd5, 0xe5, 0x63, 0x06, 0xb4, 0xe7, 0x70, 0xc3
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x5c, 0xa2, 0xea, 0x6d, 0x1c, 0x40, 0x1a, 0x9b,
        0x43, 0xe3, 0x80, 0x58, 0x1e, 0x96, 0x11, 0x91,
        0x05, 0x88, 0x67, 0xb1, 0x46, 0x46, 0x3b, 0xa5,
        0x7d, 0x9a, 0x4f, 0xc1, 0x96, 0x39, 0x22, 0x78
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs124_ProduceCorrectResult) {

    const u8 s[] = {
        0x63, 0x96, 0x4c, 0x58, 0xfd, 0x49, 0x39, 0x9a,
        0xac, 0xc0, 0x1e, 0x45, 0x5b, 0xb1, 0xa6, 0x2f,
        0x72, 0x38, 0xbf, 0x0c, 0xae, 0x0d, 0xee, 0xa5,
        0x1b, 0x4b, 0x40, 0x18, 0xc8, 0xca, 0x3a, 0x0b
    };
    const u8 h[] = {
        0x6f, 0xbd, 0x4d, 0xae, 0x69, 0x43, 0x51, 0xd2,
        0x2e, 0x98, 0xf1, 0x18, 0x21, 0xcd, 0xc9, 0x2c,
        0xea, 0x2f, 0x6c, 0x96, 0xe6, 0xa9, 0x4a, 0x25,
        0xa1, 0xca, 0x8c, 0x53, 0x33, 0x77, 0x39, 0x03
    };
    const u8 encoded_input_point[] = {
        0xdc, 0xc0, 0x64, 0x62, 0x5a, 0x9e, 0x7d, 0x71,
        0x96, 0x95, 0x33, 0xe6, 0x05, 0x75, 0x8b, 0x7f,
        0xb5, 0xfd, 0x2f, 0xd1, 0x4b, 0x93, 0xc6, 0xdd,
        0x7b, 0x75, 0x4a, 0xec, 0x0e, 0xc8, 0x97, 0x4d
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0xf3, 0xfa, 0xc8, 0x0b, 0x29, 0x53, 0xdb, 0x06,
        0xa1, 0xf2, 0xeb, 0xa1, 0xb8, 0xa7, 0xce, 0x94,
        0x6a, 0x76, 0xa1, 0xa6, 0xfe, 0x83, 0x73, 0x68,
        0xce, 0x1b, 0xf0, 0x52, 0x64, 0xf9, 0xe5, 0xca
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs125_ProduceCorrectResult) {

    const u8 s[] = {
        0x2c, 0xf3, 0xc5, 0xc3, 0x09, 0x71, 0xe3, 0xcf,
        0x67, 0x06, 0xbb, 0x55, 0x41, 0x2b, 0x01, 0x26,
        0x43, 0x3f, 0xc8, 0x02, 0xc2, 0x8b, 0xeb, 0x0b,
        0xa5, 0xa9, 0xfa, 0x18, 0xdc, 0x96, 0xe7, 0x0b
    };
    const u8 h[] = {
        0xb8, 0x10, 0xbe, 0xa6, 0x0e, 0x53, 0xbd, 0xda,
        0xef, 0x75, 0x21, 0x9b, 0xb5, 0x18, 0x26, 0x53,
        0xe3, 0x8c, 0x10, 0xc3, 0x64, 0x8b, 0x52, 0x78,
        0x85, 0xa2, 0xe3, 0xda, 0xa2, 0x7a, 0x16, 0x08
    };
    const u8 encoded_input_point[] = {
        0xca, 0x80, 0x1c, 0x47, 0x3b, 0xd0, 0xad, 0x17,
        0x7a, 0x27, 0x06, 0xd4, 0xb3, 0xfa, 0x31, 0x10,
        0x15, 0x41, 0xf5, 0x2f, 0x58, 0x19, 0x0c, 0x4e,
        0x46, 0x6f, 0x4c, 0x24, 0xe3, 0x3f, 0xe8, 0xa3
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x65, 0xf6, 0x64, 0x0d, 0xdb, 0x7a, 0x03, 0x25,
        0x35, 0xd9, 0xf2, 0xdd, 0xfb, 0x38, 0xa7, 0xd5,
        0x0d, 0x92, 0x28, 0x6c, 0xad, 0x56, 0x9e, 0xa5,
        0x77, 0xb0, 0xa7, 0x8e, 0xaa, 0xc3, 0x9c, 0x27
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs126_ProduceCorrectResult) {

    const u8 s[] = {
        0x3e, 0x89, 0xbe, 0xac, 0x9d, 0xe9, 0x83, 0xb6,
        0x72, 0x84, 0x21, 0x9a, 0x4d, 0x76, 0xfd, 0x3a,
        0x38, 0x86, 0x97, 0x41, 0x3c, 0x56, 0x41, 0x74,
        0x68, 0x4d, 0xaf, 0xfd, 0x9b, 0x63, 0x28, 0x08
    };
    const u8 h[] = {
        0x19, 0x9e, 0x76, 0x8e, 0xbc, 0x08, 0xa4, 0x24,
        0x81, 0x32, 0x55, 0x78, 0x54, 0x95, 0xdd, 0x0a,
        0x47, 0xc2, 0x8f, 0xf2, 0xe1, 0x35, 0x7d, 0x09,
        0x45, 0x90, 0x95, 0x1a, 0x4e, 0x00, 0x93, 0x08
    };
    const u8 encoded_input_point[] = {
        0xd6, 0xbc, 0x70, 0xaa, 0x4e, 0x4b, 0xbb, 0xd2,
        0xf3, 0x73, 0x28, 0x54, 0xd4, 0xe5, 0xdc, 0xc4,
        0x9b, 0x2e, 0x23, 0xf5, 0xd7, 0xc4, 0x01, 0x1f,
        0xa3, 0xbc, 0x68, 0x6d, 0xac, 0x8c, 0xb3, 0x82
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x33, 0x06, 0x99, 0x07, 0x71, 0x31, 0x80, 0x06,
        0x6f, 0x4b, 0x63, 0x99, 0x3c, 0xf1, 0x7e, 0x70,
        0xc2, 0x94, 0xea, 0xd6, 0x2f, 0x74, 0x6a, 0x3f,
        0x49, 0xaa, 0xa5, 0x5f, 0x41, 0x01, 0xa6, 0x28
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs127_ProduceCorrectResult) {

    const u8 s[] = {
        0x12, 0x25, 0x6b, 0xea, 0x5b, 0x26, 0x8e, 0x4b,
        0xaf, 0xee, 0x89, 0xf6, 0xac, 0x9a, 0x05, 0xc1,
        0x86, 0x8b, 0xd6, 0xae, 0xd4, 0xbd, 0x6a, 0x18,
        0x82, 0xab, 0xcb, 0x56, 0xc4, 0xc4, 0xdb, 0x0a
    };
    const u8 h[] = {
        0x1d, 0x88, 0x97, 0x68, 0x17, 0x74, 0x37, 0xfd,
        0x1b, 0x3f, 0x58, 0xa6, 0xc1, 0x36, 0xce, 0xbc,
        0x01, 0xe6, 0xd9, 0x19, 0xb8, 0x6d, 0x00, 0x56,
        0xba, 0x4d, 0xa8, 0xbc, 0xef, 0xf3, 0x99, 0x08
    };
    const u8 encoded_input_point[] = {
        0xa9, 0x39, 0x85, 0x64, 0xd0, 0xf8, 0x30, 0xaf,
        0x7b, 0x03, 0x81, 0xbf, 0x2c, 0x3d, 0x96, 0x20,
        0x8d, 0x64, 0xbc, 0xfc, 0xd0, 0xf4, 0xd6, 0xa3,
        0x48, 0xf0, 0x8c, 0x01, 0x89, 0x00, 0x58, 0x51
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x43, 0xef, 0xc8, 0x87, 0xdf, 0xf1, 0xc6, 0x70,
        0x1c, 0x89, 0x48, 0x6e, 0xc0, 0x47, 0xb8, 0xc5,
        0x08, 0x18, 0xf9, 0x73, 0x09, 0x33, 0x84, 0x90,
        0xa1, 0xe0, 0x68, 0x6e, 0x76, 0xf5, 0xc2, 0x7a
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED25519, DoubleScalarMultiply_RandomlyGeneratedInputs128_ProduceCorrectResult) {

    const u8 s[] = {
        0x04, 0xe4, 0xc3, 0xe0, 0xe3, 0x11, 0xcc, 0x1e,
        0xe5, 0x00, 0x82, 0x2b, 0x7f, 0x41, 0x95, 0xbc,
        0x95, 0x46, 0xd7, 0x7d, 0x7f, 0x3f, 0x45, 0x79,
        0x8f, 0xa9, 0x56, 0xf8, 0xca, 0xa6, 0x11, 0x07
    };
    const u8 h[] = {
        0xbf, 0x27, 0xed, 0xc3, 0xe5, 0x4d, 0x8e, 0x02,
        0x22, 0x2e, 0xcc, 0xea, 0x5b, 0x28, 0x07, 0xef,
        0x0a, 0xb1, 0x6e, 0x82, 0x02, 0x4f, 0x7a, 0xc8,
        0x6b, 0xa1, 0x91, 0x5f, 0x08, 0xca, 0xa1, 0x0f
    };
    const u8 encoded_input_point[] = {
        0x0d, 0xc1, 0x83, 0xc4, 0x5a, 0xc6, 0x1c, 0xbf,
        0x9e, 0x8f, 0x64, 0x7e, 0x33, 0xb7, 0x00, 0xbc,
        0xd3, 0x20, 0x93, 0x10, 0xe8, 0xcd, 0x12, 0x73,
        0x75, 0x4d, 0x0b, 0xec, 0x1f, 0x2a, 0x6a, 0x8b
    };
    point input_point;
    point output;
    u8 encoded_output[32];
    u8 expected_output[] = {
        0x20, 0x1f, 0x4f, 0x43, 0xf8, 0x9c, 0xdc, 0xff,
        0x20, 0xf8, 0xb8, 0xff, 0x7b, 0x78, 0x37, 0x79,
        0xb5, 0x83, 0xaa, 0xf6, 0x76, 0xc7, 0x56, 0xb8,
        0x5d, 0xd9, 0x55, 0x1a, 0x7f, 0x16, 0x5f, 0xce
    };
    int ok = ed25519_group_ops.decode(&input_point, encoded_input_point);
    CHECK_EQUAL(1, ok);
    ed25519_group_ops.double_scalar_multiply(&output, s, h, &input_point);
    ed25519_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}
