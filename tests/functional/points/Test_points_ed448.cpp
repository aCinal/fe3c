#include <CppUTest/TestHarness.h>
#include <points/points.h>

TEST_GROUP(POINTS_ED448) {

    const point identity = {
        .X = { .ed448 = { 0 } },
        .Y = { .ed448 = { 1 } },
        .Z = { .ed448 = { 1 } }
    };
};

TEST(POINTS_ED448, Decode_PublicKeyFromRfcTest1_SuccessfullyDecode) {

    point decoded;
    const u8 encoded[] = \
        "\x5f\xd7\x44\x9b\x59\xb4\x61\xfd\x2c\xe7\x87\xec\x61\x6a\xd4\x6a" \
        "\x1d\xa1\x34\x24\x85\xa7\x0e\x1f\x8a\x0e\xa7\x5d\x80\xe9\x67\x78" \
        "\xed\xf1\x24\x76\x9b\x46\xc7\x06\x1b\xd6\x78\x3d\xf1\xe5\x0f\x6c" \
        "\xd1\xfa\x1a\xbe\xaf\xe8\x25\x61\x80";
    int success = ed448_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(1, success);
}

TEST(POINTS_ED448, Decode_CommitmentFromRfcTest1_SuccessfullyDecode) {

    point decoded;
    const u8 encoded[] = \
        "\x53\x3a\x37\xf6\xbb\xe4\x57\x25\x1f\x02\x3c\x0d\x88\xf9\x76\xae" \
        "\x2d\xfb\x50\x4a\x84\x3e\x34\xd2\x07\x4f\xd8\x23\xd4\x1a\x59\x1f" \
        "\x2b\x23\x3f\x03\x4f\x62\x82\x81\xf2\xfd\x7a\x22\xdd\xd4\x7d\x78" \
        "\x28\xc5\x9b\xd0\xa2\x1b\xfd\x39\x80";
    int success = ed448_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(1, success);
}

TEST(POINTS_ED448, Decode_PointOfOrder1_FailDecoding) {

    point decoded;
    /* Encode the group identity element (0, 1) */
    const u8 encoded[] = \
        "\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    int success = ed448_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(0, success);
}

TEST(POINTS_ED448, Decode_PointOfOrder2_FailDecoding) {

    point decoded;
    /* Encode the point (0, -1) */
    const u8 encoded[] = \
        "\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff" \
        "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff" \
        "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff" \
        "\xff\xff\xff\xff\xff\xff\xff\xff\x00";
    int success = ed448_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(0, success);
}

TEST(POINTS_ED448, Decode_PointOfOrder4_FailDecoding) {

    point decoded;
    /* Encode the point with y=0 */
    const u8 encoded[] = \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    int success = ed448_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(0, success);
}

TEST(POINTS_ED448, Decode_YCoordinateAboveModulus_FailDecoding) {

    point decoded;
    /* Encode the point with y=p+1 (congruent to y=1, i.e. the identity element) */
    const u8 encoded[] = \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff" \
        "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff" \
        "\xff\xff\xff\xff\xff\xff\xff\xff\x00";
    int success = ed448_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(0, success);
}

TEST(POINTS_ED448, Decode_YCoordinateEqualToModulus_FailDecoding) {

    point decoded;
    /* Encode the point with y=p (congruent to y=0) */
    const u8 encoded[] = \
        "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff" \
        "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff" \
        "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff" \
        "\xff\xff\xff\xff\xff\xff\xff\xff\x00";
    int success = ed448_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(0, success);
}

TEST(POINTS_ED448, Decode_X2IsANonResidue_FailDecoding) {

    point decoded;
    const u8 encoded[] = \
        "\x7c\xde\xe3\xb0\x19\xfb\xf5\xdc\xb8\x6c\x92\x4d\xb1\xaf\xc3\x11" \
        "\x6f\xbd\x31\xf2\x31\x83\xc7\xf4\x86\x8e\x99\xb5\x75\x8c\x86\x4f" \
        "\xaa\x97\xcf\x66\xb7\x93\xa1\x8c\x96\xab\x39\x0f\xdf\x19\xb7\xf9" \
        "\x6e\xe8\x16\xc3\x47\x43\xc9\x16\x00";
    int success = ed448_group_ops.decode(&decoded, encoded);
    CHECK_EQUAL(0, success);
}

TEST(POINTS_ED448, Add_AddIdentityElement_NoOp) {

    point input;
    const u8 encoded_input[] = \
        "\x5f\xd7\x44\x9b\x59\xb4\x61\xfd\x2c\xe7\x87\xec\x61\x6a\xd4\x6a" \
        "\x1d\xa1\x34\x24\x85\xa7\x0e\x1f\x8a\x0e\xa7\x5d\x80\xe9\x67\x78" \
        "\xed\xf1\x24\x76\x9b\x46\xc7\x06\x1b\xd6\x78\x3d\xf1\xe5\x0f\x6c" \
        "\xd1\xfa\x1a\xbe\xaf\xe8\x25\x61\x80";
    point output;
    u8 encoded_output[57];

    int success = ed448_group_ops.decode(&input, encoded_input);
    CHECK_EQUAL(1, success);
    ed448_group_ops.points_add(&output, &identity, &input);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(encoded_input, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, Add_AddReciprocalsOfEachOther_ResultInIdentity) {

    point input1;
    const u8 encoded_input1[] = \
        "\x5f\xd7\x44\x9b\x59\xb4\x61\xfd\x2c\xe7\x87\xec\x61\x6a\xd4\x6a" \
        "\x1d\xa1\x34\x24\x85\xa7\x0e\x1f\x8a\x0e\xa7\x5d\x80\xe9\x67\x78" \
        "\xed\xf1\x24\x76\x9b\x46\xc7\x06\x1b\xd6\x78\x3d\xf1\xe5\x0f\x6c" \
        "\xd1\xfa\x1a\xbe\xaf\xe8\x25\x61\x80";
    point input2;
    const u8 encoded_input2[] = \
        "\x5f\xd7\x44\x9b\x59\xb4\x61\xfd\x2c\xe7\x87\xec\x61\x6a\xd4\x6a" \
        "\x1d\xa1\x34\x24\x85\xa7\x0e\x1f\x8a\x0e\xa7\x5d\x80\xe9\x67\x78" \
        "\xed\xf1\x24\x76\x9b\x46\xc7\x06\x1b\xd6\x78\x3d\xf1\xe5\x0f\x6c" \
        "\xd1\xfa\x1a\xbe\xaf\xe8\x25\x61\x00";
    point output;
    u8 encoded_output[57];
    const u8 expected_output[] = \
        "\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00";

    int success = 1;
    success &= ed448_group_ops.decode(&input1, encoded_input1);
    success &= ed448_group_ops.decode(&input2, encoded_input2);
    CHECK_EQUAL(1, success);

    ed448_group_ops.points_add(&output, &input1, &input2);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, Add_AddPointOfOrder2ToItself_ResultInIdentity) {

    point input = {
        .X = { .ed448 = { 0 } },
#if FE3C_64BIT
        .Y = { .ed448 = {
            0xffffffffffffffULL - 1, 0xffffffffffffffULL, 0xffffffffffffffULL, 0xffffffffffffffULL,
            0xfffffffffffffeULL,     0xffffffffffffffULL, 0xffffffffffffffULL, 0xffffffffffffffULL
        } },
#else
        .Y = { .ed448 = {
            0xfffffff - 1, 0xfffffff, 0xfffffff, 0xfffffff,
            0xfffffff,     0xfffffff, 0xfffffff, 0xfffffff,
            0xffffffe,     0xfffffff, 0xfffffff, 0xfffffff,
            0xfffffff,     0xfffffff, 0xfffffff, 0xfffffff
        } },
#endif
        .Z = { .ed448 = { 1 } }
    };
    point output;
    u8 encoded_output[57];
    const u8 expected_output[] = \
        "\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00";

    ed448_group_ops.points_add(&output, &input, &input);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, Add_AddPointOfOrder4ToItself_TestForIdentityAtEachStep) {

    point input = {
        .X = { .ed448 = { 1 } },
        .Y = { .ed448 = { 0 } },
        .Z = { .ed448 = { 1 } }
    };

    point output;
    u8 encoded_output[57];
    const u8 expected_final_output[] = \
        "\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
        "\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    const u8 expected_intermediate_output[] = \
        "\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff" \
        "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff" \
        "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff" \
        "\xff\xff\xff\xff\xff\xff\xff\xff\x00";

    ed448_group_ops.points_add(&output, &input, &input);
    /* Expect output = (0, -1) at this point */
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_intermediate_output, encoded_output, sizeof(encoded_output));
    ed448_group_ops.points_add(&output, &output, &output);
    /* Expect output = (0, 1) at this point */
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_final_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_MultiplyByOrder_ResultInIdentity) {

    const u8 group_order[] = {
        0xf3, 0x44, 0x58, 0xab, 0x92, 0xc2, 0x78, 0x23,
        0x55, 0x8f, 0xc5, 0x8d, 0x72, 0xc2, 0x6c, 0x21,
        0x90, 0x36, 0xd6, 0xae, 0x49, 0xdb, 0x4e, 0xc4,
        0xe9, 0x23, 0xca, 0x7c, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
        0x00
    };
    point output;
    u8 encoded_output[57];
    ed448_group_ops.multiply_basepoint(&output, group_order);
    int ok = ed448_group_ops.points_equal(&identity, &output);
    CHECK_EQUAL(1, ok);
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs1_ProduceCorrectResult) {

    const u8 s[] = {
        0x7a, 0x1c, 0x31, 0xf4, 0x27, 0x9f, 0xbc, 0x4b,
        0xe1, 0x36, 0x56, 0x5c, 0xda, 0xb4, 0xc2, 0x6a,
        0x60, 0xb0, 0xda, 0xbe, 0xbd, 0x94, 0x93, 0x86,
        0x3b, 0xb7, 0xc4, 0x17, 0x5d, 0x6b, 0xbc, 0x6c,
        0x7a, 0x33, 0xe7, 0xc6, 0x87, 0xc9, 0x45, 0xce,
        0x86, 0x9c, 0x9d, 0x1a, 0x9b, 0x83, 0xf7, 0x23,
        0xaa, 0x64, 0x2a, 0xee, 0xb3, 0xad, 0x96, 0x2c,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xfd, 0xd1, 0x11, 0x4c, 0xd4, 0xb5, 0x42, 0x5b,
        0x6b, 0x41, 0x68, 0xf8, 0x58, 0xef, 0x66, 0x4a,
        0x9d, 0x84, 0x79, 0x55, 0xca, 0x8b, 0x9f, 0xee,
        0x94, 0x4e, 0x43, 0xac, 0x78, 0xc2, 0x2d, 0x62,
        0x39, 0xd4, 0x05, 0xd3, 0xbe, 0x91, 0x35, 0x11,
        0x96, 0x7f, 0x56, 0x36, 0x64, 0xda, 0xfc, 0xe7,
        0xc0, 0x5b, 0xea, 0x9e, 0x82, 0xa1, 0x27, 0x23,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs2_ProduceCorrectResult) {

    const u8 s[] = {
        0x45, 0x93, 0xe4, 0xfe, 0xe6, 0x55, 0x13, 0x24,
        0x1a, 0x3d, 0x31, 0xcc, 0xc2, 0x70, 0x87, 0x50,
        0x7c, 0xcf, 0x2b, 0xe9, 0x84, 0xdb, 0xc5, 0x98,
        0xf7, 0xde, 0x6e, 0xe6, 0x52, 0xe7, 0xd8, 0xca,
        0xc4, 0x61, 0x5d, 0x24, 0x5a, 0xbf, 0x59, 0xbe,
        0x6e, 0x5c, 0xbe, 0x30, 0xe4, 0x1e, 0x3c, 0xb7,
        0xdd, 0xe1, 0x85, 0xb4, 0xcd, 0x3e, 0x4d, 0x01,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x29, 0x0b, 0xe4, 0x75, 0xf4, 0x6b, 0x41, 0xbc,
        0x62, 0xa6, 0xba, 0x8d, 0xd4, 0x74, 0xfb, 0xa5,
        0x77, 0x78, 0xfb, 0x37, 0x5e, 0x45, 0x84, 0x83,
        0xdf, 0xa8, 0x41, 0x0d, 0xfe, 0x72, 0x60, 0x12,
        0x65, 0x03, 0x3f, 0x63, 0x32, 0x1f, 0xff, 0x59,
        0xce, 0xfb, 0xdc, 0xd0, 0x0c, 0x9d, 0xf0, 0x9b,
        0x14, 0x66, 0x5a, 0xf2, 0x2f, 0x59, 0x00, 0x17,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs3_ProduceCorrectResult) {

    const u8 s[] = {
        0x3f, 0x2f, 0x17, 0xe1, 0x05, 0xed, 0xb6, 0x4b,
        0xe5, 0xc9, 0xaa, 0x3d, 0xb9, 0x27, 0x46, 0x6d,
        0xb0, 0xeb, 0xa4, 0x85, 0xe7, 0xaa, 0x9e, 0xb5,
        0x98, 0xe8, 0x72, 0xa3, 0xf4, 0x59, 0x9e, 0x65,
        0xd3, 0xb2, 0xc4, 0x87, 0x02, 0x22, 0xe8, 0x4f,
        0xc3, 0x95, 0xc1, 0xfc, 0x31, 0x0d, 0x79, 0xf3,
        0x95, 0xb1, 0x22, 0x31, 0x65, 0xf7, 0xf8, 0x30,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x45, 0xf6, 0x1b, 0x00, 0xae, 0xf1, 0x6d, 0xf4,
        0x9a, 0xc5, 0x82, 0xa2, 0x68, 0xa5, 0x29, 0xfb,
        0x73, 0x90, 0x6d, 0x73, 0x81, 0x03, 0xba, 0xcc,
        0x21, 0x32, 0x4a, 0x0c, 0xaf, 0xd1, 0x2c, 0x5c,
        0x9a, 0xbf, 0xf4, 0x9a, 0x00, 0xf6, 0xd0, 0x2b,
        0xb2, 0x85, 0x21, 0xc3, 0x40, 0x27, 0xd5, 0x26,
        0x99, 0x73, 0x83, 0x81, 0x6f, 0x8a, 0x79, 0x76,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs4_ProduceCorrectResult) {

    const u8 s[] = {
        0xe9, 0x22, 0x46, 0xc5, 0x2a, 0x05, 0xda, 0xf8,
        0x90, 0xb6, 0xfb, 0xd0, 0xe4, 0x51, 0x18, 0xf5,
        0x5b, 0x8f, 0x8d, 0xdf, 0x4e, 0x34, 0x12, 0x87,
        0x97, 0x36, 0x91, 0x5a, 0xc9, 0x34, 0x1d, 0x6c,
        0x20, 0xb1, 0xff, 0xce, 0x0d, 0xda, 0xf5, 0xc1,
        0xd1, 0x98, 0xb9, 0xfa, 0x34, 0xbc, 0x49, 0x9f,
        0x92, 0x51, 0x36, 0x50, 0x4d, 0xc9, 0x8d, 0x05,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x19, 0xac, 0x08, 0x31, 0x43, 0xb5, 0x5a, 0x79,
        0x87, 0x7a, 0x89, 0x1f, 0xca, 0x45, 0xb5, 0xb9,
        0x84, 0x9f, 0x59, 0x46, 0x2d, 0x16, 0x76, 0x91,
        0x01, 0x82, 0x39, 0x8e, 0x9b, 0x40, 0x09, 0x6e,
        0x43, 0xcf, 0x1b, 0xeb, 0xa9, 0xea, 0xfe, 0x39,
        0xc6, 0xad, 0x62, 0x9c, 0x1c, 0xb4, 0x6e, 0x2f,
        0x57, 0x31, 0x6c, 0xe6, 0xdd, 0x03, 0xa6, 0xb2,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs5_ProduceCorrectResult) {

    const u8 s[] = {
        0x5f, 0xf5, 0xd6, 0xe5, 0x36, 0xe1, 0xd2, 0x16,
        0x25, 0xb7, 0x71, 0xd4, 0x2c, 0x99, 0xbb, 0x79,
        0x67, 0x36, 0xca, 0xeb, 0xb2, 0xe2, 0xf9, 0x81,
        0xad, 0x27, 0x90, 0xd7, 0xb5, 0x53, 0xbd, 0x58,
        0xfb, 0x4b, 0xd5, 0x96, 0x55, 0x22, 0x40, 0xef,
        0x87, 0x27, 0x5c, 0x01, 0xa8, 0xdf, 0x78, 0x1d,
        0x02, 0x9a, 0xc0, 0x15, 0xf6, 0xf7, 0x71, 0x07,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x3e, 0xe4, 0xb4, 0x8d, 0x22, 0x81, 0x14, 0x5c,
        0x2e, 0xc9, 0x5a, 0xdb, 0xbf, 0xa7, 0x66, 0x39,
        0x2a, 0x39, 0x58, 0x53, 0x9d, 0x19, 0x79, 0x02,
        0x27, 0xce, 0x0e, 0xf8, 0x96, 0xa1, 0x11, 0x16,
        0x0e, 0x35, 0x91, 0xa8, 0x33, 0x1e, 0xa1, 0x87,
        0xb4, 0x73, 0xa4, 0x4f, 0x0b, 0x59, 0xbb, 0x14,
        0x43, 0x08, 0x84, 0xd3, 0xae, 0x06, 0xfc, 0xf3,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs6_ProduceCorrectResult) {

    const u8 s[] = {
        0xfd, 0xb9, 0x8f, 0x80, 0x49, 0x27, 0xa0, 0x45,
        0xbc, 0xf9, 0x18, 0xba, 0x32, 0xaf, 0x97, 0x34,
        0xde, 0xb3, 0x90, 0xec, 0x67, 0x23, 0x8a, 0x60,
        0x02, 0xc5, 0xc0, 0xed, 0x5c, 0x84, 0x25, 0xf3,
        0xfb, 0xa9, 0x5b, 0x08, 0x1b, 0x59, 0x1b, 0xeb,
        0x26, 0x31, 0x0a, 0x19, 0x27, 0x30, 0xc5, 0x4e,
        0x4d, 0x65, 0x61, 0xc2, 0xd7, 0x59, 0xcd, 0x15,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x73, 0xfe, 0x9e, 0x0f, 0x3f, 0xe0, 0x9b, 0x5a,
        0xaf, 0x15, 0xd4, 0x91, 0x6d, 0xb2, 0x15, 0x71,
        0x60, 0x13, 0x24, 0x5e, 0xb8, 0xe5, 0xae, 0x06,
        0x70, 0x42, 0x5f, 0xdb, 0x4a, 0xb1, 0x5e, 0x7e,
        0x2a, 0xc8, 0x3c, 0x0c, 0x0b, 0xef, 0x31, 0xd4,
        0x97, 0x0a, 0x63, 0x14, 0xdd, 0xae, 0x6a, 0xcb,
        0xe3, 0xf5, 0x01, 0x73, 0xc0, 0x90, 0x7e, 0x72,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs7_ProduceCorrectResult) {

    const u8 s[] = {
        0xe5, 0xde, 0x85, 0x1e, 0xcc, 0xd0, 0x12, 0xae,
        0xf5, 0xab, 0x65, 0x53, 0x17, 0x6d, 0x03, 0xc7,
        0x46, 0x9e, 0xdd, 0x79, 0x8a, 0x01, 0xe4, 0xc4,
        0xc1, 0x47, 0xa5, 0xb5, 0x9c, 0x25, 0xb9, 0x2f,
        0xdd, 0xed, 0x0b, 0xbe, 0xa7, 0xd9, 0xc5, 0x09,
        0xa7, 0xe3, 0x82, 0xeb, 0x02, 0x5d, 0xdc, 0x17,
        0x2d, 0x25, 0x07, 0xff, 0x14, 0x16, 0x94, 0x19,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xaf, 0x5f, 0x93, 0xed, 0xc5, 0xf9, 0x08, 0xf1,
        0x5c, 0xd7, 0xf9, 0xcd, 0xa4, 0x0c, 0x82, 0xa4,
        0x59, 0xbb, 0xc6, 0x05, 0xa8, 0x58, 0x24, 0xd6,
        0x07, 0x05, 0x80, 0xcf, 0x86, 0xf5, 0xff, 0x6f,
        0xb5, 0x5e, 0xc9, 0x71, 0x05, 0x67, 0x1f, 0x61,
        0x3e, 0xbc, 0x4d, 0xe1, 0xa4, 0x17, 0x5c, 0x07,
        0x8e, 0x93, 0xd6, 0x27, 0xd0, 0x5e, 0xa8, 0x5f,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs8_ProduceCorrectResult) {

    const u8 s[] = {
        0xf6, 0x6c, 0xd5, 0x07, 0x1e, 0x60, 0xdd, 0xc9,
        0x95, 0x6e, 0x00, 0x5a, 0xa8, 0x79, 0x3c, 0x41,
        0x1b, 0xa0, 0x1c, 0xa9, 0x60, 0xac, 0x58, 0x8a,
        0x48, 0xdc, 0x56, 0x01, 0x3e, 0x5e, 0x8c, 0xc9,
        0x38, 0xfe, 0x77, 0xfe, 0x8b, 0x18, 0xcf, 0x26,
        0x44, 0x19, 0x22, 0x22, 0x48, 0xeb, 0xae, 0x6a,
        0xfe, 0x4a, 0x33, 0x1c, 0x92, 0x30, 0x87, 0x3a,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x6a, 0xa1, 0x81, 0xc8, 0x3e, 0x69, 0xc0, 0xf3,
        0xb5, 0x18, 0x6a, 0x73, 0xb2, 0xf5, 0x8d, 0x7e,
        0xdd, 0xf2, 0xc9, 0xdb, 0x7f, 0xd7, 0x5c, 0xc4,
        0x17, 0xc3, 0x24, 0x25, 0xb4, 0xbc, 0xf9, 0x3f,
        0x01, 0xd9, 0x98, 0x46, 0xcd, 0xa3, 0x39, 0x29,
        0x48, 0xfe, 0x82, 0xf7, 0x74, 0x08, 0xa1, 0x24,
        0x3e, 0xb4, 0x3e, 0xd2, 0x64, 0x15, 0xf9, 0x9a,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs9_ProduceCorrectResult) {

    const u8 s[] = {
        0x23, 0x36, 0x2b, 0xf4, 0x7f, 0xae, 0xef, 0x84,
        0x51, 0xf5, 0x25, 0x87, 0xd2, 0x25, 0x65, 0xc3,
        0x48, 0x40, 0x80, 0xe8, 0x58, 0xb8, 0x0b, 0x50,
        0x62, 0xce, 0xbc, 0xa9, 0x2f, 0xc9, 0xd2, 0x4f,
        0x10, 0x68, 0x32, 0x73, 0xb0, 0x4d, 0x2c, 0x5e,
        0xbe, 0xe3, 0x5c, 0x9d, 0x38, 0x49, 0xe5, 0x80,
        0xd3, 0x6f, 0x49, 0xc0, 0x37, 0x08, 0xab, 0x35,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xe3, 0x41, 0x77, 0x98, 0xd3, 0x84, 0xc3, 0xa6,
        0x5e, 0x0c, 0x63, 0x23, 0x1b, 0x3e, 0xdc, 0x72,
        0xff, 0x34, 0x6b, 0x77, 0xe8, 0x81, 0x50, 0x86,
        0xdb, 0xce, 0xe1, 0x1e, 0xde, 0xf4, 0xa7, 0x5c,
        0x2d, 0x3a, 0x5c, 0xc8, 0x21, 0xab, 0x6f, 0x60,
        0x7f, 0xa0, 0xab, 0x59, 0x8a, 0x6f, 0xad, 0xbf,
        0x19, 0xa2, 0x1b, 0xdf, 0xab, 0xc8, 0xe9, 0xeb,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs10_ProduceCorrectResult) {

    const u8 s[] = {
        0x00, 0x7c, 0xb5, 0x94, 0xdd, 0xf6, 0x78, 0xdb,
        0xdf, 0x4e, 0xa6, 0xf4, 0x2d, 0x8d, 0x08, 0xd0,
        0x73, 0xfd, 0xda, 0xa1, 0x0e, 0x90, 0x5d, 0xf4,
        0xc8, 0x27, 0x3e, 0xfe, 0xa9, 0xfa, 0x46, 0xdd,
        0xae, 0x5e, 0x3c, 0x31, 0xdf, 0xa1, 0x56, 0x41,
        0x9f, 0x28, 0x83, 0x73, 0xa5, 0x80, 0xcb, 0xf6,
        0xf6, 0x09, 0x64, 0xd5, 0xdc, 0xca, 0xf7, 0x14,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xd7, 0x9b, 0xb0, 0x8a, 0x06, 0x0a, 0x47, 0x4d,
        0x60, 0x0d, 0x30, 0x48, 0x7f, 0xec, 0xd3, 0xfa,
        0xff, 0x23, 0x3b, 0x8f, 0x9f, 0x02, 0x27, 0x80,
        0xa8, 0x72, 0x18, 0xf1, 0xc9, 0x54, 0x59, 0x6c,
        0xfc, 0x2e, 0x31, 0x37, 0xe2, 0xeb, 0x4c, 0xc3,
        0x29, 0x2a, 0x42, 0xc4, 0x18, 0x9c, 0x78, 0xfa,
        0x05, 0xd1, 0x9a, 0x17, 0x91, 0x30, 0x50, 0x93,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs11_ProduceCorrectResult) {

    const u8 s[] = {
        0xfe, 0x7d, 0x67, 0x24, 0xf8, 0x15, 0xda, 0xfa,
        0xc7, 0x5d, 0x69, 0x4f, 0x3f, 0x6e, 0xd1, 0x91,
        0xa6, 0xbb, 0x0a, 0xd6, 0xf1, 0x5b, 0xda, 0x97,
        0xcb, 0xef, 0x3f, 0x20, 0xcd, 0xa2, 0xac, 0xce,
        0x34, 0xb0, 0x3f, 0x46, 0x82, 0xf6, 0x2c, 0x72,
        0xc5, 0x4c, 0x3e, 0x8d, 0xef, 0x98, 0xac, 0x49,
        0xf7, 0x82, 0x5d, 0xb5, 0x94, 0xc3, 0x9f, 0x2c,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x84, 0xb0, 0x18, 0x66, 0x7b, 0x28, 0x5b, 0x6a,
        0x16, 0xe0, 0x73, 0xe1, 0x71, 0x02, 0xaf, 0x66,
        0x09, 0x96, 0x56, 0x8b, 0xa8, 0xed, 0x76, 0x9d,
        0xfc, 0x13, 0xc4, 0x44, 0x2d, 0x63, 0xa2, 0xaf,
        0x73, 0x52, 0xd6, 0x51, 0xaf, 0x00, 0xb2, 0xbf,
        0x78, 0x3f, 0x05, 0x75, 0x0e, 0xa3, 0x07, 0x95,
        0x37, 0x90, 0x97, 0x7b, 0x4f, 0x42, 0xab, 0x46,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs12_ProduceCorrectResult) {

    const u8 s[] = {
        0x01, 0x46, 0x28, 0xf5, 0x7c, 0x3e, 0x0a, 0x3a,
        0xf3, 0xf2, 0xcc, 0x65, 0x60, 0x07, 0x7c, 0x59,
        0x41, 0xd8, 0xfb, 0xea, 0xf4, 0xcf, 0xb6, 0x72,
        0x9f, 0xaa, 0xa6, 0xcc, 0xec, 0x23, 0x4b, 0xa4,
        0xd0, 0x43, 0x5d, 0x2b, 0x11, 0x56, 0x94, 0xc5,
        0xfc, 0x9a, 0xd3, 0x48, 0xf7, 0xd0, 0xb7, 0x4e,
        0x66, 0x6b, 0x3c, 0x2e, 0x1e, 0x8a, 0x86, 0x1d,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xf1, 0x8e, 0xf9, 0x81, 0x1f, 0x1d, 0x63, 0x90,
        0x99, 0xa8, 0x05, 0x13, 0x1b, 0x48, 0xe4, 0x37,
        0x27, 0x93, 0x6e, 0x9a, 0x16, 0xdb, 0xb2, 0x8c,
        0x6f, 0xcb, 0xdc, 0x03, 0x84, 0xfd, 0xcb, 0xef,
        0xe2, 0x1d, 0x22, 0x15, 0x71, 0x7d, 0x7b, 0xd0,
        0xac, 0x9c, 0x15, 0x04, 0x46, 0x95, 0xc7, 0xac,
        0xb6, 0xa2, 0x65, 0xc8, 0x53, 0x4f, 0xac, 0x98,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs13_ProduceCorrectResult) {

    const u8 s[] = {
        0x3f, 0xbe, 0x97, 0x07, 0xcf, 0xa0, 0xa7, 0x0c,
        0x3d, 0x23, 0x36, 0xfc, 0x63, 0x80, 0xf5, 0xa3,
        0x76, 0xb4, 0xd3, 0x0f, 0x5e, 0xdb, 0x1c, 0xd8,
        0x86, 0xbb, 0x1b, 0x57, 0x32, 0xa1, 0x12, 0x42,
        0x96, 0xbc, 0x3e, 0x4f, 0xbc, 0x1f, 0x22, 0x16,
        0xc3, 0xf9, 0xd0, 0x8a, 0xdd, 0xfe, 0xb5, 0x23,
        0x6c, 0xfe, 0xa0, 0xfe, 0xd2, 0x15, 0x6a, 0x3a,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x85, 0x0a, 0x4e, 0xdb, 0xc6, 0x3d, 0xa1, 0xd0,
        0xec, 0x55, 0xa7, 0x77, 0x81, 0xc2, 0x78, 0x39,
        0xea, 0x89, 0xa7, 0xe0, 0x18, 0xc0, 0x57, 0x02,
        0x80, 0xed, 0xd5, 0x75, 0x14, 0x47, 0x69, 0x83,
        0x99, 0x14, 0xd6, 0xe8, 0x7f, 0xef, 0xa4, 0x54,
        0x5d, 0x42, 0x01, 0xb7, 0x16, 0x55, 0xdc, 0x50,
        0xed, 0x46, 0xb3, 0xfe, 0xc0, 0x87, 0xee, 0xcf,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs14_ProduceCorrectResult) {

    const u8 s[] = {
        0xb9, 0x3b, 0xf7, 0x5a, 0x24, 0xc1, 0x01, 0x22,
        0xb0, 0x42, 0x29, 0x12, 0xbe, 0x9a, 0x82, 0xd1,
        0xdf, 0x70, 0x08, 0x83, 0xb8, 0xf6, 0x93, 0x79,
        0xb2, 0x33, 0xfe, 0x88, 0xef, 0x82, 0xea, 0x77,
        0x60, 0xf9, 0x8b, 0xf9, 0xb6, 0xed, 0x03, 0x6e,
        0x4b, 0x9d, 0xb8, 0x3f, 0xfe, 0x55, 0x48, 0x4b,
        0xda, 0xd0, 0xed, 0xb7, 0x07, 0x3a, 0x12, 0x03,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x40, 0xd9, 0xf9, 0x10, 0x9c, 0x3c, 0xd3, 0x75,
        0xdf, 0xbf, 0xf9, 0x78, 0xa0, 0xab, 0x71, 0xc6,
        0x16, 0x3b, 0xc5, 0x5f, 0x68, 0x85, 0x52, 0xc5,
        0xaa, 0x4c, 0x3f, 0x75, 0x38, 0xc8, 0x94, 0xb7,
        0xf1, 0x99, 0x2d, 0x15, 0x32, 0x90, 0x3c, 0x26,
        0xd9, 0xf1, 0xb7, 0x83, 0x6f, 0x5b, 0x44, 0x52,
        0xb1, 0x74, 0x92, 0x6a, 0xd9, 0x73, 0xed, 0x51,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs15_ProduceCorrectResult) {

    const u8 s[] = {
        0x53, 0xa1, 0xa7, 0xba, 0x6c, 0x73, 0x07, 0xe0,
        0x79, 0xb8, 0xfc, 0x49, 0x23, 0x58, 0x4d, 0xbe,
        0x03, 0x54, 0x03, 0x16, 0xdc, 0x89, 0x73, 0x63,
        0x0f, 0xdd, 0x2f, 0x57, 0xba, 0xd2, 0x9b, 0x83,
        0xde, 0x84, 0x6d, 0xff, 0xa3, 0x9c, 0xd4, 0xd3,
        0xaa, 0x3a, 0x1e, 0x51, 0x91, 0x55, 0x8a, 0x4e,
        0x7b, 0xab, 0x08, 0xd0, 0x21, 0x5e, 0x31, 0x15,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x76, 0x30, 0x12, 0x08, 0x0b, 0x16, 0x9d, 0x86,
        0xa6, 0xe4, 0x23, 0x48, 0x33, 0xa4, 0xec, 0x1d,
        0x13, 0xb4, 0x40, 0xb6, 0x1d, 0x47, 0x2f, 0x13,
        0x77, 0xb7, 0xf0, 0xc5, 0x6a, 0x16, 0xd5, 0x7c,
        0x7a, 0xc6, 0xa6, 0x05, 0x4e, 0xdc, 0xd3, 0xea,
        0x7a, 0x6a, 0x3d, 0xc6, 0xcc, 0x73, 0xd3, 0x1f,
        0x6e, 0x9e, 0xfd, 0x52, 0xcd, 0x5f, 0x31, 0xe1,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs16_ProduceCorrectResult) {

    const u8 s[] = {
        0xad, 0x90, 0x05, 0xdc, 0x74, 0xde, 0xc6, 0x80,
        0xe4, 0xd2, 0xf1, 0x34, 0x14, 0xcc, 0xbf, 0x4b,
        0x5e, 0xbf, 0x44, 0xc4, 0xe7, 0xc3, 0x55, 0x4b,
        0x5e, 0xe9, 0x24, 0x10, 0x74, 0xaf, 0x48, 0xee,
        0x5b, 0x80, 0x32, 0x7f, 0x9e, 0x62, 0x37, 0x6a,
        0x68, 0xfc, 0x24, 0x7c, 0x8d, 0x14, 0xbb, 0xad,
        0x51, 0xd8, 0xfa, 0x13, 0x77, 0xfd, 0xd9, 0x16,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x8a, 0x4a, 0xf8, 0x67, 0x72, 0xca, 0xed, 0x8a,
        0x97, 0x4a, 0x16, 0xb5, 0xfe, 0xf5, 0x15, 0xd7,
        0x00, 0xe7, 0x48, 0x13, 0xdb, 0xcc, 0x95, 0xcf,
        0xbc, 0xf5, 0xb4, 0xf1, 0xa9, 0xbb, 0x48, 0x58,
        0x9d, 0x64, 0x94, 0x9a, 0x66, 0x8d, 0xd7, 0xdb,
        0x41, 0x43, 0x13, 0x19, 0xd9, 0xbd, 0xdf, 0x9f,
        0x7b, 0x86, 0x25, 0xdc, 0xe1, 0x89, 0xcd, 0xa9,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs17_ProduceCorrectResult) {

    const u8 s[] = {
        0x42, 0xe4, 0xa3, 0xc2, 0x25, 0xdc, 0xfd, 0x70,
        0x5c, 0xb1, 0x42, 0x56, 0x81, 0x43, 0x67, 0x7c,
        0x36, 0xc8, 0x7c, 0x0c, 0x40, 0x3a, 0x44, 0x9f,
        0x12, 0x1c, 0x76, 0xa9, 0x54, 0x85, 0x7c, 0x04,
        0x1b, 0x9c, 0x5a, 0x55, 0x50, 0x7a, 0xf4, 0xdf,
        0x69, 0x70, 0x0b, 0x5e, 0xa9, 0xf7, 0xb6, 0x8d,
        0x80, 0x25, 0xea, 0xa0, 0xf4, 0x11, 0xb3, 0x10,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x63, 0x3f, 0x87, 0xb9, 0xfd, 0xbc, 0xb2, 0x3e,
        0x47, 0x1f, 0x1a, 0xad, 0x5b, 0x81, 0xf4, 0x44,
        0xff, 0xb4, 0xc5, 0xbd, 0x07, 0xd5, 0xa9, 0xe6,
        0xaf, 0x16, 0xce, 0xef, 0xec, 0x52, 0xe8, 0xb0,
        0x8d, 0x29, 0x52, 0x3b, 0x47, 0x2b, 0x81, 0x64,
        0x8f, 0x87, 0x96, 0x9c, 0xaf, 0xb7, 0x92, 0xe1,
        0x22, 0x1b, 0x01, 0x0b, 0x44, 0x1c, 0xdc, 0xf4,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs18_ProduceCorrectResult) {

    const u8 s[] = {
        0x50, 0xe7, 0x33, 0x55, 0x2d, 0xb7, 0x75, 0x67,
        0xf0, 0x43, 0xa8, 0x7d, 0xa3, 0xe7, 0xe4, 0x1a,
        0x31, 0xaf, 0x82, 0x74, 0x6c, 0x42, 0x57, 0x34,
        0x00, 0xab, 0xbc, 0xef, 0x79, 0x24, 0xa5, 0x76,
        0x35, 0xb6, 0xf0, 0xd7, 0xb3, 0x5e, 0x02, 0x3b,
        0x06, 0xe7, 0xe2, 0xd7, 0xc1, 0xde, 0xe3, 0xab,
        0x23, 0x40, 0x6a, 0xaa, 0xb2, 0xc0, 0xc0, 0x05,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xc0, 0x89, 0x8a, 0x60, 0xae, 0xde, 0x85, 0xa0,
        0xc5, 0x35, 0x9e, 0x55, 0x6f, 0x9b, 0xc8, 0x7a,
        0x81, 0x4a, 0x4a, 0xe2, 0xb5, 0x93, 0x21, 0x85,
        0x09, 0x2d, 0xb7, 0x9f, 0x08, 0x8b, 0x5c, 0xd3,
        0x46, 0xd6, 0x61, 0xd9, 0xf9, 0x3b, 0xd8, 0x1b,
        0x55, 0xb0, 0x1e, 0xfc, 0x45, 0x22, 0xa1, 0x4e,
        0x69, 0x74, 0xa1, 0xe4, 0x76, 0x6f, 0x8e, 0x34,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs19_ProduceCorrectResult) {

    const u8 s[] = {
        0xa6, 0x22, 0x02, 0x36, 0x93, 0x83, 0x1c, 0x8e,
        0xe4, 0xe2, 0xd4, 0x22, 0x95, 0x07, 0xfc, 0x3c,
        0xe2, 0xd4, 0xf1, 0x41, 0xc1, 0x8e, 0x5d, 0x49,
        0x30, 0xf8, 0x80, 0x5d, 0x2f, 0x85, 0x5b, 0x2a,
        0x02, 0x3a, 0x22, 0x42, 0x8f, 0x93, 0x38, 0x78,
        0xe4, 0xe5, 0xae, 0xc9, 0x9b, 0x07, 0xc3, 0xa2,
        0xe3, 0xfa, 0xef, 0x94, 0xdb, 0xaa, 0x15, 0x21,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x49, 0xaa, 0x7e, 0xb7, 0xb1, 0x9a, 0xce, 0x13,
        0xec, 0x25, 0x12, 0x44, 0xd3, 0xe6, 0x2f, 0x4c,
        0xc5, 0x8e, 0xee, 0x23, 0x21, 0xea, 0xe6, 0xeb,
        0xd4, 0x37, 0x49, 0x78, 0xee, 0x68, 0x39, 0x33,
        0x36, 0x29, 0x67, 0xa3, 0x5f, 0x15, 0xc7, 0x85,
        0x30, 0x40, 0x7f, 0xdf, 0x10, 0x37, 0x17, 0x05,
        0x0d, 0x1f, 0xc7, 0xae, 0xb5, 0xdb, 0xcc, 0x21,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs20_ProduceCorrectResult) {

    const u8 s[] = {
        0xad, 0xc2, 0xcb, 0xdb, 0x56, 0xc4, 0x77, 0x99,
        0x3e, 0xe5, 0x56, 0x1e, 0xfd, 0x93, 0x0e, 0xae,
        0xf8, 0xd6, 0x28, 0x8d, 0xe4, 0xb8, 0x6f, 0xfd,
        0x27, 0xb2, 0x5e, 0x72, 0x13, 0xc4, 0x4d, 0x0d,
        0xc6, 0x2d, 0xc0, 0x39, 0xa1, 0x00, 0xc3, 0x02,
        0xf1, 0xb8, 0x47, 0xb6, 0x2d, 0xc1, 0x32, 0xfa,
        0xf9, 0x6b, 0x71, 0x7f, 0x74, 0x5f, 0x3e, 0x39,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x50, 0x60, 0x0b, 0x3b, 0x93, 0xf6, 0x6a, 0x6c,
        0xcb, 0x0a, 0x6b, 0x23, 0x55, 0x77, 0x99, 0x1c,
        0xf9, 0xfe, 0x6a, 0xcf, 0x47, 0xfa, 0x91, 0x9a,
        0x36, 0x8a, 0xc4, 0xae, 0x98, 0x6f, 0x98, 0x53,
        0x29, 0x12, 0x98, 0x2a, 0x3d, 0x35, 0xc5, 0x48,
        0x0b, 0x8e, 0x09, 0xc4, 0x84, 0x35, 0xd8, 0x1c,
        0xfe, 0xc5, 0x79, 0x2d, 0x1d, 0xaa, 0xfe, 0xa6,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs21_ProduceCorrectResult) {

    const u8 s[] = {
        0xfd, 0x52, 0xc5, 0x48, 0x6a, 0x42, 0xdc, 0x53,
        0x15, 0x83, 0x3a, 0x47, 0x1a, 0x0d, 0xa3, 0xc5,
        0xcb, 0xe3, 0x99, 0x80, 0x1d, 0x7f, 0x02, 0x2b,
        0x63, 0x2f, 0xde, 0x2d, 0x04, 0x2d, 0xea, 0x69,
        0xdb, 0x2e, 0x91, 0x85, 0x52, 0x5a, 0xfe, 0x33,
        0x4b, 0xe3, 0x92, 0x15, 0x6b, 0x77, 0x64, 0x98,
        0x09, 0x8e, 0x45, 0xfd, 0x46, 0xf2, 0xc2, 0x05,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x2e, 0x5a, 0xd2, 0x31, 0xb8, 0x76, 0xeb, 0xb1,
        0x62, 0x37, 0x20, 0x5d, 0x69, 0x6e, 0x6d, 0x98,
        0x5d, 0x8a, 0x48, 0xb9, 0xf8, 0x4e, 0x91, 0xc7,
        0xea, 0xf6, 0xa2, 0x76, 0x68, 0xc9, 0x83, 0xed,
        0xdf, 0x90, 0x48, 0x87, 0xc6, 0x69, 0xbd, 0x24,
        0xe2, 0xff, 0x81, 0x3a, 0x24, 0x2a, 0xd4, 0x80,
        0x08, 0xdb, 0x07, 0xd7, 0xe3, 0xa7, 0x96, 0x2c,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs22_ProduceCorrectResult) {

    const u8 s[] = {
        0x9c, 0xac, 0x5b, 0x84, 0x8e, 0xa1, 0x7f, 0x88,
        0x60, 0xad, 0xe1, 0x19, 0x33, 0xfb, 0xf6, 0xce,
        0xff, 0xba, 0x20, 0x52, 0xf6, 0xd2, 0x2a, 0x97,
        0x15, 0x0f, 0x33, 0xfa, 0xfe, 0xdc, 0x3b, 0x3f,
        0x77, 0x7f, 0x62, 0xdf, 0xf0, 0x78, 0x3c, 0x6c,
        0x2b, 0xab, 0xe5, 0x43, 0x96, 0x18, 0xef, 0xc8,
        0xca, 0xae, 0xf8, 0xb3, 0x7a, 0x16, 0xba, 0x1f,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xc8, 0xab, 0x95, 0x4b, 0x84, 0xf3, 0xad, 0x02,
        0x72, 0x77, 0x8a, 0xaf, 0xdc, 0x4e, 0x6b, 0xd9,
        0x3a, 0x2c, 0xd1, 0x44, 0x30, 0xe5, 0xbf, 0x91,
        0x27, 0xd8, 0xda, 0x7f, 0x76, 0x5f, 0x81, 0x6d,
        0x92, 0xdc, 0x37, 0x89, 0x1b, 0x1f, 0x07, 0x9a,
        0xeb, 0xdf, 0x20, 0xd5, 0xca, 0x34, 0xce, 0x8d,
        0x89, 0x01, 0xa5, 0x70, 0x7c, 0x9a, 0x68, 0x98,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs23_ProduceCorrectResult) {

    const u8 s[] = {
        0x07, 0xc7, 0x0b, 0x9a, 0x2c, 0xce, 0x7d, 0xb7,
        0x00, 0x27, 0x76, 0x13, 0x21, 0xa4, 0xd6, 0xe4,
        0xf3, 0xc8, 0xd1, 0x5c, 0xd2, 0xe6, 0xe4, 0x05,
        0xa9, 0x92, 0x72, 0xbc, 0xdd, 0x84, 0x5f, 0xb3,
        0xf1, 0x94, 0x14, 0xe4, 0x20, 0x17, 0xe8, 0x47,
        0xfb, 0x06, 0xbf, 0xd4, 0x53, 0x7e, 0x26, 0xd8,
        0x3f, 0x38, 0xc7, 0x3d, 0x9d, 0x89, 0xb6, 0x1f,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x87, 0xdc, 0x87, 0x90, 0x3b, 0x4c, 0xd5, 0xb0,
        0x55, 0xc9, 0x23, 0x7f, 0xc8, 0x53, 0x60, 0x0f,
        0x27, 0x97, 0x4d, 0xb4, 0x79, 0x73, 0xc7, 0xb4,
        0x99, 0xa1, 0x39, 0x70, 0x26, 0x49, 0xa3, 0x02,
        0xfe, 0xf0, 0x7e, 0x87, 0x9d, 0x75, 0x24, 0x22,
        0x26, 0x34, 0x35, 0xab, 0xd0, 0x84, 0x28, 0xab,
        0xd9, 0x36, 0xe5, 0x7a, 0x01, 0x33, 0x4a, 0x6f,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs24_ProduceCorrectResult) {

    const u8 s[] = {
        0x4d, 0xac, 0x2d, 0x10, 0x85, 0x3c, 0xe3, 0xe2,
        0x59, 0xe6, 0x77, 0x28, 0x44, 0xe5, 0xd3, 0x03,
        0xcf, 0x3a, 0x77, 0x11, 0xa8, 0x8a, 0x21, 0x58,
        0xae, 0xbe, 0xec, 0x56, 0x33, 0x82, 0x29, 0x57,
        0xe2, 0xa3, 0x29, 0xb2, 0x7a, 0x9e, 0xe7, 0xfd,
        0x9c, 0x15, 0x87, 0x1a, 0xec, 0xad, 0xff, 0x30,
        0x0c, 0x55, 0x4f, 0x62, 0xd8, 0x5e, 0x8f, 0x3e,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xc4, 0x7a, 0xa5, 0xc3, 0xf1, 0x32, 0x74, 0x3d,
        0xef, 0x0b, 0x73, 0x90, 0x01, 0x32, 0xde, 0x83,
        0xa3, 0xec, 0xd8, 0x33, 0xba, 0x44, 0x4b, 0x6e,
        0xbd, 0x68, 0xb3, 0xad, 0xa0, 0x20, 0x39, 0x81,
        0xdc, 0xa6, 0xb7, 0xf4, 0xd9, 0xfc, 0xc6, 0x08,
        0x88, 0x81, 0x27, 0xbf, 0x07, 0xc6, 0x85, 0x90,
        0xb0, 0x04, 0x49, 0x0d, 0x24, 0xfa, 0x1f, 0x66,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs25_ProduceCorrectResult) {

    const u8 s[] = {
        0x21, 0x7e, 0x43, 0x97, 0x99, 0xb0, 0x0f, 0xe7,
        0xd2, 0xdc, 0x9e, 0x54, 0xd9, 0x7b, 0x9d, 0xa5,
        0x93, 0x4f, 0x1f, 0x11, 0xa8, 0x8c, 0xa4, 0x61,
        0x01, 0xd4, 0x12, 0xe3, 0x44, 0x61, 0x5a, 0x7d,
        0xd0, 0xc7, 0x8a, 0x8d, 0xb5, 0x57, 0x3a, 0x8c,
        0xaa, 0x5d, 0x2b, 0x8e, 0xa5, 0x39, 0x3c, 0xdc,
        0x4d, 0x60, 0x8e, 0x5a, 0xbd, 0x61, 0xa5, 0x15,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xbd, 0xe5, 0x3b, 0xe6, 0x62, 0xbd, 0x9e, 0xe5,
        0x35, 0x2b, 0x55, 0xb1, 0xa5, 0xd7, 0x9c, 0x27,
        0xfb, 0xe3, 0x5a, 0xa9, 0x2c, 0xa8, 0x64, 0xa8,
        0xab, 0x66, 0xe5, 0xc8, 0x66, 0x0a, 0xce, 0x5a,
        0xdc, 0xd1, 0x3f, 0x19, 0x14, 0x30, 0xce, 0x75,
        0x60, 0x05, 0xa7, 0xcf, 0x4b, 0x81, 0x15, 0x02,
        0xae, 0xe9, 0x6b, 0x45, 0xee, 0xdc, 0x51, 0x51,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs26_ProduceCorrectResult) {

    const u8 s[] = {
        0x6b, 0x7c, 0xc6, 0x0d, 0xc4, 0x4f, 0x81, 0x96,
        0x9c, 0xc9, 0x82, 0x7d, 0x9a, 0xa4, 0x7e, 0xe6,
        0x52, 0x6f, 0xbb, 0x59, 0x44, 0x56, 0xa4, 0xb5,
        0x07, 0x20, 0x21, 0xdb, 0xf9, 0xe0, 0x9c, 0xa5,
        0xbd, 0x6d, 0x1c, 0xaa, 0xbf, 0xcf, 0xef, 0x12,
        0x32, 0x91, 0x17, 0xe3, 0xbb, 0x59, 0x14, 0xb8,
        0xde, 0x68, 0xb4, 0x7c, 0x86, 0x79, 0xd9, 0x1b,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xcd, 0x95, 0x4d, 0xc6, 0x64, 0x4b, 0x29, 0x37,
        0xa7, 0x6e, 0xa8, 0x0c, 0x52, 0x57, 0xe6, 0x10,
        0x81, 0x27, 0x9b, 0xd7, 0x87, 0x60, 0x5c, 0x4d,
        0xe8, 0xff, 0x33, 0x40, 0x7a, 0xbd, 0x08, 0x88,
        0x75, 0xcb, 0xf5, 0x5b, 0x5b, 0xee, 0xc6, 0xf5,
        0xdf, 0xf6, 0xbc, 0x62, 0x1e, 0x81, 0xfc, 0x32,
        0xd5, 0xcc, 0xe8, 0xbd, 0xd8, 0x30, 0xda, 0xfb,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs27_ProduceCorrectResult) {

    const u8 s[] = {
        0x2e, 0x98, 0xb1, 0xbb, 0xb2, 0xd8, 0xb5, 0x29,
        0x9b, 0xd8, 0xfa, 0x9d, 0xb5, 0x0d, 0x1a, 0xb5,
        0x83, 0xe6, 0x86, 0x8a, 0x27, 0x87, 0x3e, 0x39,
        0x95, 0x91, 0x6c, 0x3e, 0xe9, 0x5c, 0x90, 0xcb,
        0xf1, 0x56, 0xf2, 0x9f, 0x31, 0xca, 0xe3, 0x03,
        0x64, 0xcd, 0xfe, 0xef, 0xe8, 0x4c, 0xfe, 0x9c,
        0xf9, 0x4f, 0x43, 0xa3, 0xbc, 0x09, 0xb4, 0x19,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x1a, 0x6c, 0xdc, 0x3e, 0x9f, 0x2e, 0xe2, 0x44,
        0xfc, 0xbd, 0x1a, 0x29, 0x0f, 0xcb, 0xdf, 0x2a,
        0xdb, 0x05, 0xbe, 0x9c, 0x5c, 0xf3, 0x49, 0xab,
        0xe6, 0x96, 0xaa, 0xcb, 0x9f, 0x8a, 0x6a, 0xa1,
        0x42, 0xb7, 0xfe, 0x39, 0x3e, 0x5f, 0xa5, 0xbe,
        0x86, 0x10, 0x25, 0x35, 0x79, 0xc6, 0x1d, 0xd9,
        0x82, 0x09, 0xed, 0xec, 0x20, 0xea, 0x8d, 0x76,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs28_ProduceCorrectResult) {

    const u8 s[] = {
        0xa3, 0x8c, 0x5a, 0xe9, 0xee, 0x4e, 0xc4, 0xfc,
        0xd7, 0x4d, 0x85, 0xb4, 0x38, 0xeb, 0xa2, 0xf5,
        0x46, 0xbe, 0x72, 0xac, 0xa2, 0x13, 0x09, 0xf8,
        0x86, 0x74, 0x04, 0x81, 0x65, 0x90, 0x1b, 0xa9,
        0x36, 0xdd, 0xb5, 0x2a, 0xa9, 0x3f, 0x7b, 0x51,
        0x2c, 0x10, 0xc7, 0xc0, 0xa3, 0x9c, 0xb0, 0x58,
        0x81, 0x06, 0x7c, 0x6e, 0x42, 0x5d, 0xfd, 0x31,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x8b, 0x90, 0xbc, 0xa9, 0x11, 0x4f, 0x2b, 0xb5,
        0x4d, 0x15, 0x31, 0x20, 0x6d, 0x70, 0xe5, 0xc3,
        0xc6, 0x95, 0xc8, 0xc9, 0xa6, 0x72, 0x45, 0x55,
        0x95, 0xd4, 0x06, 0x96, 0x4c, 0xb1, 0x8c, 0x0e,
        0x2c, 0x27, 0xef, 0xef, 0x9a, 0xdf, 0x05, 0x94,
        0x11, 0xa3, 0xb7, 0x6b, 0xbe, 0x4a, 0x07, 0x88,
        0x30, 0x29, 0x2e, 0x62, 0xf4, 0x9c, 0xdb, 0xb6,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs29_ProduceCorrectResult) {

    const u8 s[] = {
        0x60, 0x82, 0xb0, 0x18, 0x65, 0x95, 0x82, 0xc1,
        0x30, 0xc6, 0xb5, 0x0a, 0x5d, 0xd3, 0x14, 0x54,
        0xbb, 0x4a, 0xa5, 0xbc, 0x77, 0x7f, 0x4f, 0x3f,
        0x67, 0xf2, 0x5d, 0x6e, 0xa9, 0xa8, 0xb1, 0x36,
        0x6f, 0x27, 0x37, 0xcc, 0x5a, 0xac, 0x76, 0xa1,
        0xd7, 0x55, 0x60, 0x90, 0x9a, 0x07, 0xf8, 0xf4,
        0x5b, 0x08, 0xf9, 0xb1, 0x81, 0x7a, 0xee, 0x08,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x2e, 0xef, 0xf4, 0xf9, 0xbd, 0xa3, 0x0a, 0x45,
        0xb6, 0xd1, 0x11, 0xa8, 0xa2, 0xd2, 0x55, 0x6b,
        0x5a, 0x50, 0xed, 0x0a, 0x58, 0x68, 0x09, 0x3f,
        0xc7, 0x2e, 0xb5, 0x9c, 0x87, 0x68, 0x02, 0x4c,
        0x6a, 0xaf, 0x5f, 0x84, 0xb8, 0x5e, 0xb2, 0xab,
        0x3f, 0x03, 0xaa, 0xbb, 0x43, 0x09, 0xf0, 0xe8,
        0xcf, 0x1c, 0x70, 0x59, 0xa6, 0x10, 0xdd, 0xf6,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs30_ProduceCorrectResult) {

    const u8 s[] = {
        0xeb, 0xd3, 0xda, 0xa0, 0xf1, 0xcc, 0xea, 0xb0,
        0x69, 0xf4, 0x80, 0xd0, 0x0a, 0x13, 0xb7, 0xe2,
        0xd6, 0x84, 0x85, 0x0b, 0x52, 0xea, 0xe3, 0xfe,
        0xdf, 0x39, 0xd3, 0x97, 0x37, 0x47, 0x64, 0xb3,
        0xfc, 0x8e, 0x2f, 0xdf, 0x38, 0xbc, 0xc3, 0x1d,
        0x30, 0x3b, 0xe9, 0x29, 0x80, 0x41, 0x68, 0x6a,
        0xd1, 0xca, 0x87, 0x59, 0x30, 0xc2, 0x5c, 0x2b,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x4c, 0x41, 0xfe, 0x32, 0xfd, 0xce, 0x63, 0x25,
        0xff, 0x1b, 0xd1, 0x8f, 0xec, 0xa9, 0xe3, 0xab,
        0x7a, 0x6e, 0x20, 0xb2, 0x9b, 0xa2, 0xef, 0x1a,
        0x34, 0x69, 0xdf, 0xa2, 0xf0, 0x05, 0x7a, 0x11,
        0xe1, 0xa8, 0xf0, 0xa7, 0xb2, 0x7a, 0x66, 0xa2,
        0x0d, 0xda, 0x7e, 0xc7, 0xcc, 0xa7, 0x7d, 0x3e,
        0xf6, 0x81, 0x1b, 0xc7, 0x34, 0x65, 0x41, 0x87,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs31_ProduceCorrectResult) {

    const u8 s[] = {
        0xa1, 0x48, 0xa5, 0xa0, 0xc6, 0x60, 0x80, 0xac,
        0x85, 0x17, 0x5e, 0xe0, 0xc6, 0xac, 0xbf, 0x1e,
        0xc3, 0xf4, 0x7a, 0x2c, 0xa5, 0x5c, 0x03, 0xde,
        0x32, 0xb9, 0x59, 0x41, 0x5c, 0xd8, 0xa4, 0xfa,
        0xb0, 0xb0, 0xae, 0x24, 0x05, 0x1f, 0xbe, 0x07,
        0x6b, 0xd6, 0x7e, 0xd7, 0x0d, 0x9b, 0xe6, 0xc5,
        0x39, 0x33, 0x1d, 0xf9, 0x93, 0xaa, 0x3c, 0x2f,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x4c, 0x80, 0x25, 0xa6, 0x7d, 0xc5, 0x75, 0xdb,
        0x8d, 0xff, 0x4c, 0xa1, 0x72, 0xef, 0xed, 0x15,
        0xb0, 0xf0, 0xde, 0xd2, 0xdd, 0xab, 0xc1, 0xeb,
        0x82, 0xe6, 0xcd, 0xef, 0xb3, 0x0b, 0xc1, 0xa7,
        0xf8, 0xcc, 0x67, 0x25, 0x39, 0xcf, 0x28, 0x8d,
        0x84, 0x81, 0xec, 0x8e, 0x86, 0x20, 0x19, 0x52,
        0xa7, 0x5a, 0x92, 0x97, 0xcd, 0x4a, 0x62, 0x00,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs32_ProduceCorrectResult) {

    const u8 s[] = {
        0x4c, 0x11, 0x97, 0xdb, 0xc5, 0x9b, 0x96, 0x23,
        0xd8, 0x16, 0x78, 0x72, 0x41, 0x7a, 0x06, 0x74,
        0x81, 0x03, 0x74, 0x78, 0xc6, 0xe7, 0x89, 0x06,
        0xc2, 0x40, 0xa4, 0xcd, 0x65, 0x8e, 0x0a, 0x4d,
        0x3d, 0xa5, 0xb4, 0x8d, 0x9a, 0xe9, 0x3b, 0xcd,
        0x2b, 0x5c, 0xe6, 0xfe, 0xc4, 0xa0, 0x3b, 0x09,
        0x31, 0x0a, 0x9a, 0xb0, 0xf1, 0x0d, 0x24, 0x06,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x1d, 0x83, 0x6a, 0x96, 0xd0, 0xc6, 0x72, 0xf5,
        0xeb, 0x17, 0x9f, 0x23, 0x60, 0xa3, 0xbf, 0x38,
        0xd7, 0xd1, 0xf4, 0x50, 0x72, 0x92, 0x58, 0x1a,
        0xc8, 0x22, 0x31, 0x6e, 0x88, 0xa1, 0x90, 0x76,
        0xce, 0xc8, 0x13, 0x6e, 0x97, 0xa1, 0xba, 0x9b,
        0x29, 0xac, 0x59, 0xcd, 0xc5, 0x92, 0xf4, 0xc1,
        0xfe, 0x06, 0x9b, 0x81, 0xb2, 0x6b, 0x9a, 0x21,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs33_ProduceCorrectResult) {

    const u8 s[] = {
        0x64, 0x9c, 0xb3, 0x1c, 0xde, 0xfc, 0x97, 0xd7,
        0x55, 0x8c, 0x7a, 0xcd, 0x93, 0x73, 0xfb, 0x4e,
        0xfd, 0xa6, 0x4b, 0x16, 0x73, 0x0e, 0xee, 0x1d,
        0xc2, 0x7d, 0x20, 0x9f, 0x76, 0xc7, 0x7b, 0xd1,
        0xd4, 0xb0, 0x48, 0x36, 0xdd, 0x74, 0xf3, 0x36,
        0x82, 0x25, 0x1c, 0xbc, 0xe6, 0x9f, 0x6c, 0x2b,
        0x91, 0xfa, 0x40, 0xa7, 0x7b, 0xbd, 0xc6, 0x08,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x01, 0xd9, 0x4e, 0x19, 0x48, 0x9b, 0x85, 0x30,
        0x38, 0xcb, 0xef, 0xa2, 0x46, 0x66, 0x82, 0xf4,
        0x6b, 0xed, 0xb5, 0x01, 0xda, 0xfb, 0x5f, 0x74,
        0x9e, 0xf7, 0x42, 0xf7, 0x06, 0x43, 0x2c, 0xed,
        0x48, 0x68, 0xba, 0x30, 0x00, 0xbd, 0x1b, 0xc4,
        0xbb, 0x6f, 0x7d, 0x8a, 0xec, 0xd2, 0x18, 0xe3,
        0x49, 0x16, 0xad, 0xfe, 0x05, 0xd5, 0x4a, 0x2e,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs34_ProduceCorrectResult) {

    const u8 s[] = {
        0x4f, 0x97, 0xfd, 0x1f, 0xf5, 0x28, 0xa4, 0xb1,
        0xc4, 0x6d, 0x73, 0x6b, 0xdf, 0xfb, 0xf4, 0x32,
        0x59, 0xd8, 0xe2, 0xf9, 0xd7, 0x89, 0x0d, 0xe4,
        0x10, 0x22, 0x36, 0x23, 0x5e, 0xa6, 0xdb, 0x40,
        0xbb, 0xb8, 0x5f, 0xee, 0x2c, 0x9a, 0x2a, 0xcf,
        0x84, 0x38, 0xf4, 0x6d, 0x74, 0x64, 0x8e, 0xd1,
        0x0b, 0x9a, 0xa1, 0x8b, 0xb5, 0xa4, 0x24, 0x2c,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x0a, 0xe8, 0xa1, 0x72, 0x19, 0xc6, 0x98, 0xad,
        0x70, 0x67, 0x79, 0x20, 0xd7, 0x11, 0x84, 0x87,
        0xd9, 0xf5, 0x54, 0x4b, 0xff, 0x04, 0x17, 0xf9,
        0x22, 0x1d, 0x08, 0x5b, 0xf0, 0xa4, 0x39, 0x0a,
        0x08, 0x41, 0xdb, 0x31, 0xf0, 0xcd, 0xbf, 0xf3,
        0xd3, 0x84, 0xf0, 0xb5, 0xe2, 0x7b, 0xc4, 0xa1,
        0x64, 0x80, 0x5a, 0xde, 0x63, 0x2c, 0x9e, 0x73,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs35_ProduceCorrectResult) {

    const u8 s[] = {
        0xb8, 0xa5, 0x50, 0xf7, 0x6b, 0xd9, 0x48, 0x78,
        0x58, 0xf6, 0x9b, 0x59, 0x33, 0x43, 0x5e, 0x1c,
        0xd7, 0x11, 0xdf, 0xae, 0x4f, 0x1e, 0x7d, 0x40,
        0x04, 0x8c, 0xa9, 0xc5, 0xa5, 0x08, 0x40, 0x75,
        0xd9, 0x91, 0x5f, 0x1b, 0x89, 0xca, 0x06, 0x25,
        0xc0, 0x87, 0x04, 0x0a, 0xbf, 0xd1, 0x50, 0x78,
        0x7e, 0x5e, 0x46, 0xcc, 0x03, 0xd1, 0x92, 0x3e,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xe0, 0x6d, 0xcd, 0x79, 0xea, 0xec, 0x5c, 0x9d,
        0x79, 0xa7, 0x0c, 0x93, 0x11, 0xd2, 0x3b, 0xc5,
        0x51, 0x73, 0x4a, 0x5d, 0x8f, 0x4d, 0x8b, 0xb6,
        0x52, 0x3f, 0xf6, 0x5f, 0xfa, 0x9c, 0x87, 0x6c,
        0x1c, 0x2c, 0xf4, 0x10, 0x1c, 0xbb, 0x27, 0x71,
        0xa4, 0xad, 0x1b, 0x84, 0xc2, 0x03, 0xbb, 0x32,
        0x98, 0x6f, 0x4e, 0x63, 0x17, 0xe2, 0xc7, 0x15,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs36_ProduceCorrectResult) {

    const u8 s[] = {
        0x4b, 0xfb, 0xc6, 0xa5, 0x1a, 0xba, 0xdb, 0x9a,
        0xff, 0x7d, 0x25, 0xd3, 0xbe, 0x4f, 0x5a, 0xff,
        0x3c, 0x7c, 0x65, 0xb5, 0x7a, 0xb3, 0xef, 0xb9,
        0x05, 0x4a, 0x5f, 0x20, 0xa4, 0x5b, 0x8c, 0x72,
        0xcc, 0xf6, 0x55, 0xb3, 0xc0, 0xbc, 0xb7, 0x23,
        0x7a, 0x5f, 0x9c, 0x78, 0x00, 0x81, 0xe9, 0x62,
        0xfb, 0x48, 0x8a, 0x4c, 0x26, 0xf4, 0xf2, 0x36,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xa2, 0x86, 0x83, 0xd6, 0x18, 0x82, 0x2c, 0xb6,
        0xf3, 0x7f, 0x13, 0xa4, 0xb3, 0x93, 0x87, 0xc8,
        0x2a, 0xea, 0x59, 0xc5, 0x7c, 0xa3, 0x36, 0x90,
        0x32, 0x8f, 0x5f, 0x97, 0x5f, 0xf5, 0x71, 0x52,
        0xe1, 0x1c, 0x87, 0x75, 0x14, 0x58, 0xe0, 0x0e,
        0x3f, 0x97, 0x64, 0x78, 0xaa, 0xcc, 0x78, 0x0d,
        0xf9, 0xca, 0x1e, 0x3e, 0x10, 0xb5, 0xbc, 0x6d,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs37_ProduceCorrectResult) {

    const u8 s[] = {
        0xfd, 0xab, 0x75, 0xc0, 0xdd, 0x07, 0x76, 0x43,
        0xf1, 0x95, 0xe7, 0x05, 0x21, 0xfa, 0x5b, 0x2f,
        0x0e, 0xf8, 0xf4, 0x9b, 0x34, 0x3d, 0xd4, 0x01,
        0x26, 0x82, 0x3a, 0xb5, 0xe6, 0x76, 0xa7, 0xbb,
        0xf6, 0x98, 0xa8, 0x0f, 0xee, 0x93, 0x81, 0x59,
        0x87, 0x97, 0x49, 0xb3, 0x67, 0x8e, 0x6f, 0xc0,
        0xbf, 0xc4, 0xa3, 0xdc, 0xdf, 0x81, 0xea, 0x06,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x86, 0x05, 0x96, 0x64, 0x89, 0x9f, 0xc3, 0x52,
        0x90, 0x65, 0xc6, 0x82, 0x14, 0x75, 0xa1, 0x77,
        0xcf, 0xe4, 0xfb, 0xfd, 0x9f, 0x3f, 0x7b, 0xbb,
        0xe1, 0x4c, 0x31, 0x1a, 0x08, 0x6a, 0x7d, 0x20,
        0xf9, 0xf5, 0xcf, 0x11, 0x13, 0xe1, 0x45, 0x41,
        0xec, 0x34, 0x4e, 0x51, 0xe2, 0x85, 0x63, 0xc7,
        0x5f, 0xed, 0x13, 0x73, 0xc2, 0xd9, 0x58, 0x7c,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs38_ProduceCorrectResult) {

    const u8 s[] = {
        0x07, 0xe8, 0x77, 0x42, 0x23, 0x15, 0xaa, 0x45,
        0x84, 0xc4, 0x1e, 0xf9, 0x6b, 0x7f, 0x62, 0xd2,
        0xd2, 0xdb, 0x40, 0x3c, 0x3e, 0x1e, 0xb0, 0xe1,
        0xb3, 0xc8, 0x87, 0x81, 0xb2, 0x13, 0x39, 0x8e,
        0xd2, 0x07, 0x60, 0xc9, 0x7b, 0xe7, 0x38, 0x17,
        0xa8, 0xe7, 0x91, 0xfd, 0x33, 0x66, 0x0b, 0xf3,
        0x62, 0x13, 0x58, 0xb2, 0x47, 0x11, 0x05, 0x3c,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xf6, 0x9b, 0xbf, 0x69, 0x47, 0x22, 0x1e, 0x38,
        0x64, 0x60, 0xf3, 0x92, 0xa1, 0xc5, 0x4f, 0x77,
        0x62, 0x41, 0x1a, 0xb7, 0x18, 0x59, 0x71, 0xfb,
        0x14, 0xdc, 0x71, 0x5b, 0xf8, 0x9c, 0x69, 0xfc,
        0xab, 0x83, 0x9f, 0x94, 0xa3, 0xec, 0xc0, 0x3d,
        0xa7, 0x2a, 0xba, 0x45, 0x21, 0x09, 0xfa, 0x0d,
        0xe6, 0xbb, 0x12, 0x4b, 0xc8, 0x98, 0xe3, 0x71,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs39_ProduceCorrectResult) {

    const u8 s[] = {
        0x31, 0xc3, 0xc5, 0xe5, 0x5f, 0xa9, 0x74, 0x5d,
        0x87, 0x54, 0x49, 0xc6, 0x9c, 0x3a, 0x96, 0x00,
        0xc2, 0x72, 0xe7, 0xb7, 0x00, 0xea, 0xe6, 0x91,
        0xc8, 0xa7, 0x5b, 0xe5, 0x22, 0x1b, 0x07, 0x4b,
        0x2b, 0x7e, 0xec, 0x1c, 0x41, 0xde, 0x01, 0xf4,
        0x8a, 0xaf, 0x5d, 0xf6, 0x18, 0xc1, 0x29, 0xac,
        0xda, 0xb5, 0xa3, 0x23, 0xe8, 0xe5, 0x30, 0x0e,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xfd, 0x32, 0x69, 0x5c, 0x44, 0x30, 0x07, 0x4d,
        0x64, 0x33, 0xe1, 0x68, 0x51, 0x92, 0xb6, 0x91,
        0xf4, 0x78, 0xe5, 0xf4, 0x06, 0x3c, 0xc8, 0xdd,
        0xd3, 0x27, 0xdd, 0x49, 0xf2, 0x95, 0x89, 0x36,
        0xcf, 0x6a, 0x4a, 0x31, 0x0e, 0xd7, 0x0b, 0x08,
        0x25, 0x3d, 0x57, 0x5c, 0xac, 0x27, 0xe5, 0x47,
        0x9a, 0x21, 0x8a, 0xd0, 0xd0, 0x1f, 0x5f, 0x83,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs40_ProduceCorrectResult) {

    const u8 s[] = {
        0x14, 0x0a, 0xfb, 0xc2, 0x3a, 0xc7, 0xca, 0x3b,
        0x7f, 0x1e, 0xe4, 0xab, 0x90, 0x1e, 0xbd, 0xc3,
        0x10, 0x1d, 0x16, 0xfc, 0x9e, 0xdf, 0x02, 0xdb,
        0x73, 0x94, 0xeb, 0xb1, 0x55, 0x74, 0xe5, 0x98,
        0xdf, 0x3a, 0x90, 0x60, 0x65, 0x85, 0x2d, 0x4c,
        0x42, 0x9b, 0x2c, 0x94, 0x1b, 0xa7, 0x70, 0x86,
        0xc6, 0xe1, 0x14, 0xb6, 0x66, 0x5d, 0x7b, 0x2d,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x34, 0x7f, 0x8c, 0x5f, 0x27, 0xf6, 0xb1, 0xea,
        0x29, 0x29, 0x39, 0xee, 0x17, 0x0b, 0xf6, 0x41,
        0xdc, 0x6c, 0x8d, 0xb9, 0xeb, 0x12, 0xdc, 0x27,
        0xaa, 0x09, 0x16, 0x80, 0xb0, 0x0d, 0x04, 0xfa,
        0xd4, 0x03, 0xd2, 0xd5, 0x34, 0xd4, 0xdb, 0x4a,
        0xd8, 0x54, 0x19, 0xb5, 0xa1, 0x5c, 0x1d, 0x2d,
        0xd7, 0x0e, 0x7b, 0xba, 0x95, 0xec, 0x89, 0xd9,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs41_ProduceCorrectResult) {

    const u8 s[] = {
        0xf4, 0xac, 0x12, 0x04, 0xa5, 0x7d, 0xc5, 0xda,
        0x36, 0x33, 0x0a, 0x71, 0x82, 0x56, 0x94, 0xc0,
        0x59, 0x0d, 0x8c, 0xd0, 0xaf, 0x01, 0xb0, 0x71,
        0x9a, 0x2f, 0xc2, 0x35, 0x71, 0xa4, 0x7a, 0xf7,
        0x0e, 0x85, 0x15, 0x08, 0x91, 0x54, 0x19, 0x54,
        0x97, 0xd9, 0x51, 0x2d, 0xc9, 0x89, 0xcb, 0x93,
        0x81, 0xd2, 0xe4, 0xbb, 0x90, 0x39, 0x7d, 0x05,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x5e, 0x5c, 0xa7, 0xa5, 0xee, 0x19, 0x02, 0xa9,
        0x83, 0xa1, 0xdc, 0x1a, 0x6d, 0xd6, 0x73, 0x90,
        0xd9, 0x73, 0x3f, 0x2b, 0xdf, 0xd9, 0x26, 0xd9,
        0x74, 0xf6, 0x32, 0x94, 0xfb, 0xa4, 0x06, 0xb6,
        0x8e, 0x22, 0x28, 0xf2, 0x36, 0x72, 0xa6, 0x2b,
        0xfd, 0x43, 0x1c, 0x37, 0x4d, 0x78, 0xf9, 0x72,
        0x5f, 0x36, 0x1f, 0x01, 0xb8, 0x02, 0xce, 0x04,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs42_ProduceCorrectResult) {

    const u8 s[] = {
        0x73, 0x5a, 0x6b, 0x8a, 0xb3, 0xb9, 0xf0, 0xb1,
        0x6f, 0x42, 0x65, 0x86, 0x33, 0x99, 0x08, 0x59,
        0x96, 0xc9, 0x04, 0xb5, 0xb8, 0xa3, 0xf9, 0xfe,
        0x4b, 0x2f, 0xe9, 0x2c, 0x21, 0xdb, 0x6d, 0xf4,
        0xfd, 0xe6, 0x56, 0xf4, 0x3c, 0x94, 0x5a, 0xb2,
        0x2a, 0x02, 0x3a, 0x87, 0x40, 0xca, 0x9c, 0x70,
        0x87, 0xf3, 0x59, 0x05, 0xa6, 0x02, 0x8d, 0x09,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x83, 0x47, 0x77, 0x4c, 0x96, 0x43, 0xbf, 0x14,
        0xe9, 0x5a, 0xf3, 0xe6, 0xbf, 0x34, 0xcf, 0x3a,
        0xe9, 0x74, 0xf4, 0x75, 0xd7, 0xaa, 0x23, 0xbe,
        0xea, 0x3f, 0xfa, 0xb4, 0x07, 0xa2, 0x04, 0x95,
        0xb2, 0xeb, 0xbc, 0xd9, 0x0b, 0x0b, 0xcd, 0x2e,
        0x2f, 0xed, 0x4a, 0x26, 0x03, 0xfb, 0x61, 0x11,
        0x54, 0x2c, 0x91, 0x02, 0xdf, 0xdd, 0xe4, 0x57,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs43_ProduceCorrectResult) {

    const u8 s[] = {
        0x07, 0x02, 0x15, 0x53, 0x00, 0x80, 0x89, 0x3e,
        0x6b, 0xf4, 0x66, 0x7a, 0xb2, 0xcd, 0x53, 0x29,
        0x60, 0xce, 0x31, 0x22, 0x8c, 0x47, 0xfe, 0xfc,
        0xb9, 0xbd, 0x1e, 0x34, 0x11, 0xb4, 0x81, 0x2b,
        0xb2, 0x32, 0x92, 0x40, 0x06, 0xd1, 0x23, 0x00,
        0x3b, 0x9c, 0x35, 0xf1, 0x3d, 0x1b, 0xad, 0x89,
        0x23, 0xf1, 0x6f, 0xbb, 0xd4, 0x6a, 0x7e, 0x24,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xa8, 0xde, 0x36, 0x72, 0xa5, 0x29, 0xf1, 0xa3,
        0xf3, 0xb2, 0x56, 0x82, 0xad, 0x47, 0x96, 0x04,
        0xb2, 0x55, 0x34, 0xe2, 0x7b, 0xfd, 0x59, 0x7a,
        0xab, 0x27, 0x32, 0xad, 0xb7, 0x99, 0x9f, 0xda,
        0x8d, 0x68, 0x6b, 0xb0, 0x1b, 0x8f, 0x31, 0xd5,
        0xcb, 0xb2, 0x37, 0xc7, 0x7c, 0x0f, 0x1c, 0xb3,
        0xf4, 0x6c, 0x4c, 0xd4, 0x38, 0x7f, 0x76, 0x70,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs44_ProduceCorrectResult) {

    const u8 s[] = {
        0x2b, 0x00, 0xca, 0x1e, 0x0d, 0x1f, 0xc2, 0x43,
        0x11, 0x95, 0x06, 0x80, 0x39, 0x0f, 0xbc, 0xba,
        0x22, 0x1b, 0xe9, 0x6d, 0x89, 0xa2, 0xe4, 0x53,
        0xb4, 0x51, 0x43, 0xd5, 0xca, 0x78, 0xd0, 0xb0,
        0xc8, 0x75, 0x76, 0xbd, 0xac, 0x61, 0x6d, 0xda,
        0xc6, 0x4d, 0xa6, 0x82, 0x68, 0x21, 0xcd, 0xb7,
        0x0b, 0x02, 0xb3, 0x32, 0x4a, 0x06, 0x88, 0x0f,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x0f, 0xa1, 0x5e, 0x24, 0x46, 0x96, 0x74, 0xe8,
        0xca, 0xae, 0x24, 0x2b, 0x0a, 0xb3, 0x65, 0x3e,
        0xa6, 0x44, 0x2e, 0xe3, 0x99, 0xf1, 0x1b, 0xe8,
        0x52, 0x6d, 0x66, 0x47, 0x57, 0xb3, 0x07, 0xcf,
        0xd1, 0x0a, 0x3a, 0x28, 0xcf, 0x05, 0x2d, 0xa4,
        0x2b, 0x0a, 0x00, 0x91, 0xf7, 0x1a, 0x2a, 0x57,
        0x5d, 0x5b, 0xd6, 0x06, 0x2a, 0xe0, 0xdf, 0x60,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs45_ProduceCorrectResult) {

    const u8 s[] = {
        0x1a, 0x4c, 0xa2, 0x1b, 0x55, 0xe2, 0x0d, 0xa2,
        0xe2, 0xa5, 0x80, 0x6f, 0x75, 0x70, 0x96, 0xa0,
        0xdd, 0x17, 0x4b, 0x7a, 0x8c, 0xfc, 0x58, 0x75,
        0xd2, 0x60, 0xa6, 0x57, 0x15, 0xa0, 0xf0, 0x22,
        0x20, 0x5e, 0x83, 0x61, 0x7a, 0x8c, 0xc3, 0x21,
        0xfe, 0xcf, 0x3a, 0x95, 0xc6, 0xfa, 0x1a, 0x06,
        0xc5, 0xc3, 0x1c, 0xb1, 0xd7, 0x83, 0x74, 0x17,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x89, 0x6c, 0xdd, 0xe2, 0x40, 0xf1, 0x5f, 0x5b,
        0x57, 0x8c, 0x6c, 0x91, 0x72, 0xd6, 0xf1, 0xa7,
        0x94, 0x7a, 0x82, 0x9a, 0xa8, 0xf0, 0x57, 0x47,
        0x8d, 0x9c, 0x4b, 0x1d, 0x1a, 0x53, 0xfa, 0x8e,
        0xe8, 0x82, 0xa7, 0xcc, 0xf1, 0x2f, 0xbe, 0xc1,
        0xdc, 0x57, 0x8f, 0x7f, 0xfc, 0x70, 0xbb, 0x07,
        0xef, 0xb0, 0x88, 0x14, 0xe0, 0x47, 0xeb, 0x1d,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs46_ProduceCorrectResult) {

    const u8 s[] = {
        0xe3, 0x2b, 0xfa, 0xd7, 0xb2, 0x69, 0xfd, 0x25,
        0x5b, 0x09, 0xe4, 0x4c, 0x64, 0x04, 0xa6, 0x6b,
        0x06, 0x6a, 0xfa, 0x5b, 0x34, 0x49, 0x90, 0xee,
        0xc4, 0x5a, 0x3c, 0xa1, 0xdd, 0x3a, 0x77, 0x0b,
        0x59, 0x6b, 0x08, 0xa1, 0xef, 0x48, 0x1b, 0x0c,
        0x68, 0xf6, 0xdf, 0xdc, 0xff, 0x0a, 0x4f, 0x13,
        0x3d, 0x03, 0xbe, 0x2f, 0xe2, 0x3b, 0x3e, 0x21,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x8b, 0x6f, 0xe7, 0x86, 0x17, 0x1d, 0x3e, 0xc9,
        0x2a, 0x42, 0x7d, 0x15, 0x2f, 0xde, 0x51, 0xc6,
        0xb9, 0x79, 0x8d, 0xa3, 0x30, 0x08, 0xdf, 0x46,
        0xaa, 0x31, 0x8c, 0x23, 0xf5, 0x7e, 0x52, 0xf6,
        0x28, 0xf3, 0x01, 0x44, 0xde, 0x7e, 0xd7, 0xb7,
        0xa0, 0x09, 0xd3, 0xa7, 0x64, 0x34, 0xfc, 0x6d,
        0x38, 0xdf, 0x4f, 0x1a, 0xa4, 0x6d, 0xcc, 0xe1,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs47_ProduceCorrectResult) {

    const u8 s[] = {
        0xa9, 0x74, 0x05, 0xf1, 0xee, 0x7b, 0xdf, 0x1f,
        0x29, 0xf4, 0x4e, 0xbb, 0x5a, 0x8a, 0xed, 0x9f,
        0x0e, 0xc6, 0xd1, 0xa7, 0x2a, 0xc9, 0x1b, 0xf7,
        0x7d, 0x33, 0x84, 0xb1, 0x6f, 0x35, 0x3d, 0x76,
        0x45, 0x6b, 0x52, 0x1e, 0xf6, 0xed, 0x55, 0x98,
        0x02, 0x18, 0x2a, 0x37, 0x03, 0x28, 0xf5, 0xd7,
        0x7c, 0xcd, 0x7e, 0x94, 0xf9, 0x5a, 0x38, 0x2c,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x25, 0x3e, 0xce, 0x55, 0x24, 0xb0, 0xcd, 0x1c,
        0x39, 0x00, 0x2a, 0x7d, 0x3c, 0x16, 0xaa, 0x76,
        0x0c, 0xd9, 0xd5, 0xc9, 0xc1, 0x1c, 0x71, 0xe2,
        0x3d, 0x7b, 0x67, 0x9d, 0x69, 0x63, 0x25, 0xbc,
        0xbb, 0xa3, 0xbf, 0xae, 0xd1, 0x27, 0x05, 0x7c,
        0x27, 0x84, 0x2a, 0xd1, 0xfd, 0x11, 0x50, 0xba,
        0x5f, 0xf3, 0xd9, 0x57, 0x5f, 0x6a, 0xa7, 0x88,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs48_ProduceCorrectResult) {

    const u8 s[] = {
        0x4a, 0x93, 0xdd, 0x76, 0x66, 0xf4, 0x00, 0xb5,
        0x02, 0xfe, 0x3a, 0x7e, 0x3e, 0xd6, 0xb9, 0xe0,
        0xa9, 0xb6, 0xdc, 0xc7, 0x9f, 0xdc, 0xf9, 0x20,
        0x25, 0xd4, 0x4c, 0x73, 0x5a, 0x56, 0x6b, 0xb8,
        0xf0, 0xbe, 0x6b, 0x00, 0x7c, 0xb2, 0x00, 0xa4,
        0x4f, 0xac, 0xe4, 0xbe, 0xd5, 0x68, 0x64, 0x7b,
        0x2d, 0x55, 0xd5, 0xc3, 0x96, 0x48, 0x59, 0x28,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xe5, 0xd6, 0xf7, 0xaf, 0xe9, 0x99, 0x54, 0x44,
        0xcd, 0x40, 0xdb, 0xa4, 0xa8, 0x7b, 0x4c, 0x97,
        0x74, 0x35, 0x9c, 0x48, 0x6f, 0x80, 0xce, 0xf3,
        0x8d, 0x0b, 0xad, 0xb4, 0xce, 0x3a, 0x02, 0x43,
        0x51, 0x67, 0x7f, 0x0f, 0x49, 0x79, 0x85, 0xd1,
        0xfc, 0xee, 0x67, 0xfd, 0xd2, 0xbd, 0xa4, 0x25,
        0xd2, 0x89, 0xf9, 0xb9, 0x43, 0x20, 0x9b, 0x52,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs49_ProduceCorrectResult) {

    const u8 s[] = {
        0xfe, 0x47, 0x4e, 0x0c, 0xbc, 0x0d, 0xb7, 0xe9,
        0xcd, 0xd6, 0x5c, 0x38, 0xff, 0xa6, 0x05, 0x18,
        0x7e, 0xbb, 0xff, 0x4d, 0xe3, 0xd8, 0x9c, 0x03,
        0xca, 0x30, 0xcb, 0xe7, 0x2c, 0xc4, 0x5a, 0x27,
        0x5a, 0x68, 0x4f, 0xce, 0x5d, 0x9f, 0x2c, 0xa0,
        0xda, 0x50, 0x4e, 0xc3, 0xce, 0xbe, 0x0a, 0x02,
        0x46, 0x93, 0x06, 0xe9, 0x8f, 0xf3, 0x94, 0x28,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x7a, 0x1f, 0xbc, 0x62, 0x9e, 0x73, 0x97, 0x5a,
        0x8d, 0x57, 0x12, 0xd7, 0xc8, 0x8b, 0x6b, 0x85,
        0xd3, 0x5d, 0x8d, 0xa1, 0x5a, 0xbf, 0xe9, 0xc4,
        0x3b, 0x06, 0xa6, 0x05, 0xb9, 0x55, 0xff, 0x92,
        0xd5, 0xa3, 0xef, 0x58, 0x4e, 0xc9, 0x8d, 0x2b,
        0xef, 0x67, 0xfb, 0x5a, 0x8e, 0x31, 0x71, 0x19,
        0x81, 0x42, 0x74, 0xe8, 0x0d, 0x2b, 0xa0, 0xf8,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs50_ProduceCorrectResult) {

    const u8 s[] = {
        0x49, 0x90, 0xc1, 0x59, 0xb8, 0x7f, 0x79, 0x29,
        0x4f, 0xbc, 0x91, 0x33, 0xc1, 0xc9, 0x67, 0xfa,
        0x1c, 0xb7, 0xc8, 0xdc, 0x9c, 0x53, 0xf5, 0xde,
        0x15, 0x28, 0x8d, 0xed, 0xd0, 0x6e, 0x7a, 0xc6,
        0xd9, 0x7b, 0x52, 0xb4, 0x13, 0x0f, 0x4e, 0x0b,
        0x14, 0xac, 0xfa, 0xef, 0xc3, 0xcb, 0x49, 0xc0,
        0xb9, 0xe2, 0xf4, 0x9e, 0xd6, 0x99, 0x1a, 0x27,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x3a, 0xde, 0x94, 0x5c, 0x2c, 0xbb, 0x29, 0x11,
        0x81, 0x1a, 0xda, 0x14, 0x8e, 0x7a, 0x88, 0x99,
        0xaf, 0xc5, 0xd1, 0xd2, 0x9f, 0x50, 0x8e, 0x06,
        0xfc, 0x8f, 0x67, 0x48, 0x32, 0x93, 0x9e, 0xb4,
        0x73, 0x99, 0xa1, 0x8f, 0xd7, 0x5d, 0x0f, 0x02,
        0xf6, 0xb4, 0xb2, 0xea, 0x9f, 0x2d, 0x29, 0xd0,
        0x0f, 0xae, 0x51, 0x65, 0xf1, 0xdb, 0xda, 0xd5,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs51_ProduceCorrectResult) {

    const u8 s[] = {
        0xf7, 0x5e, 0x8c, 0x0a, 0x94, 0x0e, 0x07, 0xeb,
        0x76, 0x43, 0xa2, 0x64, 0x89, 0xcd, 0x5c, 0x5d,
        0x25, 0x3f, 0x5f, 0x30, 0x5f, 0xc5, 0x09, 0x3e,
        0x03, 0xd6, 0xb8, 0xbe, 0xc7, 0x4a, 0x31, 0x61,
        0x69, 0xd1, 0x51, 0x9f, 0xb6, 0x3e, 0x38, 0x55,
        0x7d, 0x42, 0xa9, 0xe5, 0x75, 0x76, 0x8d, 0x34,
        0xb9, 0x3e, 0x87, 0xf2, 0xba, 0x07, 0xfd, 0x06,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x34, 0x87, 0xbb, 0x4d, 0xdc, 0xfd, 0xc8, 0xa1,
        0x94, 0x3c, 0x22, 0xa4, 0xa4, 0x44, 0x45, 0x1a,
        0x3f, 0x31, 0xd7, 0xaa, 0xd1, 0xb7, 0x27, 0x24,
        0x18, 0x0c, 0x51, 0x41, 0xc3, 0x1b, 0x15, 0x99,
        0x6b, 0x35, 0xea, 0x57, 0xd2, 0x00, 0x3d, 0x19,
        0x87, 0x13, 0x49, 0x83, 0x72, 0xf0, 0xa7, 0x53,
        0xc2, 0xf9, 0xd9, 0x94, 0x51, 0x64, 0x24, 0x4e,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs52_ProduceCorrectResult) {

    const u8 s[] = {
        0xcc, 0xa5, 0x5d, 0xd2, 0xc5, 0x41, 0x31, 0xb4,
        0xa3, 0x18, 0x71, 0xbc, 0xa0, 0xc5, 0xe4, 0x2b,
        0xd6, 0x8e, 0x02, 0x8d, 0x05, 0xf1, 0x15, 0x31,
        0x34, 0xd7, 0xdc, 0x0e, 0x7b, 0x4b, 0x5a, 0x64,
        0xb5, 0x38, 0x01, 0xd3, 0x4e, 0x5f, 0x58, 0x10,
        0x40, 0xec, 0xf6, 0x4c, 0x64, 0x6b, 0x6b, 0xd0,
        0x4b, 0x0f, 0x53, 0x53, 0xa6, 0xf3, 0xc1, 0x11,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x6f, 0x85, 0x6e, 0x0f, 0xcf, 0x09, 0xe5, 0x63,
        0x92, 0x36, 0x59, 0x05, 0x3f, 0xf6, 0x67, 0x1b,
        0xea, 0xfd, 0xda, 0x90, 0xb2, 0xb8, 0x98, 0xfd,
        0x54, 0x5d, 0xf6, 0x18, 0x63, 0xf9, 0xc2, 0x04,
        0x2a, 0xac, 0x2a, 0x7c, 0x80, 0xea, 0x16, 0xf9,
        0x06, 0x94, 0xfe, 0xa1, 0x0c, 0xfc, 0xd1, 0xf2,
        0x6d, 0xbd, 0xc1, 0x2c, 0xf1, 0x90, 0x5f, 0x36,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs53_ProduceCorrectResult) {

    const u8 s[] = {
        0x1c, 0x9f, 0x20, 0x17, 0xad, 0x28, 0xbf, 0x3e,
        0x10, 0xe7, 0xbf, 0x42, 0x5f, 0x12, 0x42, 0x94,
        0x4d, 0x22, 0xf1, 0x55, 0x75, 0x46, 0x10, 0x22,
        0x7f, 0x70, 0x99, 0xe5, 0x7b, 0x22, 0x73, 0x45,
        0xa1, 0x94, 0x08, 0xfd, 0x63, 0xa6, 0x3b, 0x48,
        0x5b, 0x98, 0x45, 0xa8, 0x3a, 0x4e, 0x6d, 0x95,
        0x95, 0xa1, 0xfd, 0xcf, 0x24, 0x4b, 0xc8, 0x11,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x30, 0xc4, 0xc1, 0x51, 0xb5, 0xa6, 0x04, 0xb8,
        0x38, 0x62, 0xd9, 0xc6, 0xad, 0xde, 0x2f, 0x5b,
        0x3f, 0x90, 0xc4, 0x5d, 0x06, 0x20, 0xcc, 0x3c,
        0x00, 0x12, 0xb8, 0x7e, 0xe1, 0xe2, 0xb9, 0xe3,
        0x51, 0xfa, 0x25, 0xb9, 0xec, 0xbe, 0x3a, 0x61,
        0x5a, 0x87, 0xf9, 0x4b, 0xfe, 0xab, 0x0c, 0xfd,
        0xd8, 0xf0, 0xfe, 0x58, 0xe4, 0xc3, 0xe2, 0x3d,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs54_ProduceCorrectResult) {

    const u8 s[] = {
        0x05, 0xe8, 0x50, 0xbf, 0x30, 0x3f, 0x00, 0x5a,
        0x35, 0x38, 0xfa, 0xe1, 0x72, 0x4d, 0x56, 0x6a,
        0x11, 0x31, 0x45, 0xd3, 0x63, 0x0c, 0x00, 0x24,
        0xd6, 0x18, 0x79, 0x10, 0xd0, 0x20, 0x11, 0xc7,
        0x0a, 0x64, 0x64, 0x0a, 0x4b, 0x61, 0xae, 0x62,
        0x7a, 0x07, 0x46, 0x08, 0x03, 0x20, 0x2c, 0x79,
        0x9f, 0x8f, 0xbf, 0x2a, 0xae, 0x7d, 0x95, 0x13,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xa9, 0x26, 0x58, 0xb6, 0x47, 0xf2, 0xda, 0xd4,
        0x57, 0xaf, 0xf5, 0x47, 0xa6, 0x5c, 0x29, 0xd0,
        0x6e, 0xda, 0xc0, 0xd8, 0x3d, 0xa9, 0x51, 0x8f,
        0xf2, 0x67, 0x2f, 0x56, 0xe1, 0x47, 0xc8, 0x7f,
        0x98, 0x64, 0x4b, 0xab, 0x3f, 0x55, 0x21, 0x6d,
        0xb9, 0x5e, 0x63, 0xfe, 0xc8, 0x0f, 0xca, 0x39,
        0xf2, 0x5e, 0x92, 0x39, 0xc4, 0x0a, 0xd5, 0x09,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs55_ProduceCorrectResult) {

    const u8 s[] = {
        0xea, 0x82, 0xb9, 0x5e, 0xbb, 0x36, 0xfe, 0xe1,
        0xc4, 0x5f, 0x67, 0x7a, 0xa5, 0x91, 0x4e, 0x65,
        0xde, 0xe8, 0x79, 0xe3, 0xe4, 0x4b, 0x98, 0xe5,
        0x4f, 0xe4, 0xd2, 0x01, 0x6f, 0x1a, 0xba, 0xce,
        0xcc, 0x9c, 0x48, 0x5a, 0x86, 0xf6, 0x7f, 0xfc,
        0x01, 0x74, 0x3a, 0xf5, 0x7c, 0xd1, 0xdd, 0xcc,
        0xe5, 0x2b, 0xb8, 0x0c, 0x98, 0x3a, 0xd5, 0x2f,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x04, 0x2b, 0xd5, 0xcf, 0xe8, 0xa8, 0x18, 0xa5,
        0x45, 0xc4, 0xa4, 0xe7, 0xf9, 0xdf, 0xf4, 0xb9,
        0x78, 0x9c, 0xfd, 0xd4, 0x45, 0xac, 0x46, 0x08,
        0xa9, 0x89, 0xc9, 0x62, 0x47, 0xfb, 0xc0, 0xb5,
        0x7a, 0xf5, 0x94, 0x31, 0x8c, 0x3a, 0xb4, 0xcb,
        0x01, 0x90, 0xcd, 0x5e, 0x27, 0x53, 0xea, 0x0f,
        0x6e, 0xf7, 0xd3, 0x62, 0xe1, 0x2b, 0x73, 0x81,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs56_ProduceCorrectResult) {

    const u8 s[] = {
        0x26, 0xd2, 0x1e, 0xa4, 0xb3, 0x3e, 0x70, 0x7e,
        0x6b, 0xeb, 0xf7, 0x9e, 0x0e, 0x47, 0x86, 0xab,
        0xcb, 0x8f, 0x07, 0x89, 0xec, 0x67, 0xcf, 0xe7,
        0x15, 0x89, 0x33, 0x1c, 0xc2, 0x42, 0xc8, 0xb6,
        0xb1, 0x23, 0x65, 0xe9, 0x64, 0x69, 0x90, 0x47,
        0x30, 0x37, 0x0e, 0x00, 0x26, 0x05, 0xaf, 0x78,
        0x18, 0x63, 0x4d, 0xf7, 0xce, 0x2f, 0x28, 0x20,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x4c, 0x8a, 0x38, 0x7b, 0xac, 0x99, 0xf1, 0xc5,
        0xac, 0x4e, 0x4d, 0xf7, 0xfc, 0xa0, 0xfc, 0xba,
        0xaa, 0x9e, 0x99, 0x86, 0x5e, 0xed, 0x77, 0xc2,
        0x65, 0x5d, 0x52, 0xf5, 0xb0, 0x90, 0x40, 0x0c,
        0x20, 0x29, 0x96, 0x9a, 0x89, 0x2a, 0x9b, 0xed,
        0xcf, 0xe7, 0xd3, 0xe0, 0xe8, 0xf7, 0x91, 0xff,
        0x38, 0x44, 0xf5, 0xae, 0x07, 0x00, 0xa8, 0xb9,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs57_ProduceCorrectResult) {

    const u8 s[] = {
        0x3c, 0xf2, 0x35, 0x64, 0x92, 0xc3, 0x6e, 0x7f,
        0xd5, 0x0f, 0x32, 0xe6, 0x42, 0x89, 0x7e, 0x16,
        0xe1, 0xde, 0x62, 0x83, 0xc9, 0x2e, 0x24, 0xa6,
        0x3c, 0xd8, 0xb3, 0x30, 0xb1, 0x9a, 0x99, 0x22,
        0x52, 0x5f, 0xad, 0xfe, 0x49, 0xc9, 0xc8, 0xf3,
        0xfb, 0xa9, 0x48, 0x53, 0x03, 0x05, 0x24, 0xe5,
        0x37, 0x70, 0x31, 0xcd, 0xd4, 0x77, 0xfa, 0x1f,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xd0, 0x57, 0xb2, 0x19, 0xd1, 0x49, 0x08, 0x7c,
        0xd2, 0xc4, 0xf1, 0x68, 0x92, 0xc5, 0x2c, 0x39,
        0x64, 0x40, 0xe8, 0x3d, 0x56, 0x5c, 0x5c, 0x45,
        0x24, 0xb7, 0x50, 0xd6, 0xf2, 0x2e, 0xec, 0x1b,
        0xd2, 0xe5, 0x98, 0x2e, 0x3d, 0x66, 0xa3, 0x03,
        0x3c, 0xf0, 0xda, 0x0d, 0x72, 0x1c, 0x7a, 0xfb,
        0x7b, 0xe3, 0x0c, 0x3f, 0x7c, 0x22, 0x4e, 0x74,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs58_ProduceCorrectResult) {

    const u8 s[] = {
        0x8b, 0x71, 0x88, 0xf2, 0xe7, 0xd1, 0xcd, 0x39,
        0x91, 0x3f, 0xf5, 0x27, 0x67, 0xba, 0xf3, 0x1e,
        0x12, 0x4d, 0x16, 0xbf, 0xb7, 0xad, 0xab, 0x2b,
        0x94, 0xe5, 0xd6, 0xd0, 0x6a, 0x0a, 0xfc, 0xe4,
        0xe8, 0x22, 0xf2, 0xcc, 0x46, 0x97, 0xa9, 0x72,
        0x4b, 0x96, 0x7b, 0x4a, 0xff, 0x15, 0x40, 0x58,
        0xc1, 0x5b, 0x14, 0x88, 0x5d, 0xea, 0x5e, 0x16,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x02, 0xe9, 0x77, 0xa8, 0x96, 0x9e, 0x42, 0x48,
        0xa0, 0xa6, 0x9f, 0x18, 0x4f, 0x7e, 0x27, 0xfe,
        0xf1, 0x38, 0x6c, 0x12, 0xed, 0x14, 0xc4, 0x54,
        0x44, 0x92, 0xb1, 0xf5, 0x4e, 0x1c, 0x34, 0x21,
        0x91, 0x16, 0xf7, 0x6e, 0x93, 0xdc, 0x43, 0x6b,
        0x91, 0x1b, 0x24, 0x9f, 0x30, 0x42, 0xdd, 0x34,
        0xf6, 0x6d, 0xeb, 0xd3, 0x67, 0xdc, 0x00, 0x76,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs59_ProduceCorrectResult) {

    const u8 s[] = {
        0x74, 0x19, 0x41, 0xc2, 0x09, 0x42, 0x64, 0x4f,
        0x7e, 0xf7, 0xc0, 0x0b, 0x60, 0x41, 0xc0, 0x5e,
        0x57, 0x30, 0xab, 0x00, 0x20, 0x85, 0x2d, 0xb1,
        0x08, 0x09, 0x83, 0x3f, 0x3c, 0x4d, 0xb4, 0xc2,
        0x98, 0x89, 0x76, 0xb7, 0x9f, 0xd6, 0x8b, 0xca,
        0x4b, 0x6b, 0x8b, 0x09, 0xcd, 0xd1, 0x6b, 0x6d,
        0xae, 0xa2, 0xa5, 0xb9, 0x07, 0x58, 0x0a, 0x15,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x5d, 0xe6, 0x7f, 0x7a, 0x2a, 0xcd, 0xa3, 0x79,
        0x22, 0x7c, 0x15, 0x44, 0xd9, 0x12, 0xe0, 0xe6,
        0xda, 0xcf, 0xb3, 0xc7, 0xbd, 0x3c, 0x1e, 0x8e,
        0x57, 0x40, 0x8a, 0xfd, 0xb9, 0xe1, 0x36, 0xb8,
        0x3a, 0xdf, 0xda, 0x8c, 0xc9, 0x7c, 0xd2, 0xcc,
        0x20, 0xe0, 0xf1, 0x07, 0x7e, 0x5c, 0xa6, 0x8a,
        0x94, 0x6f, 0x9b, 0x85, 0x0b, 0x3e, 0x0c, 0xb8,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs60_ProduceCorrectResult) {

    const u8 s[] = {
        0x8f, 0xc3, 0xdd, 0x5b, 0xec, 0xb7, 0x7d, 0x06,
        0x19, 0xf4, 0x7c, 0xea, 0xba, 0xda, 0x71, 0x19,
        0x58, 0xd6, 0xd4, 0x0c, 0xe1, 0x87, 0x34, 0x04,
        0xa5, 0xe1, 0xa1, 0xec, 0x1e, 0x5f, 0x65, 0xc3,
        0xb5, 0x26, 0xbb, 0x2f, 0x2b, 0x18, 0xaa, 0xc9,
        0x99, 0x5b, 0x4e, 0xa6, 0x15, 0xe6, 0xb8, 0x7c,
        0xec, 0x0e, 0x2c, 0xa2, 0x4c, 0xd0, 0x34, 0x2f,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xf1, 0xae, 0x8f, 0x32, 0x6c, 0x3f, 0x8b, 0x68,
        0x26, 0x3e, 0x41, 0x45, 0x7d, 0xd2, 0xdf, 0x9c,
        0x0e, 0x46, 0x59, 0xee, 0x69, 0x07, 0xe5, 0x4d,
        0x24, 0x08, 0xa5, 0xd1, 0x23, 0x86, 0x22, 0x47,
        0xe0, 0xf8, 0x82, 0x21, 0x57, 0xf0, 0xd5, 0xda,
        0xb5, 0x24, 0x5c, 0x97, 0x10, 0xad, 0xfd, 0x3c,
        0x5e, 0x59, 0x95, 0x98, 0x81, 0xbb, 0x95, 0x5f,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs61_ProduceCorrectResult) {

    const u8 s[] = {
        0xc4, 0x6d, 0xb0, 0x4a, 0x7b, 0xe1, 0x7a, 0xc2,
        0x95, 0x9a, 0xf5, 0x53, 0x4a, 0xac, 0x07, 0xe8,
        0xc5, 0xc7, 0xad, 0x7d, 0xbe, 0xd5, 0xae, 0x30,
        0x20, 0xc1, 0xcc, 0x24, 0xe0, 0x04, 0x4d, 0x28,
        0xef, 0xfc, 0xc5, 0xb3, 0x18, 0x18, 0x16, 0x39,
        0x50, 0xdb, 0xf2, 0xb3, 0xdd, 0xb0, 0x00, 0xb8,
        0x11, 0xdc, 0x4f, 0x4a, 0x60, 0x31, 0xd4, 0x05,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x22, 0x3d, 0x17, 0x77, 0xd1, 0x69, 0x24, 0x0b,
        0x27, 0x7a, 0x90, 0x4f, 0xb2, 0xa3, 0x86, 0x3f,
        0x21, 0x8f, 0xa0, 0xc0, 0x30, 0xdf, 0xf6, 0xd0,
        0xbe, 0x56, 0x14, 0x6c, 0x57, 0xaa, 0x37, 0x00,
        0x2f, 0x21, 0x15, 0x97, 0x35, 0x1e, 0xd5, 0x75,
        0x20, 0x08, 0x95, 0x67, 0xe6, 0x5a, 0x2c, 0x25,
        0x7b, 0x3e, 0x6e, 0xae, 0x7f, 0xda, 0xe9, 0xa5,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs62_ProduceCorrectResult) {

    const u8 s[] = {
        0x32, 0xbf, 0x5c, 0xda, 0xca, 0x19, 0x9d, 0x5b,
        0xfa, 0x56, 0x1b, 0x85, 0x69, 0xe2, 0x07, 0x5d,
        0x68, 0xea, 0x38, 0x12, 0x4a, 0x84, 0xf0, 0x84,
        0x9e, 0x55, 0x88, 0x61, 0xc1, 0x9a, 0xde, 0x68,
        0x49, 0x45, 0xa3, 0x27, 0x25, 0x6f, 0x8e, 0x5d,
        0xfd, 0xdc, 0xe6, 0x16, 0x42, 0xd0, 0x62, 0xed,
        0x16, 0x65, 0x29, 0x81, 0x6e, 0x2f, 0x50, 0x2d,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xb4, 0xa0, 0xf4, 0xb9, 0x34, 0x1a, 0x2c, 0xf7,
        0x73, 0x2f, 0xfa, 0xb6, 0xec, 0x01, 0x33, 0x80,
        0x52, 0x15, 0xc1, 0xa9, 0x1d, 0xed, 0xb5, 0x12,
        0x7a, 0xce, 0xe2, 0x07, 0x30, 0xb6, 0xae, 0xaa,
        0xc2, 0x32, 0x15, 0x4b, 0x8a, 0x17, 0x0d, 0x6b,
        0x9b, 0x66, 0xb7, 0x4c, 0xac, 0x6d, 0x2c, 0x6a,
        0x5f, 0x28, 0x5a, 0x2d, 0xf7, 0x75, 0xab, 0xdd,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs63_ProduceCorrectResult) {

    const u8 s[] = {
        0xcc, 0xc0, 0x23, 0x98, 0xcb, 0xc8, 0xd1, 0x13,
        0x4d, 0x00, 0x22, 0x3d, 0x59, 0x0c, 0x39, 0x41,
        0x27, 0x8a, 0x8a, 0x81, 0xd5, 0xce, 0xcd, 0xb4,
        0x5c, 0x62, 0xe4, 0x31, 0xc1, 0x7e, 0x84, 0x69,
        0xaa, 0x8e, 0x30, 0xbd, 0x2a, 0xbd, 0x5f, 0xd8,
        0x97, 0xe4, 0xae, 0xd7, 0x67, 0xb1, 0xe7, 0x69,
        0x6f, 0xe5, 0x3b, 0x40, 0xce, 0xf9, 0x12, 0x04,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x6f, 0x48, 0x5b, 0x9a, 0x44, 0x36, 0xa1, 0x5b,
        0xd8, 0xb9, 0x0c, 0x26, 0xda, 0x99, 0x6c, 0xdf,
        0x14, 0x57, 0x25, 0xac, 0x32, 0xa6, 0x5c, 0xe9,
        0x2d, 0x6d, 0x5f, 0x33, 0x83, 0x60, 0x74, 0x1a,
        0xcb, 0xea, 0x78, 0xfb, 0xba, 0xee, 0x55, 0x3f,
        0x9b, 0xe2, 0x9d, 0xdd, 0x9c, 0x86, 0xda, 0x80,
        0x42, 0x14, 0x80, 0xea, 0x29, 0xb4, 0x90, 0x52,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs64_ProduceCorrectResult) {

    const u8 s[] = {
        0x77, 0x9e, 0x56, 0x20, 0xc1, 0xe7, 0x9d, 0xe9,
        0x4c, 0xa4, 0x68, 0xc1, 0x4e, 0x99, 0xd3, 0xf6,
        0x33, 0xcb, 0x24, 0xe0, 0x7e, 0x93, 0x5c, 0xf1,
        0x72, 0xa9, 0x7c, 0x7b, 0xc4, 0x72, 0xd4, 0xe9,
        0x4e, 0x2c, 0xaa, 0xa4, 0x22, 0x52, 0x20, 0xd8,
        0xb1, 0xd8, 0x1c, 0xd0, 0xf1, 0x79, 0x2c, 0x10,
        0x93, 0xe0, 0xe5, 0x82, 0x05, 0x84, 0xf0, 0x3d,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x6a, 0x85, 0xec, 0xbd, 0xe8, 0x8a, 0x80, 0xc7,
        0xc6, 0x66, 0x7a, 0x01, 0xf5, 0xfd, 0x4a, 0x5d,
        0xeb, 0xc6, 0xa0, 0xb1, 0x5c, 0x9c, 0x57, 0x3e,
        0xab, 0x98, 0x76, 0x50, 0xca, 0x38, 0xf9, 0xef,
        0xca, 0x35, 0x83, 0x31, 0x41, 0x30, 0xb0, 0xe5,
        0xe0, 0xf4, 0x5f, 0x65, 0xe0, 0xfb, 0x13, 0x11,
        0x74, 0x5d, 0xa4, 0x75, 0x33, 0x3d, 0x54, 0x0d,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs65_ProduceCorrectResult) {

    const u8 s[] = {
        0xfe, 0x0b, 0x6d, 0x6c, 0x51, 0x15, 0x48, 0x33,
        0xec, 0x83, 0x98, 0xb6, 0x00, 0x07, 0x52, 0x10,
        0xe0, 0xe4, 0xa3, 0xc7, 0x73, 0x69, 0xed, 0x8b,
        0xcf, 0x36, 0x18, 0x37, 0x0a, 0x04, 0xb4, 0xf5,
        0xf5, 0x33, 0xd8, 0x42, 0x71, 0x73, 0x92, 0x9f,
        0x3c, 0xa4, 0xda, 0xf8, 0xbb, 0xeb, 0x12, 0x23,
        0xfe, 0xfc, 0x18, 0x90, 0xb9, 0xe7, 0xae, 0x3c,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x6b, 0xbd, 0xa2, 0xb9, 0x5f, 0x09, 0x0c, 0xaf,
        0x93, 0x55, 0x71, 0x36, 0x4b, 0x3e, 0x7d, 0xd4,
        0xad, 0x5d, 0x5c, 0x95, 0xdd, 0x79, 0x91, 0x37,
        0x0a, 0x74, 0x98, 0xde, 0x1c, 0x62, 0x4a, 0xb4,
        0x1a, 0xcf, 0xef, 0xf4, 0x73, 0x0d, 0xbb, 0x81,
        0xdb, 0xa3, 0xcd, 0x9b, 0x8e, 0x37, 0xa7, 0xbd,
        0x55, 0xc1, 0x04, 0xd9, 0xee, 0x26, 0xca, 0xe8,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs66_ProduceCorrectResult) {

    const u8 s[] = {
        0x51, 0x23, 0xad, 0x39, 0x1c, 0xaf, 0x36, 0x65,
        0x17, 0x14, 0x82, 0x17, 0x3a, 0x05, 0x76, 0x32,
        0xb6, 0xe8, 0x80, 0xf0, 0xac, 0xd9, 0x88, 0xc3,
        0x54, 0xf1, 0xa3, 0x87, 0x8a, 0xf3, 0xa0, 0x02,
        0x94, 0x14, 0xd1, 0x81, 0x2c, 0xa5, 0x5b, 0x9f,
        0x55, 0xfc, 0x55, 0xce, 0x3b, 0x2b, 0x35, 0x5c,
        0x05, 0x35, 0x6e, 0x39, 0x6d, 0xdc, 0xd3, 0x3a,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x3d, 0xe2, 0x7f, 0x55, 0xbf, 0x02, 0x98, 0x1a,
        0xf6, 0x9b, 0x38, 0x1f, 0x5d, 0xd4, 0x75, 0x15,
        0x58, 0x23, 0xea, 0x92, 0x24, 0x54, 0x9c, 0x49,
        0xee, 0x32, 0xad, 0xf5, 0xa9, 0x98, 0x3b, 0xb7,
        0x1b, 0xe5, 0xb7, 0x98, 0x19, 0x07, 0xe4, 0x24,
        0x3e, 0x0b, 0x77, 0xf2, 0x7c, 0x7a, 0xd2, 0xf8,
        0xd1, 0xf3, 0x2c, 0x4a, 0x40, 0xd3, 0xaa, 0x97,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs67_ProduceCorrectResult) {

    const u8 s[] = {
        0x93, 0x65, 0x68, 0xef, 0x7e, 0xe1, 0xb6, 0x27,
        0x7d, 0x2f, 0x09, 0x0c, 0x1b, 0x2c, 0xbf, 0x31,
        0xf5, 0x98, 0xdb, 0xc2, 0x74, 0xf7, 0xe4, 0xd1,
        0x3f, 0xd6, 0x24, 0x6e, 0x42, 0xa6, 0xcb, 0x93,
        0xb2, 0xb9, 0x7c, 0x2c, 0x84, 0x52, 0x39, 0xeb,
        0xfc, 0x60, 0xf5, 0xe7, 0x04, 0x6a, 0x6a, 0x8a,
        0x67, 0xd1, 0x0d, 0x53, 0x22, 0xdf, 0x05, 0x14,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xe6, 0xc0, 0x5e, 0x2c, 0x0e, 0xdc, 0xe1, 0x19,
        0x3b, 0x7d, 0xf8, 0x77, 0x61, 0x9a, 0xdc, 0xfa,
        0x6f, 0x6a, 0x3c, 0x7b, 0x84, 0xaf, 0x3b, 0x53,
        0xab, 0x84, 0xbe, 0x57, 0x75, 0x7f, 0xb6, 0x71,
        0x83, 0xd4, 0x1d, 0x04, 0x0a, 0x0c, 0xc3, 0xfe,
        0xff, 0xc2, 0x9c, 0x16, 0x6c, 0x92, 0x99, 0x27,
        0x1a, 0x1f, 0x4b, 0x09, 0xba, 0x8b, 0x33, 0x13,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs68_ProduceCorrectResult) {

    const u8 s[] = {
        0x63, 0xa3, 0xc0, 0x32, 0xc6, 0x14, 0x92, 0xf4,
        0xa5, 0x23, 0x74, 0x31, 0xb0, 0xb4, 0x20, 0x71,
        0x77, 0xa7, 0x6b, 0xb9, 0x60, 0x02, 0xc4, 0xaa,
        0x88, 0x54, 0xe4, 0x8b, 0x04, 0x82, 0xe0, 0xfd,
        0x62, 0x47, 0xf1, 0x55, 0x34, 0x04, 0x54, 0xde,
        0xfa, 0xfa, 0x3f, 0xd9, 0x83, 0x68, 0xdb, 0x29,
        0x5c, 0x86, 0x52, 0xed, 0xed, 0x08, 0x48, 0x39,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xbd, 0x89, 0x97, 0x71, 0x0b, 0xf4, 0x49, 0xac,
        0xb3, 0x99, 0x84, 0x95, 0x5c, 0xa0, 0xc8, 0x2f,
        0x05, 0x1f, 0x7b, 0x3d, 0xab, 0x4d, 0x22, 0x53,
        0xca, 0x15, 0x34, 0xb3, 0xbc, 0x70, 0xd3, 0xae,
        0x4b, 0x18, 0xb5, 0xb7, 0xd1, 0x9e, 0x6a, 0xa8,
        0x68, 0x63, 0xb6, 0xc7, 0xfe, 0x82, 0x9e, 0x7c,
        0xc7, 0x6e, 0x73, 0xfb, 0x25, 0xad, 0xbf, 0x43,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs69_ProduceCorrectResult) {

    const u8 s[] = {
        0x7e, 0xe8, 0xf3, 0x82, 0x5e, 0x77, 0xf2, 0x98,
        0x1a, 0x5e, 0x04, 0xc4, 0xdb, 0xab, 0x61, 0x02,
        0x04, 0x78, 0x9b, 0x39, 0x29, 0x15, 0x67, 0x06,
        0x0a, 0x07, 0xea, 0xfb, 0xf0, 0xde, 0xe6, 0x61,
        0x2e, 0x3b, 0xee, 0xc2, 0x1f, 0xa2, 0xd6, 0x1f,
        0xe0, 0x78, 0x47, 0x69, 0x41, 0x4c, 0x20, 0xdd,
        0xb7, 0xc6, 0xe9, 0xa3, 0x24, 0x02, 0xb2, 0x08,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x89, 0x3b, 0x25, 0x81, 0xd0, 0x0b, 0x92, 0x70,
        0x6b, 0x89, 0x17, 0x5e, 0x21, 0xde, 0x38, 0x87,
        0x89, 0x07, 0xa4, 0xf7, 0xa5, 0xd9, 0x83, 0x96,
        0x4c, 0x82, 0xc1, 0x5e, 0x10, 0x32, 0xdf, 0xfe,
        0x72, 0x4c, 0x90, 0xb6, 0xff, 0xde, 0xee, 0x0e,
        0x30, 0x2d, 0x01, 0x8d, 0xda, 0x69, 0x7f, 0xf2,
        0x10, 0x5c, 0x8e, 0x47, 0xd3, 0xb0, 0x4c, 0xf0,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs70_ProduceCorrectResult) {

    const u8 s[] = {
        0xed, 0x79, 0x16, 0xa4, 0xa2, 0x07, 0x63, 0x79,
        0xf5, 0x09, 0xc8, 0x08, 0xda, 0x83, 0x48, 0x99,
        0x3e, 0x3e, 0x6c, 0xe1, 0xc7, 0xdb, 0xcb, 0x30,
        0xeb, 0x3b, 0xb7, 0x12, 0xd1, 0x40, 0x70, 0xf8,
        0xa9, 0x4c, 0xc4, 0xc2, 0x15, 0x88, 0xaa, 0x5f,
        0x1f, 0xe4, 0x02, 0x3e, 0x6a, 0x7a, 0xb9, 0xe0,
        0x6b, 0x1c, 0x77, 0xc5, 0x58, 0xe8, 0xaf, 0x3e,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x3b, 0x24, 0x3d, 0xc4, 0xa2, 0x07, 0xbe, 0x89,
        0x2a, 0x8c, 0x01, 0x82, 0xb2, 0xfb, 0x61, 0xca,
        0x67, 0x3e, 0x3d, 0xa8, 0x4f, 0x23, 0x37, 0x9c,
        0x3a, 0x3d, 0x10, 0xbf, 0xcc, 0x3a, 0x77, 0x0c,
        0x27, 0x00, 0x01, 0x68, 0xc2, 0xd3, 0x56, 0x6a,
        0xbc, 0xfd, 0x62, 0xd7, 0x2a, 0x7f, 0x52, 0x59,
        0x28, 0x11, 0xd4, 0x8b, 0xc8, 0xff, 0xe8, 0x0a,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs71_ProduceCorrectResult) {

    const u8 s[] = {
        0xae, 0x1d, 0xa5, 0x8a, 0x56, 0xf9, 0xed, 0x4d,
        0xc9, 0x68, 0x91, 0xa5, 0x6e, 0xd1, 0x62, 0x61,
        0x91, 0x96, 0x0e, 0x6d, 0xb4, 0x0e, 0x41, 0xa3,
        0x6d, 0x3f, 0xee, 0x64, 0x33, 0xfa, 0x6e, 0x52,
        0x68, 0x80, 0x17, 0x39, 0xa6, 0xed, 0xbc, 0xbc,
        0xce, 0x25, 0xdb, 0x02, 0xf3, 0xc3, 0xf3, 0x8c,
        0x91, 0x2c, 0xd5, 0xb3, 0x44, 0xc6, 0xdb, 0x1e,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xf4, 0x2f, 0xe9, 0xd0, 0x6b, 0xf2, 0xff, 0xb4,
        0x62, 0x02, 0x1d, 0x51, 0x12, 0x20, 0x5e, 0x14,
        0xa9, 0x6a, 0xc0, 0xdd, 0xd6, 0xc7, 0xdd, 0x43,
        0xee, 0xb2, 0xde, 0x67, 0x69, 0xf8, 0x12, 0x0d,
        0x4b, 0x4b, 0x8b, 0x37, 0xd8, 0x7c, 0x3f, 0x96,
        0x6c, 0x74, 0xc1, 0xb3, 0x46, 0x93, 0x20, 0xf0,
        0xba, 0x43, 0x4d, 0x3c, 0x5c, 0x00, 0x60, 0x0b,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs72_ProduceCorrectResult) {

    const u8 s[] = {
        0x4a, 0xe8, 0x1e, 0x71, 0x3f, 0x5b, 0xc8, 0xa8,
        0x1f, 0x09, 0x37, 0xe6, 0x0f, 0x6c, 0xaa, 0xf7,
        0x38, 0x51, 0xf0, 0x40, 0x37, 0x0e, 0xd6, 0x64,
        0xb6, 0x38, 0xed, 0x6f, 0x17, 0x0e, 0xb8, 0xc3,
        0xaa, 0xd2, 0x4f, 0xd3, 0xcb, 0xd8, 0x83, 0x39,
        0x71, 0x24, 0xa5, 0xd0, 0x87, 0xdc, 0x2f, 0x38,
        0xfb, 0xa7, 0xae, 0x86, 0xdb, 0x43, 0xfd, 0x03,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xb1, 0xaf, 0xf0, 0x73, 0x8b, 0xe4, 0xd1, 0x0e,
        0x5c, 0x72, 0x21, 0x59, 0x84, 0x76, 0xbf, 0x47,
        0x31, 0x1e, 0x99, 0xb5, 0xe8, 0x3e, 0x62, 0xdb,
        0xcf, 0x9e, 0x8f, 0x71, 0x2a, 0xba, 0x67, 0x61,
        0x1a, 0xce, 0xdc, 0x85, 0x86, 0x49, 0xe3, 0x96,
        0x62, 0xc3, 0x11, 0x22, 0x7c, 0xbd, 0x9d, 0x07,
        0x8d, 0x67, 0xf0, 0xb1, 0xe3, 0x08, 0xe4, 0xbe,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs73_ProduceCorrectResult) {

    const u8 s[] = {
        0x2a, 0xd6, 0xd8, 0xe3, 0x54, 0xc0, 0x4b, 0xc6,
        0xd7, 0x65, 0xfa, 0xcb, 0xcf, 0x48, 0xc3, 0x5a,
        0xff, 0x42, 0xe2, 0x3d, 0xc6, 0x64, 0x43, 0x66,
        0x25, 0xf2, 0x2e, 0x52, 0x9b, 0x8d, 0x13, 0x82,
        0xfb, 0xc4, 0xc3, 0x94, 0xe1, 0x0e, 0xfc, 0xf7,
        0x90, 0xc0, 0xaf, 0x96, 0xba, 0x4f, 0x0c, 0xb1,
        0x18, 0x68, 0xc6, 0x33, 0xa9, 0xfe, 0x3d, 0x1a,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xe6, 0xf5, 0xb2, 0x7f, 0x67, 0xf3, 0x85, 0xed,
        0xce, 0xca, 0x51, 0x40, 0xf2, 0x84, 0x88, 0x25,
        0x34, 0x3f, 0xae, 0x63, 0xd8, 0x80, 0xef, 0x76,
        0x19, 0x89, 0x77, 0x96, 0x6a, 0xd2, 0xfd, 0x5f,
        0x32, 0x89, 0x8e, 0xa2, 0xc7, 0x24, 0x34, 0x09,
        0x62, 0xb9, 0xdb, 0xc4, 0xa0, 0x23, 0x6f, 0x84,
        0x92, 0x9a, 0xa5, 0xb1, 0x5e, 0x62, 0x7c, 0xd5,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs74_ProduceCorrectResult) {

    const u8 s[] = {
        0xf7, 0x71, 0xda, 0xac, 0x72, 0xf9, 0xe2, 0xa2,
        0xc3, 0x8d, 0xab, 0xba, 0x92, 0xdc, 0x56, 0xb7,
        0x0a, 0x23, 0x15, 0x76, 0xf8, 0x84, 0x18, 0x27,
        0x60, 0x67, 0x3f, 0xce, 0x02, 0x7c, 0xec, 0xd9,
        0x15, 0x05, 0x91, 0x5e, 0x46, 0x52, 0x29, 0x1b,
        0x79, 0x1f, 0xdb, 0x95, 0xf0, 0x07, 0xda, 0xb6,
        0x9d, 0x34, 0x10, 0xb4, 0x2f, 0xff, 0xf7, 0x0b,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xc1, 0x6c, 0x41, 0x27, 0x14, 0xc7, 0x29, 0xcb,
        0x90, 0x36, 0x0d, 0xfb, 0x1d, 0x1f, 0xf9, 0xae,
        0x6f, 0x56, 0x91, 0x53, 0xe5, 0x8c, 0x6c, 0x4e,
        0x61, 0x4d, 0x7e, 0x77, 0x09, 0xdb, 0x01, 0x49,
        0x16, 0x11, 0x74, 0x09, 0x78, 0x03, 0x21, 0xc8,
        0x0c, 0xb3, 0x1c, 0xb1, 0xc1, 0x74, 0x5b, 0x1a,
        0x34, 0x3c, 0xbf, 0x37, 0x91, 0x76, 0x35, 0x41,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs75_ProduceCorrectResult) {

    const u8 s[] = {
        0xd2, 0xb8, 0x0e, 0x88, 0x42, 0xdb, 0x74, 0x4f,
        0xc1, 0x0a, 0x38, 0xe1, 0xd2, 0x22, 0x6a, 0x59,
        0xde, 0x0f, 0x0e, 0xdc, 0xb7, 0x3f, 0x85, 0x21,
        0xed, 0xbb, 0xcc, 0x67, 0xe1, 0x5c, 0x46, 0xa6,
        0x19, 0xf6, 0x06, 0x0c, 0x99, 0x86, 0xc5, 0x99,
        0x71, 0xea, 0x51, 0xe8, 0x1e, 0x9a, 0xd4, 0x53,
        0x6f, 0x2e, 0x01, 0x5a, 0xe6, 0x30, 0x03, 0x27,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x81, 0x17, 0xcc, 0xfe, 0x13, 0x9b, 0x62, 0x36,
        0x81, 0x6f, 0x52, 0x1a, 0xd4, 0xb6, 0x49, 0x65,
        0xee, 0x0d, 0xd9, 0xba, 0x29, 0xf8, 0x41, 0x6b,
        0xa0, 0xba, 0xf9, 0x46, 0x5d, 0x5f, 0xef, 0x9b,
        0x08, 0x24, 0x29, 0x75, 0xe3, 0x06, 0x32, 0x61,
        0xe0, 0x91, 0x10, 0x83, 0xdc, 0x1e, 0x2e, 0x72,
        0xe3, 0x69, 0x5f, 0x21, 0x49, 0x38, 0x58, 0x15,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs76_ProduceCorrectResult) {

    const u8 s[] = {
        0xe4, 0x81, 0x24, 0x95, 0x29, 0x6a, 0xab, 0xae,
        0xe0, 0x60, 0x04, 0x88, 0x59, 0xea, 0xef, 0x8f,
        0x41, 0xe2, 0x21, 0x70, 0x3a, 0xc0, 0x2a, 0x03,
        0x59, 0x26, 0x3b, 0xc5, 0x16, 0x38, 0xbf, 0xdb,
        0x6b, 0x9b, 0x5f, 0x70, 0x9b, 0xec, 0xd6, 0x8a,
        0x58, 0x3e, 0xfe, 0xc8, 0xd6, 0xa1, 0x29, 0xc8,
        0xc6, 0xd7, 0xd7, 0x5e, 0x09, 0x0e, 0x39, 0x3b,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x04, 0x6d, 0xac, 0x99, 0xee, 0xe0, 0xb7, 0xfa,
        0x6d, 0xcd, 0xa0, 0xaa, 0xd6, 0x4d, 0x33, 0xb9,
        0xbc, 0xec, 0x83, 0x34, 0xff, 0x23, 0x87, 0xc1,
        0xaf, 0x7e, 0x14, 0x75, 0x4c, 0xea, 0x65, 0x41,
        0xa2, 0x1d, 0x9e, 0x8d, 0xae, 0x54, 0x69, 0xfd,
        0x35, 0xf8, 0xdb, 0x91, 0x02, 0xc9, 0x57, 0x31,
        0xcf, 0x9f, 0xc3, 0xd7, 0xc2, 0x72, 0xc7, 0x44,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs77_ProduceCorrectResult) {

    const u8 s[] = {
        0x1b, 0xf1, 0xce, 0xbd, 0xbb, 0x6a, 0xd2, 0x6f,
        0x1e, 0x93, 0xc1, 0x95, 0xa8, 0x38, 0x27, 0x4a,
        0x81, 0xdc, 0xa0, 0xa7, 0x96, 0x62, 0xf2, 0x3d,
        0xdb, 0x28, 0xa0, 0x2e, 0xb1, 0x88, 0xc9, 0x63,
        0x6a, 0x5b, 0x8b, 0x2a, 0x18, 0x13, 0x1c, 0xc4,
        0x09, 0xa6, 0xb1, 0xc6, 0x2d, 0x7a, 0x11, 0x09,
        0xc1, 0x73, 0x63, 0x84, 0x92, 0xce, 0x2b, 0x35,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xc8, 0xf7, 0x5e, 0x74, 0x71, 0x1f, 0xdd, 0x46,
        0x52, 0xc0, 0x87, 0xed, 0xa8, 0xb7, 0x46, 0x72,
        0xf1, 0xe2, 0x1f, 0x7c, 0xd5, 0xbc, 0x6f, 0xd3,
        0x47, 0x56, 0xb3, 0x19, 0xcf, 0xd9, 0xca, 0xbf,
        0x88, 0x7f, 0x90, 0xab, 0xdb, 0xd2, 0xc1, 0x3a,
        0x15, 0x75, 0x3e, 0x56, 0x30, 0xd0, 0x6a, 0x0d,
        0x62, 0x68, 0x63, 0x76, 0x3a, 0x2b, 0x0f, 0xc3,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs78_ProduceCorrectResult) {

    const u8 s[] = {
        0x64, 0xca, 0x92, 0xc1, 0xa1, 0xe9, 0x00, 0xa0,
        0x21, 0xe5, 0x3c, 0xd3, 0xd5, 0x73, 0xee, 0xac,
        0x76, 0x07, 0x16, 0xbe, 0x78, 0x60, 0x93, 0x38,
        0x76, 0xce, 0x28, 0xb6, 0x8a, 0x3c, 0xd2, 0xd8,
        0x53, 0x4a, 0x88, 0x74, 0xf5, 0x66, 0x32, 0x07,
        0x1e, 0x5d, 0x43, 0xae, 0x8d, 0x03, 0xf2, 0x51,
        0xe7, 0x51, 0x0a, 0x46, 0xec, 0x41, 0x93, 0x0b,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x17, 0x20, 0x02, 0x87, 0xc2, 0x2a, 0x7e, 0xda,
        0x2f, 0x9e, 0x70, 0x5f, 0xd2, 0xf5, 0x19, 0xd1,
        0x0c, 0x5b, 0xfa, 0xfa, 0xa7, 0xe9, 0xcc, 0xd3,
        0xf9, 0xf1, 0x93, 0x41, 0x93, 0xa2, 0xf4, 0x8d,
        0x65, 0xc3, 0x2f, 0x47, 0x2d, 0x74, 0x34, 0xaf,
        0x66, 0x36, 0xe0, 0xc4, 0x9f, 0xc1, 0x44, 0x66,
        0x3c, 0x22, 0xae, 0x86, 0x42, 0x0d, 0xf0, 0x94,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs79_ProduceCorrectResult) {

    const u8 s[] = {
        0x69, 0xe5, 0x38, 0x60, 0x8f, 0x27, 0x30, 0xfc,
        0x5a, 0xa5, 0x06, 0x63, 0x29, 0x63, 0x62, 0x74,
        0x2c, 0x21, 0x44, 0xd6, 0x34, 0x1b, 0x27, 0x17,
        0xd4, 0x7c, 0xee, 0x0e, 0xf3, 0xc6, 0x01, 0xe6,
        0xe9, 0xe5, 0xcd, 0x67, 0x0d, 0x92, 0xdc, 0x06,
        0xd0, 0x9d, 0xad, 0x1c, 0xe3, 0x1b, 0xd5, 0xfc,
        0x0c, 0x10, 0x67, 0x20, 0x18, 0xa6, 0x61, 0x1b,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xea, 0xdf, 0x31, 0xbd, 0x90, 0x3f, 0x44, 0x26,
        0xaa, 0x69, 0x5a, 0x04, 0x11, 0x65, 0x18, 0x13,
        0xe4, 0xa1, 0x1b, 0x9b, 0xec, 0xda, 0xb8, 0x52,
        0x6c, 0xff, 0xa7, 0x8d, 0x4a, 0xcc, 0x3a, 0x15,
        0xef, 0x23, 0x5b, 0x4b, 0x82, 0x42, 0x68, 0x77,
        0x11, 0xa0, 0x23, 0xe7, 0x20, 0x95, 0x00, 0x36,
        0x7b, 0x81, 0xc5, 0x39, 0x32, 0x59, 0xd2, 0x1f,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs80_ProduceCorrectResult) {

    const u8 s[] = {
        0x10, 0x09, 0xf5, 0x83, 0xd5, 0x9b, 0xea, 0xc7,
        0xb3, 0x22, 0xdf, 0x14, 0x75, 0x5c, 0xfb, 0xb6,
        0x48, 0xeb, 0xef, 0x67, 0xad, 0x31, 0x17, 0xfe,
        0xa6, 0x08, 0x49, 0x51, 0x45, 0x70, 0xac, 0xce,
        0x3b, 0x8c, 0x35, 0x44, 0xf4, 0xbd, 0x2e, 0xd8,
        0x13, 0xb7, 0x7e, 0x2b, 0x52, 0xd1, 0x11, 0x17,
        0x1f, 0x0d, 0xf2, 0x4a, 0xaa, 0x28, 0xde, 0x3e,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xa2, 0x30, 0xfb, 0x63, 0x92, 0x62, 0x08, 0xe4,
        0xc2, 0xb7, 0xb1, 0x83, 0x3b, 0xf1, 0x18, 0x33,
        0x08, 0xc6, 0xae, 0x6c, 0x26, 0x6a, 0x69, 0xe5,
        0x01, 0x3f, 0x1d, 0x0b, 0xe4, 0xfa, 0xcb, 0x19,
        0x7c, 0xe7, 0xc8, 0x7c, 0xba, 0xd4, 0xed, 0xba,
        0xf2, 0xfc, 0x94, 0x78, 0x82, 0x4a, 0x13, 0x05,
        0xfc, 0xb6, 0xea, 0x47, 0xfd, 0xee, 0x34, 0x45,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs81_ProduceCorrectResult) {

    const u8 s[] = {
        0xdd, 0xe2, 0xb4, 0x20, 0x10, 0xf5, 0xfe, 0xa4,
        0xf5, 0x1e, 0x37, 0x54, 0xec, 0x94, 0xb9, 0x12,
        0xa8, 0x7a, 0xfd, 0x58, 0x92, 0x22, 0xf4, 0x80,
        0x5c, 0x3d, 0xd0, 0x02, 0xf6, 0xb8, 0x1c, 0x35,
        0x91, 0xfc, 0x41, 0xa7, 0x93, 0xdc, 0x7b, 0x37,
        0x03, 0x62, 0x5b, 0xac, 0xa5, 0x45, 0x7c, 0x55,
        0xc1, 0xcb, 0xf5, 0x93, 0xfa, 0x97, 0x1c, 0x1f,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x51, 0xc1, 0x1d, 0xed, 0x30, 0x13, 0x57, 0xe1,
        0xf5, 0xba, 0x62, 0x18, 0xb4, 0xfd, 0xaf, 0x71,
        0x94, 0x88, 0x1f, 0xb0, 0x3a, 0x36, 0xdb, 0x75,
        0x2e, 0x61, 0xf3, 0xd6, 0x3a, 0xea, 0xe4, 0xf1,
        0x4f, 0xd3, 0x8e, 0x2e, 0x8e, 0x12, 0x7c, 0xd5,
        0x28, 0xeb, 0x43, 0x65, 0xf2, 0xc1, 0x9c, 0x60,
        0xdc, 0xea, 0x24, 0x5b, 0xa9, 0x32, 0x22, 0x52,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs82_ProduceCorrectResult) {

    const u8 s[] = {
        0xfa, 0x54, 0x0a, 0xe9, 0xe0, 0x07, 0x7c, 0x0b,
        0x2b, 0xd0, 0xbd, 0x11, 0xf1, 0x6b, 0xa1, 0xed,
        0x44, 0x40, 0xae, 0xd0, 0xbf, 0xa9, 0x0e, 0x11,
        0xd5, 0xb5, 0xc1, 0x31, 0xa8, 0xd5, 0xea, 0x32,
        0x75, 0x0b, 0x5a, 0x14, 0x0c, 0x59, 0x61, 0xc5,
        0x80, 0x8e, 0x6f, 0x12, 0x6f, 0x7e, 0xb9, 0x41,
        0x22, 0x8f, 0xc7, 0x29, 0x4f, 0x07, 0x14, 0x12,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x13, 0x96, 0x11, 0xc0, 0xc0, 0xab, 0xa6, 0x06,
        0x60, 0xe2, 0xa3, 0x6e, 0x55, 0xc6, 0xb7, 0x38,
        0x34, 0x53, 0x1b, 0x44, 0x69, 0x93, 0x0c, 0x7b,
        0x0a, 0x2b, 0xf5, 0x65, 0x19, 0xed, 0xd5, 0x59,
        0x5d, 0xdf, 0xe9, 0xbf, 0x8b, 0x6c, 0x0c, 0x16,
        0x6b, 0x11, 0xcb, 0x73, 0x2f, 0x5d, 0xfd, 0x3b,
        0xd7, 0xed, 0xe2, 0xe9, 0x09, 0x89, 0xae, 0xed,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs83_ProduceCorrectResult) {

    const u8 s[] = {
        0xa3, 0xad, 0x2c, 0x12, 0xb0, 0x7d, 0xae, 0xf2,
        0xcd, 0x0d, 0xc6, 0xea, 0xc5, 0x94, 0xab, 0x5f,
        0xa4, 0xa6, 0x1a, 0xa9, 0x6f, 0x98, 0x8d, 0x0e,
        0x3e, 0xae, 0x3c, 0x8e, 0xe1, 0x78, 0x0b, 0xf6,
        0xc1, 0x85, 0x34, 0x65, 0x3d, 0x32, 0x05, 0xa1,
        0x49, 0x6b, 0xb1, 0xb6, 0x0c, 0xae, 0xd6, 0x2a,
        0x43, 0xf3, 0xf3, 0x54, 0x30, 0x17, 0x46, 0x3a,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x3a, 0x99, 0xd7, 0x99, 0xb1, 0x6f, 0x34, 0x26,
        0xa2, 0x88, 0x9e, 0x32, 0xc7, 0xa5, 0x62, 0x4e,
        0xa6, 0xc4, 0xbb, 0x1e, 0x5f, 0x61, 0x51, 0xc5,
        0xec, 0x36, 0xd7, 0x6d, 0xd1, 0x00, 0xcc, 0xfb,
        0xfd, 0xa9, 0x35, 0x55, 0xfc, 0x8c, 0x7e, 0x6e,
        0xd8, 0xdd, 0xdb, 0x14, 0xcd, 0x00, 0x13, 0xa1,
        0x98, 0xc4, 0x22, 0x39, 0x5d, 0x43, 0xb6, 0xd9,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs84_ProduceCorrectResult) {

    const u8 s[] = {
        0x03, 0x4b, 0x94, 0x2b, 0xf7, 0xb1, 0x6d, 0x33,
        0x0c, 0x04, 0xa0, 0xe0, 0x69, 0x44, 0xd3, 0x1f,
        0x7b, 0x1d, 0x67, 0x41, 0xdf, 0x74, 0xdc, 0x71,
        0x7a, 0xd8, 0x08, 0x36, 0xaf, 0xe3, 0x7b, 0x28,
        0xb1, 0xf5, 0x34, 0x73, 0xeb, 0x49, 0x67, 0x11,
        0x5b, 0x01, 0x61, 0x5b, 0xa3, 0x85, 0xf8, 0xda,
        0x28, 0xe8, 0xbd, 0xbf, 0x10, 0xf7, 0xf9, 0x39,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xcf, 0x69, 0x64, 0x3c, 0x61, 0x36, 0x7a, 0x07,
        0xa7, 0x82, 0x23, 0x3c, 0x50, 0x57, 0x07, 0x9f,
        0x65, 0xd5, 0x39, 0x97, 0x50, 0x5b, 0x78, 0xe5,
        0xde, 0x60, 0x25, 0x4f, 0x4f, 0x15, 0x52, 0x5b,
        0x03, 0x30, 0xfe, 0xe8, 0x23, 0x86, 0xc3, 0x85,
        0x5b, 0x5a, 0x1c, 0xed, 0x40, 0xa2, 0x24, 0xac,
        0x7f, 0x51, 0x19, 0x88, 0x2d, 0xb9, 0x22, 0x0e,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs85_ProduceCorrectResult) {

    const u8 s[] = {
        0x41, 0x02, 0x2f, 0x17, 0xaa, 0x83, 0x7e, 0xcc,
        0x1c, 0xfb, 0x57, 0xcd, 0xd3, 0xb4, 0xd7, 0x4d,
        0xed, 0xfe, 0x14, 0xe1, 0x21, 0x18, 0x6c, 0x87,
        0x4b, 0x1e, 0xe5, 0x06, 0x19, 0x4f, 0x0c, 0x4e,
        0x7c, 0xf7, 0x1a, 0x0d, 0x9e, 0x80, 0x77, 0x9a,
        0xad, 0xee, 0xdd, 0x4a, 0xbd, 0x82, 0x71, 0x71,
        0x3c, 0x26, 0xfb, 0x22, 0x94, 0x99, 0x17, 0x2d,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x57, 0x95, 0x33, 0x1a, 0x25, 0xfe, 0x3b, 0x53,
        0xdb, 0x7f, 0xc1, 0xd8, 0x01, 0xcf, 0x80, 0x88,
        0x4d, 0x3c, 0x22, 0x90, 0xe7, 0x4f, 0x6c, 0x87,
        0x5b, 0x70, 0xb4, 0xdc, 0xd6, 0xaf, 0xa6, 0x04,
        0x6f, 0xc0, 0xbb, 0x19, 0xf9, 0xa4, 0xb1, 0xea,
        0x94, 0x3f, 0x80, 0xe8, 0xba, 0x6b, 0xd3, 0x98,
        0x11, 0x85, 0xb7, 0xc5, 0x91, 0x61, 0x45, 0x0d,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs86_ProduceCorrectResult) {

    const u8 s[] = {
        0x0b, 0x7f, 0x56, 0x04, 0x00, 0xb6, 0x04, 0xb9,
        0x06, 0xdf, 0xb1, 0xe8, 0x9c, 0x78, 0x71, 0x12,
        0xd7, 0x7b, 0xe7, 0x34, 0x7a, 0x6d, 0x04, 0x12,
        0x22, 0xb7, 0xd7, 0x3b, 0xe9, 0x9e, 0xe3, 0xf2,
        0xe2, 0x36, 0xe5, 0xbd, 0x05, 0xfb, 0xe0, 0x20,
        0xc5, 0x5b, 0xc2, 0x7b, 0x77, 0x2c, 0x13, 0xdf,
        0x11, 0x6c, 0xb5, 0xf1, 0x9f, 0x9a, 0x9a, 0x2f,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x81, 0x6e, 0x40, 0x6d, 0x32, 0xfc, 0x53, 0x7b,
        0x68, 0x23, 0x23, 0x79, 0x8c, 0x1f, 0xdf, 0x1c,
        0x1f, 0xed, 0xa9, 0x1b, 0x2a, 0x69, 0xb6, 0x35,
        0x7d, 0xbb, 0xd2, 0xf2, 0x35, 0x25, 0x14, 0x99,
        0x67, 0xb9, 0xec, 0x58, 0xd3, 0xa8, 0xdd, 0x26,
        0x5f, 0x6e, 0x99, 0x78, 0x08, 0x2e, 0x47, 0x39,
        0x4e, 0x4d, 0x07, 0x02, 0x00, 0xba, 0x4e, 0x98,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs87_ProduceCorrectResult) {

    const u8 s[] = {
        0x09, 0x42, 0x64, 0xaa, 0x99, 0xd2, 0x49, 0xfc,
        0xa5, 0x2b, 0xd7, 0x57, 0x7b, 0xb3, 0x1e, 0xc7,
        0x80, 0x59, 0x5d, 0xd0, 0x23, 0x7a, 0xbe, 0x0f,
        0x49, 0x42, 0xf2, 0xeb, 0x20, 0xda, 0x6b, 0xe5,
        0x62, 0xaa, 0x5f, 0x8d, 0x07, 0x96, 0x84, 0xb3,
        0xd8, 0x5b, 0x0e, 0xbc, 0x74, 0x97, 0x99, 0x59,
        0x9d, 0xe4, 0x35, 0x5a, 0xd2, 0xae, 0xa7, 0x3e,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xad, 0x0d, 0x06, 0xf9, 0x13, 0x8c, 0x6a, 0xb4,
        0x3f, 0x82, 0x4a, 0x67, 0x63, 0x1d, 0x12, 0x59,
        0x47, 0x63, 0xe4, 0xa8, 0x9c, 0xa3, 0xce, 0xb2,
        0xe6, 0x19, 0xe1, 0x87, 0x7d, 0x57, 0x6e, 0x60,
        0x55, 0x99, 0x31, 0x99, 0x6c, 0x9d, 0x3b, 0x7a,
        0x16, 0x84, 0x6e, 0x2e, 0xba, 0x66, 0x7d, 0xde,
        0xb8, 0x23, 0x90, 0x19, 0xef, 0x62, 0x74, 0x3d,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs88_ProduceCorrectResult) {

    const u8 s[] = {
        0x96, 0xfb, 0xa2, 0x34, 0x1b, 0xec, 0xf6, 0x37,
        0xec, 0xbc, 0x8f, 0x48, 0x8e, 0x0b, 0xe1, 0xc8,
        0x5e, 0x41, 0xc6, 0xb0, 0x01, 0x49, 0x99, 0xfc,
        0x06, 0x27, 0xf2, 0x35, 0xea, 0xc6, 0xae, 0x54,
        0xd8, 0x57, 0x90, 0x69, 0x55, 0x2c, 0x42, 0x46,
        0xb8, 0x98, 0x0c, 0x19, 0x96, 0xb7, 0x28, 0x42,
        0xa8, 0x7a, 0xca, 0xf9, 0x40, 0x64, 0x29, 0x0a,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x38, 0x63, 0x61, 0xce, 0x3c, 0xe0, 0xff, 0x87,
        0xcf, 0xe2, 0xdc, 0xf3, 0x3e, 0xc2, 0x56, 0xc3,
        0xac, 0x7c, 0x18, 0x14, 0xb2, 0x5d, 0x68, 0x54,
        0xdb, 0xe0, 0xe1, 0x4f, 0xdc, 0xdf, 0x30, 0x8a,
        0xfa, 0xa5, 0x45, 0xeb, 0x65, 0x61, 0x98, 0x3c,
        0xf7, 0x86, 0x38, 0x8e, 0xfe, 0x78, 0xcb, 0x5e,
        0x25, 0x02, 0x4a, 0x9f, 0x5f, 0xe3, 0x0e, 0x42,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs89_ProduceCorrectResult) {

    const u8 s[] = {
        0xb9, 0xdb, 0x2a, 0x7b, 0x70, 0x8d, 0xaa, 0x8c,
        0x28, 0xea, 0x8e, 0x83, 0xf9, 0x95, 0x48, 0xd1,
        0x79, 0x44, 0xcb, 0xdc, 0x04, 0x03, 0xdf, 0x3f,
        0x11, 0x48, 0xfb, 0x55, 0x0b, 0x4b, 0xd5, 0x7d,
        0x7f, 0xb3, 0x0a, 0x7b, 0x62, 0x48, 0x13, 0x90,
        0x68, 0x7d, 0x59, 0xf4, 0x8f, 0xeb, 0xaa, 0xa9,
        0x74, 0x18, 0x1c, 0xbc, 0x19, 0xd2, 0x4b, 0x2e,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x2a, 0xf6, 0xd6, 0xa7, 0x96, 0xec, 0x85, 0x1b,
        0xcb, 0x8e, 0x5e, 0xc3, 0x42, 0x4f, 0x5f, 0x35,
        0xfc, 0x4c, 0x7a, 0xe4, 0x48, 0x02, 0xa6, 0xa6,
        0xe8, 0xd1, 0x2f, 0x57, 0x0b, 0xfd, 0x40, 0x60,
        0xad, 0xba, 0xc1, 0xdb, 0xf2, 0x5e, 0x8a, 0xb9,
        0x94, 0x72, 0x3f, 0xed, 0x83, 0x9e, 0x2c, 0x8a,
        0xf0, 0x18, 0xcf, 0xd2, 0x83, 0xca, 0x67, 0xc7,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs90_ProduceCorrectResult) {

    const u8 s[] = {
        0x72, 0x34, 0x7e, 0x2e, 0x2c, 0xc1, 0x97, 0x5b,
        0x8e, 0xc3, 0x69, 0xd3, 0xe9, 0x18, 0xc1, 0x6d,
        0x93, 0x32, 0xc2, 0x6e, 0x31, 0xb7, 0x67, 0x0c,
        0x8f, 0xe7, 0x75, 0x49, 0xf0, 0xec, 0xe0, 0xb5,
        0x03, 0xef, 0x48, 0x59, 0x5d, 0x6c, 0x0f, 0xb4,
        0x76, 0x80, 0x03, 0x45, 0xd1, 0xc3, 0x55, 0x19,
        0x3b, 0x8a, 0xda, 0x5a, 0x71, 0x48, 0x4d, 0x22,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x43, 0x68, 0x5b, 0xf3, 0xee, 0xcc, 0xd1, 0xe7,
        0x1e, 0x0d, 0x22, 0xba, 0xd7, 0xc6, 0x5b, 0x0a,
        0xfa, 0x86, 0xdb, 0x5e, 0x82, 0xad, 0x1e, 0xaa,
        0xfc, 0x08, 0x2c, 0xbb, 0x6b, 0x0e, 0x00, 0xed,
        0xd3, 0xa5, 0x97, 0xad, 0xfa, 0x4d, 0xfd, 0xbf,
        0x41, 0x56, 0x5a, 0xab, 0x78, 0x79, 0xb4, 0x71,
        0x62, 0x7c, 0x03, 0x8b, 0xa9, 0xa4, 0xeb, 0xa8,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs91_ProduceCorrectResult) {

    const u8 s[] = {
        0x3c, 0x9c, 0xeb, 0xa9, 0x4c, 0x83, 0x47, 0x2b,
        0x49, 0xc1, 0xf7, 0x7b, 0x1d, 0x2d, 0x8c, 0x8a,
        0x5f, 0x43, 0x58, 0x17, 0xe0, 0x28, 0x19, 0xaa,
        0x90, 0x4c, 0x09, 0x48, 0x42, 0x9e, 0xae, 0xeb,
        0x0f, 0x6e, 0x73, 0x5b, 0xe6, 0x11, 0x32, 0xdd,
        0x8c, 0xdb, 0xb2, 0xc1, 0x63, 0x9f, 0x3f, 0xd1,
        0x00, 0xb1, 0x5e, 0x1f, 0x58, 0xd5, 0xc2, 0x1a,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xee, 0x35, 0x5a, 0x5e, 0x4d, 0x99, 0x1c, 0x49,
        0x40, 0x5a, 0xb2, 0x0a, 0x7b, 0xa5, 0x5c, 0x9b,
        0xd6, 0xed, 0x37, 0x36, 0x70, 0xcd, 0x1f, 0x20,
        0x41, 0x6b, 0x70, 0x76, 0x69, 0xda, 0x60, 0xbf,
        0x65, 0xce, 0x75, 0xd9, 0xf9, 0x23, 0x93, 0x85,
        0x1d, 0xe5, 0xce, 0x68, 0x5c, 0x3f, 0x49, 0x94,
        0xce, 0xe9, 0x8c, 0x0c, 0x3a, 0x33, 0xf9, 0xcc,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs92_ProduceCorrectResult) {

    const u8 s[] = {
        0xa5, 0x0c, 0xf8, 0xb8, 0x62, 0x3b, 0x96, 0x86,
        0x37, 0x72, 0x74, 0xae, 0x67, 0x28, 0x9e, 0x8d,
        0x99, 0x42, 0xb1, 0x94, 0x48, 0xe5, 0x46, 0xf8,
        0x5b, 0xee, 0x7d, 0x12, 0x67, 0x04, 0x40, 0x80,
        0x39, 0x34, 0x4e, 0x12, 0x54, 0xe9, 0x30, 0xeb,
        0xa8, 0x1a, 0x42, 0xc8, 0x48, 0x50, 0x4b, 0x51,
        0xfe, 0xd4, 0x25, 0xb6, 0x6d, 0x25, 0x60, 0x15,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xa6, 0x79, 0xca, 0x85, 0xcb, 0xe3, 0x97, 0xb8,
        0x0a, 0x36, 0x93, 0x7e, 0xc4, 0x2b, 0x86, 0x03,
        0x29, 0xf3, 0xcd, 0x08, 0xff, 0x04, 0x14, 0xc4,
        0xb7, 0x38, 0xba, 0xb8, 0x8e, 0xc0, 0x5f, 0x35,
        0x56, 0x74, 0xda, 0xc5, 0x9e, 0xf6, 0x33, 0x74,
        0x66, 0x1b, 0x28, 0xdc, 0xb5, 0x32, 0xb1, 0x56,
        0xa1, 0x58, 0xab, 0x72, 0xfb, 0xb5, 0xa8, 0x99,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs93_ProduceCorrectResult) {

    const u8 s[] = {
        0x9f, 0x3b, 0x8e, 0x11, 0x64, 0xdb, 0xaf, 0xa6,
        0x7d, 0xfd, 0x54, 0xee, 0xe9, 0xd1, 0xe9, 0xcf,
        0xbb, 0x87, 0xee, 0x66, 0x03, 0x51, 0x07, 0x86,
        0x17, 0xbc, 0xdf, 0x4e, 0xfe, 0x2b, 0xa1, 0xc3,
        0x61, 0xbd, 0x8d, 0x7c, 0x02, 0x8a, 0x57, 0x93,
        0xb5, 0xb9, 0x01, 0x45, 0xd5, 0x7b, 0x51, 0x2c,
        0x8b, 0x81, 0x7e, 0x6f, 0xf3, 0x9f, 0xf4, 0x20,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x86, 0x22, 0xde, 0x58, 0x53, 0x5a, 0xd9, 0xbc,
        0x57, 0x45, 0x5a, 0x63, 0x66, 0x7a, 0x22, 0x14,
        0x33, 0x5e, 0xb4, 0x85, 0x4b, 0x03, 0x71, 0xcf,
        0x72, 0x53, 0xc3, 0xe7, 0xf3, 0x04, 0x44, 0x7d,
        0x51, 0x2e, 0xca, 0x16, 0x99, 0x73, 0x27, 0x16,
        0x33, 0x39, 0x9c, 0x1c, 0x73, 0x87, 0x42, 0xb0,
        0x71, 0xb4, 0x25, 0xc4, 0x17, 0x7a, 0xe0, 0x21,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs94_ProduceCorrectResult) {

    const u8 s[] = {
        0xe6, 0xa1, 0xed, 0x5a, 0xc0, 0x99, 0xf6, 0xda,
        0xbc, 0x39, 0xdc, 0xe3, 0xeb, 0xc0, 0xbd, 0xaa,
        0x00, 0x5d, 0x39, 0x1f, 0x7e, 0xc6, 0x4c, 0x8b,
        0x29, 0x9b, 0x4f, 0x62, 0x5d, 0xd7, 0xca, 0x43,
        0xbe, 0xab, 0x46, 0x1a, 0xc1, 0x3e, 0xa0, 0x36,
        0xa9, 0x4e, 0xca, 0xfb, 0xe9, 0xc7, 0x1a, 0x31,
        0xb9, 0xe4, 0x40, 0x67, 0xb1, 0x2f, 0x72, 0x1c,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x2a, 0x38, 0x54, 0x14, 0xa6, 0x8e, 0x11, 0x7b,
        0x30, 0x1e, 0x7d, 0xf6, 0x22, 0x16, 0x3e, 0x54,
        0xed, 0x36, 0xd5, 0xee, 0x4f, 0x23, 0x8f, 0x8c,
        0xc3, 0xb2, 0x16, 0x75, 0xad, 0x05, 0x56, 0x68,
        0x0d, 0xaf, 0xd9, 0x78, 0xf7, 0x89, 0xe3, 0x10,
        0xdc, 0x80, 0xeb, 0x80, 0x70, 0xe6, 0xb0, 0x9f,
        0x3e, 0x10, 0x05, 0xc3, 0xd7, 0xc6, 0x3b, 0xf7,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs95_ProduceCorrectResult) {

    const u8 s[] = {
        0x53, 0x6e, 0x14, 0x1e, 0x4b, 0xa1, 0x05, 0x39,
        0x79, 0xb0, 0xcf, 0x7f, 0x17, 0xf0, 0x15, 0xf8,
        0xeb, 0x9b, 0x02, 0xab, 0xa4, 0x56, 0xd2, 0x77,
        0xcc, 0x98, 0x50, 0x0e, 0x3c, 0xd6, 0x8a, 0xb3,
        0xb5, 0x53, 0xae, 0xdd, 0x36, 0xb4, 0xff, 0x9a,
        0x8a, 0x49, 0x7f, 0xed, 0x64, 0xf3, 0xb9, 0x3c,
        0x0b, 0x8d, 0x58, 0xef, 0xfe, 0x57, 0xdd, 0x25,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x11, 0x2b, 0x51, 0xf7, 0xc8, 0xbb, 0xa2, 0x31,
        0x94, 0xc4, 0x97, 0x98, 0x20, 0x0d, 0xc8, 0xf8,
        0xe3, 0x35, 0xfe, 0x96, 0x78, 0xf1, 0x7a, 0x3a,
        0xed, 0x31, 0x42, 0x90, 0xf6, 0xef, 0x4d, 0x02,
        0x51, 0x1c, 0x37, 0x29, 0xf2, 0x4c, 0x2d, 0xb9,
        0xbd, 0x0f, 0x6b, 0xbd, 0xc5, 0x96, 0xe3, 0xc6,
        0x46, 0x82, 0x96, 0xb4, 0x16, 0xc3, 0xd4, 0xb6,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs96_ProduceCorrectResult) {

    const u8 s[] = {
        0x9e, 0xaf, 0x35, 0x8b, 0xd3, 0x28, 0x45, 0x4e,
        0xb5, 0xe7, 0x2c, 0x35, 0x3f, 0xe2, 0x66, 0x4e,
        0x14, 0xb3, 0x64, 0x91, 0x4c, 0xa8, 0x10, 0x2b,
        0xa8, 0x98, 0x81, 0x55, 0xf3, 0x63, 0xb5, 0xb4,
        0xed, 0x4b, 0xa2, 0xda, 0x00, 0x28, 0x8b, 0xde,
        0xf0, 0x86, 0xef, 0x0e, 0x27, 0x90, 0x6b, 0xf9,
        0x14, 0xc3, 0x09, 0xcc, 0xbc, 0xcc, 0xf5, 0x30,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xb6, 0x53, 0x9b, 0x1d, 0x54, 0xa1, 0xf7, 0x66,
        0x0e, 0x9c, 0x45, 0xde, 0x0c, 0x39, 0x07, 0x69,
        0xdc, 0x3a, 0x35, 0x68, 0x10, 0xf2, 0x3e, 0xf7,
        0x93, 0x53, 0x6a, 0x68, 0x33, 0x0e, 0x8e, 0x2f,
        0xd2, 0xa8, 0xd8, 0xad, 0xcf, 0x8f, 0x43, 0xf6,
        0xe8, 0xcd, 0x33, 0x31, 0x40, 0x39, 0xf9, 0x19,
        0x85, 0x43, 0xe3, 0x61, 0xb3, 0x79, 0xda, 0x08,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs97_ProduceCorrectResult) {

    const u8 s[] = {
        0x4d, 0xcf, 0xb5, 0x2e, 0x42, 0x9e, 0x6d, 0xea,
        0x88, 0xd2, 0x4a, 0xdd, 0xba, 0x3a, 0xf7, 0x1f,
        0x17, 0x26, 0x1c, 0x20, 0xa9, 0xf4, 0x79, 0xdd,
        0xb2, 0xe2, 0x53, 0x72, 0x61, 0x07, 0x72, 0x4e,
        0xb6, 0xdc, 0x63, 0x34, 0x21, 0x89, 0x5a, 0x0b,
        0xef, 0xfc, 0xe4, 0x8c, 0x72, 0x3f, 0xad, 0x77,
        0x48, 0x1a, 0xd2, 0x95, 0x9f, 0x68, 0xa4, 0x2b,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xa2, 0xe2, 0x15, 0xe2, 0x64, 0xdc, 0xd9, 0xf8,
        0xb5, 0x72, 0x0e, 0xd5, 0x04, 0x09, 0xec, 0xf6,
        0x4f, 0x2d, 0x8a, 0x6c, 0x5e, 0x64, 0xf6, 0xc7,
        0x49, 0x83, 0x8f, 0xf6, 0x41, 0x3e, 0x87, 0x8c,
        0x17, 0x38, 0xa4, 0xaa, 0xbb, 0xc0, 0xa8, 0xd6,
        0xa5, 0x5a, 0x05, 0x9c, 0x39, 0x8c, 0xff, 0xa2,
        0x42, 0xb2, 0xf9, 0xa6, 0x8b, 0x9f, 0x48, 0x69,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs98_ProduceCorrectResult) {

    const u8 s[] = {
        0x6e, 0xb2, 0x1c, 0x4b, 0xef, 0x3e, 0xac, 0x26,
        0x98, 0x7e, 0x41, 0x21, 0x21, 0x76, 0xd7, 0x11,
        0x51, 0x2a, 0x5f, 0xdf, 0x15, 0xd5, 0xb4, 0x16,
        0xc7, 0x5b, 0xe8, 0x50, 0x6d, 0x95, 0x8d, 0x0f,
        0x6a, 0xe4, 0x38, 0xc5, 0xf9, 0xae, 0xe4, 0x9e,
        0x41, 0x5f, 0xa7, 0x84, 0xb1, 0xf9, 0xc8, 0x14,
        0x87, 0xf7, 0xae, 0xc3, 0xc2, 0xba, 0x3f, 0x0a,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x9b, 0x46, 0x5a, 0xf3, 0x5a, 0xa5, 0x91, 0x2a,
        0x4d, 0x1c, 0x4c, 0x09, 0xed, 0x9d, 0xe1, 0xf9,
        0x5d, 0x7d, 0x9d, 0x3a, 0x0d, 0x9a, 0x30, 0x9e,
        0x43, 0x02, 0x0b, 0xaf, 0x4e, 0xc7, 0x31, 0x65,
        0x9c, 0x9d, 0xbf, 0xb9, 0x3e, 0x0f, 0xb8, 0x42,
        0x23, 0x27, 0x30, 0x5b, 0xaa, 0x7e, 0x46, 0x34,
        0x7e, 0x8a, 0x01, 0x79, 0x5c, 0xcb, 0x94, 0xda,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs99_ProduceCorrectResult) {

    const u8 s[] = {
        0x04, 0xb2, 0x3c, 0x46, 0xd6, 0x54, 0x16, 0xcd,
        0x32, 0x4c, 0xad, 0x1f, 0x6a, 0xc9, 0xdf, 0x68,
        0x1d, 0xa6, 0xad, 0xf5, 0xeb, 0xbf, 0x3d, 0x18,
        0xc2, 0x3d, 0xe8, 0x96, 0xd9, 0x0c, 0x67, 0x6e,
        0x70, 0x6b, 0x5e, 0x4e, 0x3d, 0x5e, 0x8a, 0x19,
        0xea, 0xf4, 0xec, 0x74, 0x4e, 0xab, 0x2f, 0x2a,
        0xb9, 0xdf, 0x36, 0x25, 0xf5, 0x09, 0xef, 0x3f,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x18, 0xe4, 0x24, 0x00, 0xf3, 0x40, 0xb4, 0x10,
        0xf9, 0xb4, 0x58, 0x9d, 0x5a, 0xdd, 0x3f, 0x28,
        0xf9, 0x4b, 0x6f, 0xfc, 0x00, 0x89, 0x50, 0xe1,
        0xb2, 0xc7, 0xcc, 0xf1, 0x72, 0x8c, 0x77, 0xe8,
        0x40, 0xd7, 0x72, 0x42, 0x11, 0x4c, 0xfa, 0xe3,
        0xae, 0x17, 0xe4, 0x5e, 0xdc, 0xb0, 0x99, 0xe7,
        0xc1, 0xfb, 0x77, 0x05, 0xa0, 0x7d, 0x82, 0x5c,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs100_ProduceCorrectResult) {

    const u8 s[] = {
        0x7d, 0x05, 0xb6, 0xc0, 0xbc, 0xae, 0xb0, 0x61,
        0xa5, 0xce, 0xb9, 0x22, 0x71, 0x0f, 0xc2, 0x6f,
        0x11, 0x68, 0x63, 0x53, 0x4a, 0xfe, 0x09, 0x4e,
        0x8b, 0x60, 0x34, 0xb1, 0x82, 0x33, 0xc2, 0xad,
        0x90, 0x1d, 0xbd, 0x31, 0x10, 0xe5, 0x2b, 0xd9,
        0xfa, 0x6a, 0xd4, 0xe4, 0xa2, 0x5c, 0x6d, 0x0e,
        0xc0, 0x35, 0xd0, 0x9f, 0x0f, 0xbc, 0xf1, 0x04,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x9b, 0x3d, 0x95, 0x38, 0xc4, 0xe3, 0x76, 0x5c,
        0x94, 0xca, 0x23, 0x8d, 0x7e, 0xf6, 0xe0, 0xbe,
        0x83, 0xc3, 0x46, 0x76, 0xcf, 0xcd, 0x79, 0x86,
        0x65, 0x38, 0xb3, 0xfa, 0x28, 0x21, 0xb7, 0x11,
        0x71, 0x6e, 0x9d, 0x67, 0xaf, 0xd0, 0xd3, 0x17,
        0x12, 0x3d, 0xa3, 0x44, 0x65, 0x67, 0x28, 0x30,
        0xda, 0x09, 0x51, 0x8b, 0x9c, 0x03, 0x38, 0x6e,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs101_ProduceCorrectResult) {

    const u8 s[] = {
        0x07, 0xf0, 0x8a, 0xa2, 0x52, 0xe1, 0xa2, 0x1c,
        0x39, 0xfa, 0x05, 0x0f, 0x80, 0x85, 0x6b, 0x80,
        0x1d, 0x78, 0xba, 0x91, 0x0c, 0x5c, 0x83, 0xaf,
        0x7b, 0x7d, 0x76, 0x12, 0xb8, 0x74, 0x20, 0xaf,
        0x2c, 0x81, 0xee, 0xcf, 0x68, 0xf6, 0xff, 0x4e,
        0x9b, 0x0d, 0xbc, 0x08, 0x0b, 0x6d, 0x92, 0x7c,
        0xba, 0xdd, 0x65, 0xa0, 0xa7, 0x04, 0x8c, 0x00,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xfa, 0x22, 0x4f, 0x67, 0xa4, 0x63, 0x12, 0x91,
        0x3b, 0xc9, 0x14, 0xa9, 0x9a, 0xec, 0x92, 0x00,
        0xd5, 0xd2, 0xa3, 0xe2, 0x03, 0x4c, 0x13, 0x90,
        0x9e, 0x8f, 0x2b, 0x39, 0x5c, 0x1c, 0x33, 0x4f,
        0x58, 0xd7, 0x3e, 0x1f, 0xd3, 0xb3, 0x1b, 0x23,
        0x47, 0x84, 0xbf, 0x99, 0xb6, 0x58, 0xe6, 0xc5,
        0x36, 0x63, 0x50, 0xbc, 0xe8, 0x7e, 0x0f, 0x38,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs102_ProduceCorrectResult) {

    const u8 s[] = {
        0x56, 0x91, 0xd7, 0xd8, 0x58, 0xa5, 0x99, 0x9f,
        0x8c, 0xbb, 0x71, 0x4e, 0xd6, 0xa7, 0x57, 0xe9,
        0x3d, 0x6f, 0x43, 0xb2, 0x60, 0xfe, 0xfa, 0x4d,
        0xe4, 0x8a, 0xc5, 0xf8, 0x50, 0x37, 0xa9, 0x3d,
        0xe6, 0x07, 0x7a, 0xc6, 0x04, 0xee, 0xb3, 0x02,
        0x29, 0x2f, 0x54, 0x1d, 0x56, 0x34, 0x9b, 0x25,
        0x1d, 0xba, 0x1f, 0xea, 0xf1, 0xa9, 0x29, 0x17,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x52, 0x4d, 0x2d, 0x26, 0xe6, 0x27, 0x9e, 0xbb,
        0xb6, 0xe9, 0x34, 0x46, 0x13, 0x5c, 0x8e, 0xa4,
        0x1b, 0x19, 0x57, 0x35, 0xed, 0xfe, 0xac, 0xd9,
        0x27, 0x63, 0x4d, 0xed, 0xfb, 0x22, 0xa0, 0xb9,
        0x4a, 0x84, 0x5d, 0xeb, 0x24, 0xcb, 0xd3, 0x31,
        0xaa, 0x3a, 0xc5, 0xab, 0x10, 0xf5, 0xd3, 0xa2,
        0x94, 0xfb, 0x75, 0x66, 0x15, 0x20, 0x96, 0x61,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs103_ProduceCorrectResult) {

    const u8 s[] = {
        0xc7, 0x61, 0x78, 0x5a, 0x48, 0x02, 0x79, 0xbf,
        0xda, 0xd7, 0x2d, 0xbb, 0xa1, 0x74, 0x4b, 0x79,
        0x90, 0x51, 0x97, 0xc5, 0xcf, 0x4f, 0xf6, 0xf1,
        0x53, 0xfa, 0xce, 0x6b, 0x1a, 0x4e, 0xd9, 0x6c,
        0x6e, 0x11, 0x28, 0xd1, 0xa6, 0x67, 0x53, 0x11,
        0x9b, 0xc9, 0x27, 0xd6, 0x82, 0xe4, 0x00, 0x76,
        0x09, 0x35, 0x68, 0x8e, 0xd7, 0x0a, 0xb8, 0x31,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x96, 0xd2, 0xc2, 0xf8, 0xec, 0xf7, 0x7d, 0x9a,
        0x69, 0x09, 0xe7, 0xd1, 0xb7, 0x3e, 0x66, 0xe2,
        0x28, 0x58, 0xe4, 0xdc, 0xb0, 0xc9, 0xc6, 0xee,
        0x48, 0x3f, 0xb4, 0xdf, 0xcc, 0x78, 0x8e, 0xc4,
        0xd3, 0xfc, 0xd9, 0x1c, 0x95, 0x21, 0xa5, 0x49,
        0x38, 0x97, 0xfa, 0x08, 0x3d, 0xaa, 0x40, 0x31,
        0x56, 0x93, 0x02, 0xec, 0x92, 0x82, 0xd4, 0xcd,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs104_ProduceCorrectResult) {

    const u8 s[] = {
        0x4b, 0x04, 0x62, 0xaa, 0x7d, 0x94, 0x3f, 0x14,
        0x41, 0x90, 0xe1, 0x7e, 0x53, 0x18, 0xe5, 0xc8,
        0x48, 0x05, 0x94, 0x10, 0x85, 0x81, 0x81, 0xb6,
        0x06, 0xe0, 0xe8, 0x98, 0x78, 0x0d, 0x8b, 0x0f,
        0x68, 0xbb, 0xdb, 0xaa, 0xf4, 0xa3, 0x10, 0x68,
        0x8b, 0xff, 0xc2, 0xbb, 0xbc, 0x5e, 0xdb, 0x03,
        0xcf, 0xaa, 0xd6, 0xe0, 0xd0, 0x28, 0xf6, 0x04,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x0f, 0x01, 0x1d, 0xa2, 0xe6, 0x29, 0x04, 0x0a,
        0x10, 0x01, 0x79, 0x4b, 0x8d, 0x4d, 0xc6, 0x34,
        0xc0, 0x84, 0xe5, 0x74, 0xdf, 0xee, 0x66, 0xc4,
        0xe0, 0xd0, 0x6b, 0x45, 0x8f, 0x35, 0x98, 0x93,
        0x0a, 0x41, 0x89, 0x47, 0xde, 0x4d, 0x12, 0x0c,
        0xcc, 0x6f, 0x34, 0x78, 0xbc, 0x7a, 0x08, 0x3e,
        0xe2, 0x4e, 0x7e, 0xaf, 0x52, 0xe6, 0xd1, 0x58,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs105_ProduceCorrectResult) {

    const u8 s[] = {
        0xc5, 0x64, 0xe9, 0x97, 0x05, 0xb5, 0xc9, 0x4e,
        0xb2, 0x8c, 0xe2, 0xcb, 0x2d, 0x0f, 0x4a, 0x9a,
        0xa3, 0x8c, 0x90, 0xca, 0x26, 0x0e, 0x5e, 0xed,
        0x07, 0x06, 0xba, 0x46, 0x71, 0xdd, 0x1e, 0x73,
        0xb1, 0xef, 0xe4, 0x1e, 0x93, 0x9a, 0x23, 0x63,
        0xbc, 0x54, 0xb9, 0xb9, 0xcf, 0x49, 0x97, 0x86,
        0xb6, 0x94, 0x4c, 0x10, 0xf3, 0xb4, 0x33, 0x06,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xe2, 0x0e, 0x7d, 0x8c, 0xd4, 0x2e, 0xe6, 0x99,
        0x93, 0xb3, 0xde, 0xfa, 0x17, 0x99, 0x13, 0xef,
        0x43, 0xa2, 0xb5, 0xd3, 0x1d, 0x68, 0x7f, 0xff,
        0x99, 0xfb, 0x47, 0x4d, 0xe5, 0x36, 0x30, 0x59,
        0x2e, 0x98, 0x81, 0x74, 0x69, 0x65, 0xf8, 0xb3,
        0xbd, 0xa7, 0x1a, 0xba, 0xce, 0x07, 0x4c, 0xd4,
        0x8d, 0xaf, 0xb7, 0xed, 0xc7, 0x4a, 0x78, 0xcf,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs106_ProduceCorrectResult) {

    const u8 s[] = {
        0xa6, 0x46, 0xea, 0x73, 0x72, 0x09, 0x1c, 0x1b,
        0xe1, 0xb9, 0xa6, 0xd3, 0xba, 0x2e, 0x06, 0x0e,
        0xef, 0x60, 0x07, 0xe1, 0x5a, 0xc3, 0x1b, 0x9a,
        0x73, 0x5c, 0x04, 0x28, 0x4a, 0x3d, 0xef, 0x67,
        0xd0, 0x6b, 0xba, 0xc4, 0x75, 0xe0, 0xc2, 0x58,
        0xe8, 0x4b, 0xd3, 0xe3, 0xe7, 0x93, 0x17, 0x91,
        0x0f, 0x84, 0x8d, 0x7c, 0x0c, 0x37, 0xf8, 0x16,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x07, 0xbb, 0x7c, 0x4c, 0xb4, 0x53, 0xe3, 0x14,
        0x2f, 0x2b, 0x1b, 0x95, 0xb8, 0xbf, 0xa5, 0x5c,
        0xbb, 0x1e, 0xcd, 0xa1, 0x24, 0x69, 0xab, 0x0b,
        0x27, 0xd0, 0x70, 0x0f, 0x45, 0xc9, 0x47, 0xc3,
        0x58, 0x83, 0x62, 0x10, 0x13, 0xca, 0x83, 0x76,
        0xa3, 0x50, 0x94, 0xb7, 0x2e, 0xa0, 0xc5, 0x93,
        0x91, 0x2b, 0x9d, 0xed, 0x51, 0x23, 0x16, 0x77,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs107_ProduceCorrectResult) {

    const u8 s[] = {
        0xc4, 0xb0, 0xef, 0x22, 0xdd, 0xfa, 0x26, 0x74,
        0x0f, 0xf9, 0xbe, 0x09, 0xec, 0x98, 0x23, 0x4c,
        0x52, 0x95, 0x08, 0xb7, 0x87, 0x28, 0x76, 0x02,
        0x85, 0x58, 0x3c, 0x9d, 0xf5, 0x59, 0x5f, 0x21,
        0xb0, 0x2a, 0x01, 0xd9, 0x90, 0x14, 0x03, 0xb3,
        0x79, 0x2c, 0x6d, 0x8c, 0xb2, 0x1a, 0x0d, 0x18,
        0x5c, 0xb3, 0x15, 0x76, 0xe3, 0x0a, 0x75, 0x0b,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xd5, 0x7d, 0x85, 0x2c, 0x74, 0xc6, 0x12, 0x90,
        0x40, 0x85, 0x67, 0xbb, 0x88, 0x66, 0xed, 0x1b,
        0x7d, 0x6f, 0x90, 0xab, 0xd7, 0x89, 0x47, 0x5c,
        0xb5, 0xe2, 0x07, 0x00, 0xc0, 0x9e, 0xa2, 0xa0,
        0x93, 0x33, 0xd9, 0xdf, 0x3f, 0xd8, 0xd6, 0x50,
        0x7b, 0x20, 0x52, 0x61, 0x5b, 0xa2, 0x4a, 0x0e,
        0x6f, 0x07, 0x08, 0x04, 0xd6, 0xd4, 0x66, 0x59,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs108_ProduceCorrectResult) {

    const u8 s[] = {
        0x25, 0x51, 0x42, 0xd4, 0xaf, 0x48, 0x08, 0x09,
        0xb4, 0x11, 0x04, 0x8e, 0xc1, 0x0d, 0x92, 0x6b,
        0xa8, 0xb9, 0x82, 0xcd, 0x84, 0x1e, 0x5e, 0x42,
        0xd2, 0x89, 0x1b, 0x6c, 0xb4, 0xe9, 0xe5, 0x23,
        0xb8, 0x76, 0xcb, 0xaa, 0x8a, 0x46, 0x33, 0xda,
        0x37, 0xc5, 0xf5, 0x3e, 0xbd, 0x13, 0x28, 0x58,
        0x0b, 0x1c, 0x3b, 0x94, 0x8f, 0xb5, 0x58, 0x39,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xec, 0x3c, 0x3b, 0x1c, 0x35, 0x38, 0x72, 0xd6,
        0x77, 0x40, 0x85, 0x82, 0x84, 0x92, 0x6c, 0x2d,
        0xf8, 0x31, 0xac, 0x62, 0xf5, 0xb1, 0x5a, 0x22,
        0x7a, 0xea, 0xb0, 0x2c, 0x11, 0x32, 0xa5, 0x90,
        0x64, 0xcd, 0x35, 0xb7, 0x34, 0x0e, 0x58, 0x4f,
        0x56, 0x6b, 0x1f, 0xdd, 0x77, 0x4a, 0x7f, 0x32,
        0x83, 0x64, 0x52, 0x97, 0x37, 0x48, 0xb6, 0x95,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs109_ProduceCorrectResult) {

    const u8 s[] = {
        0x65, 0x61, 0x9f, 0x35, 0xfb, 0xa1, 0xf9, 0x0c,
        0xf2, 0x93, 0xc8, 0xa6, 0xd6, 0x78, 0xc7, 0x73,
        0x47, 0xb2, 0xd7, 0x0b, 0xc4, 0xce, 0xc1, 0xd7,
        0xd8, 0x99, 0xe3, 0xd3, 0x20, 0xc2, 0x6e, 0x61,
        0x31, 0x32, 0xc9, 0x3a, 0x15, 0x06, 0x66, 0xed,
        0x31, 0x8a, 0x92, 0x03, 0xff, 0x32, 0xe4, 0xe8,
        0x9f, 0x98, 0x14, 0x9b, 0x25, 0xfa, 0xa5, 0x3d,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x43, 0xb5, 0x65, 0x4c, 0xc7, 0x9c, 0xbe, 0x12,
        0xc8, 0xbf, 0x94, 0xef, 0xfb, 0x20, 0xe8, 0x58,
        0x3c, 0xb4, 0x09, 0x39, 0x73, 0xdf, 0x3a, 0xe7,
        0x28, 0xa0, 0xb2, 0x38, 0xe5, 0xa8, 0x3e, 0xc5,
        0xeb, 0x27, 0xa5, 0x5f, 0xca, 0x79, 0xea, 0xec,
        0x85, 0x7a, 0x99, 0x47, 0xad, 0xc9, 0x3a, 0x5e,
        0x08, 0xca, 0x4a, 0x97, 0xb8, 0x37, 0x30, 0x2c,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs110_ProduceCorrectResult) {

    const u8 s[] = {
        0x04, 0x38, 0xd8, 0xb6, 0x27, 0xd4, 0x4a, 0xbc,
        0x1a, 0x42, 0xa6, 0xc8, 0x42, 0xc6, 0x6a, 0xf2,
        0x48, 0x47, 0x0d, 0xc4, 0xc0, 0x69, 0xde, 0xe3,
        0xe1, 0x0e, 0x00, 0x94, 0x17, 0x51, 0x36, 0x12,
        0x31, 0x4e, 0xf4, 0x42, 0x5b, 0xf3, 0x6b, 0x97,
        0xba, 0xa4, 0x1a, 0xb8, 0x98, 0x00, 0xd4, 0xdc,
        0xe7, 0xf4, 0x80, 0xdf, 0x03, 0x50, 0x42, 0x20,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xc2, 0x90, 0x9f, 0xdf, 0x03, 0xbd, 0x10, 0xbb,
        0xb8, 0x62, 0x43, 0x95, 0x45, 0x17, 0x15, 0xf3,
        0xed, 0xe3, 0xac, 0x0f, 0x03, 0x7e, 0x3c, 0x37,
        0x91, 0xd0, 0xbf, 0x80, 0xf7, 0xa5, 0x2d, 0x6d,
        0x94, 0x58, 0x29, 0x10, 0x0b, 0x03, 0xcf, 0x40,
        0xc6, 0x16, 0x23, 0xbe, 0xff, 0xc5, 0xda, 0x1e,
        0x95, 0x3e, 0x95, 0x01, 0x7f, 0xd0, 0xc6, 0x24,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs111_ProduceCorrectResult) {

    const u8 s[] = {
        0xb2, 0xc9, 0x32, 0xcc, 0xfd, 0x67, 0x90, 0xe3,
        0x24, 0x43, 0xb1, 0x71, 0x95, 0x14, 0xab, 0xff,
        0x2b, 0xd1, 0xcf, 0xe3, 0x88, 0xf3, 0xb7, 0x50,
        0x79, 0x3a, 0x61, 0x21, 0x8c, 0x60, 0x2b, 0x6e,
        0x82, 0xdb, 0x48, 0xd4, 0x25, 0x23, 0x0b, 0x4e,
        0xd2, 0x4c, 0xd8, 0xec, 0x1f, 0x40, 0xa6, 0x55,
        0xc6, 0x87, 0x24, 0x56, 0xc1, 0x99, 0x88, 0x1e,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x5c, 0x32, 0xb5, 0xe8, 0x6d, 0x0b, 0x1e, 0xa6,
        0x4d, 0xda, 0x62, 0xa0, 0x68, 0x5a, 0x81, 0x11,
        0xc2, 0x9c, 0x4d, 0x6d, 0xff, 0x57, 0xf1, 0x4c,
        0xdd, 0xc1, 0xf2, 0xcf, 0xb7, 0x77, 0x35, 0x27,
        0xb6, 0x83, 0x12, 0xab, 0x6f, 0xf8, 0xfc, 0xce,
        0x4f, 0x54, 0x03, 0x88, 0xd9, 0xbb, 0xdc, 0xdf,
        0x9f, 0xeb, 0xe6, 0x55, 0xba, 0x49, 0xfc, 0x1f,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs112_ProduceCorrectResult) {

    const u8 s[] = {
        0xe0, 0x1d, 0xc8, 0x33, 0xfe, 0x00, 0xf0, 0xcd,
        0x43, 0x29, 0x2c, 0x8a, 0xcc, 0xad, 0x5a, 0xe4,
        0x84, 0xf6, 0x00, 0x65, 0xaa, 0xa5, 0x3c, 0x47,
        0xb9, 0xb5, 0x41, 0x91, 0xb6, 0xae, 0x4a, 0xeb,
        0x53, 0xf6, 0xab, 0xe2, 0xd9, 0x36, 0x92, 0x16,
        0xae, 0x01, 0x33, 0x9c, 0xd6, 0x06, 0x33, 0x0c,
        0xfb, 0x1d, 0xc7, 0x09, 0x4d, 0x64, 0x04, 0x13,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x32, 0x48, 0xea, 0xc3, 0xb4, 0x3c, 0x7a, 0x96,
        0x29, 0xe3, 0xee, 0x83, 0xed, 0x72, 0xfd, 0x23,
        0xdc, 0x20, 0x8c, 0xda, 0xb3, 0xc7, 0x27, 0x93,
        0xc3, 0x34, 0x2e, 0x2e, 0x65, 0x85, 0x52, 0xf9,
        0xc6, 0x24, 0x05, 0x19, 0x73, 0xfd, 0x07, 0xe4,
        0x56, 0x3e, 0x45, 0x88, 0x57, 0xd0, 0xf2, 0xb4,
        0x02, 0x68, 0xcc, 0x2a, 0x09, 0xaa, 0x61, 0x42,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs113_ProduceCorrectResult) {

    const u8 s[] = {
        0xae, 0x81, 0xb4, 0xb1, 0x9e, 0xae, 0x3b, 0x9d,
        0x0d, 0xa9, 0x42, 0xbf, 0x3b, 0xf5, 0x22, 0x3e,
        0x00, 0xd8, 0xaa, 0x16, 0x0c, 0xdf, 0x49, 0x91,
        0x7e, 0x30, 0x18, 0xf7, 0x36, 0x0f, 0x38, 0x82,
        0x5c, 0x57, 0x4f, 0xc7, 0xac, 0x97, 0x1f, 0xeb,
        0xfe, 0x74, 0xaf, 0x40, 0x82, 0x6d, 0x76, 0x7e,
        0x58, 0x1e, 0xdd, 0xcf, 0x7a, 0x1c, 0x8c, 0x1b,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x11, 0xfb, 0x2b, 0xe8, 0x16, 0x80, 0xcf, 0x3d,
        0x7c, 0xeb, 0x2e, 0x56, 0x5e, 0x58, 0x9d, 0x04,
        0xcd, 0x27, 0x51, 0x63, 0x86, 0x03, 0x28, 0x0d,
        0x53, 0xaf, 0x41, 0xfe, 0x86, 0xe5, 0x5d, 0xbe,
        0xfb, 0xd1, 0x84, 0x47, 0x09, 0x62, 0x50, 0x17,
        0xfc, 0xb6, 0x5e, 0xc3, 0x37, 0xa8, 0xd9, 0x5d,
        0x47, 0x39, 0x03, 0x96, 0x1a, 0xab, 0x94, 0x18,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs114_ProduceCorrectResult) {

    const u8 s[] = {
        0x82, 0xae, 0x59, 0xe9, 0xb4, 0x6b, 0x0a, 0x50,
        0x44, 0xa2, 0xa2, 0x07, 0xdd, 0xdf, 0x94, 0x5c,
        0x0f, 0x67, 0x3e, 0x36, 0xe5, 0x76, 0x09, 0x4c,
        0x2e, 0x6e, 0xab, 0xd0, 0x63, 0xf7, 0x63, 0xbf,
        0x17, 0xfa, 0x6c, 0x3e, 0x27, 0x35, 0xe7, 0xbb,
        0x46, 0x8e, 0x31, 0xa8, 0x71, 0xd5, 0x9f, 0xe8,
        0x93, 0xcb, 0x83, 0x84, 0x5a, 0x18, 0x68, 0x04,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x02, 0x8c, 0x35, 0x67, 0x42, 0xf3, 0x5f, 0xd9,
        0x6c, 0x88, 0x19, 0x2a, 0x5b, 0x28, 0xf2, 0x92,
        0x69, 0x16, 0xfc, 0x12, 0x31, 0x93, 0x60, 0xf8,
        0xa5, 0x9c, 0x7b, 0x39, 0xd1, 0x91, 0xac, 0x1a,
        0xe7, 0xde, 0x86, 0x52, 0xf0, 0xd3, 0xcf, 0x1e,
        0x46, 0x92, 0x55, 0x3f, 0x54, 0x89, 0xf0, 0x7c,
        0x52, 0xe1, 0x55, 0xb8, 0x27, 0x57, 0xc2, 0xc3,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs115_ProduceCorrectResult) {

    const u8 s[] = {
        0x15, 0xdd, 0xc3, 0x3e, 0x94, 0xd7, 0xd2, 0xab,
        0x1c, 0x06, 0x73, 0x81, 0x92, 0x44, 0x7d, 0x09,
        0x65, 0xcf, 0x53, 0x63, 0xb6, 0xa1, 0xd1, 0xc5,
        0xbf, 0x76, 0x13, 0x6c, 0x9e, 0x72, 0xac, 0x5e,
        0xa6, 0xb3, 0x77, 0x0d, 0x2a, 0xe9, 0x11, 0x63,
        0x91, 0x21, 0x29, 0x7f, 0x8f, 0x4b, 0x07, 0x04,
        0x0b, 0x0e, 0xbc, 0x24, 0x10, 0x48, 0x70, 0x1a,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x1d, 0x13, 0x6c, 0x42, 0x70, 0x04, 0xca, 0xac,
        0xc3, 0xac, 0xf2, 0x1b, 0x00, 0x26, 0x52, 0xbd,
        0x4a, 0x84, 0x8a, 0x70, 0xa4, 0x5e, 0xac, 0xb6,
        0x9a, 0xd0, 0x7d, 0xaf, 0x71, 0xbf, 0x2a, 0x2e,
        0xc6, 0x9f, 0x78, 0x1c, 0xa2, 0x9e, 0x9b, 0x23,
        0xcf, 0x9e, 0xfc, 0x32, 0xe1, 0x1c, 0x91, 0x24,
        0x4f, 0x7f, 0x93, 0xef, 0x78, 0xbc, 0x87, 0x50,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs116_ProduceCorrectResult) {

    const u8 s[] = {
        0xdb, 0x22, 0x0d, 0x24, 0x23, 0x06, 0x06, 0xfa,
        0xc2, 0x50, 0xfa, 0xa7, 0x95, 0x1c, 0xc0, 0xc8,
        0x1f, 0xb0, 0x87, 0xc8, 0xc1, 0xac, 0xc5, 0x9a,
        0x54, 0xc9, 0xc5, 0xb8, 0xb0, 0xf0, 0xda, 0x09,
        0xd5, 0x99, 0x6c, 0xb7, 0x15, 0x2d, 0x4c, 0x21,
        0x6b, 0x76, 0xae, 0x7c, 0xe6, 0xb7, 0x4b, 0x4b,
        0x95, 0x55, 0x1f, 0x62, 0xd9, 0xe6, 0x4e, 0x28,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x31, 0x72, 0x6f, 0xe4, 0xa4, 0xe6, 0x8d, 0x28,
        0x71, 0x5d, 0xe7, 0x70, 0xc1, 0x4f, 0x51, 0x9d,
        0x88, 0x79, 0x59, 0xe6, 0x30, 0xe8, 0x9c, 0xa6,
        0x04, 0x27, 0xf4, 0x21, 0xea, 0x65, 0x4d, 0xf1,
        0x9f, 0xd0, 0x3c, 0x72, 0x54, 0x7d, 0x43, 0x2c,
        0xea, 0x54, 0xa8, 0xfa, 0x58, 0x64, 0xa7, 0x59,
        0x68, 0xe7, 0x2a, 0x39, 0x35, 0x93, 0xb1, 0xa2,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs117_ProduceCorrectResult) {

    const u8 s[] = {
        0x0c, 0xb9, 0x00, 0xc1, 0x7e, 0xd1, 0xdb, 0x30,
        0xed, 0x14, 0xdf, 0x0e, 0x3e, 0x74, 0xdc, 0xc2,
        0xdd, 0xd4, 0xa3, 0xbe, 0xaf, 0x8e, 0xfe, 0x81,
        0x55, 0xcd, 0x38, 0x7f, 0xe7, 0xf8, 0xce, 0xce,
        0x94, 0xe1, 0x6f, 0x7c, 0x30, 0x1e, 0x0b, 0x90,
        0x42, 0x14, 0x11, 0x32, 0xed, 0xcc, 0xe4, 0x64,
        0xfc, 0x19, 0x01, 0x5c, 0x35, 0x69, 0xfd, 0x24,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x2e, 0x10, 0xde, 0xb4, 0x74, 0xa1, 0x38, 0x18,
        0xad, 0x89, 0x6f, 0x78, 0x8a, 0x0e, 0x16, 0x0d,
        0xf7, 0x6a, 0x9c, 0xf0, 0xd6, 0x10, 0xf4, 0xcb,
        0xf3, 0x0b, 0x27, 0x17, 0xb7, 0x14, 0x11, 0xf9,
        0xca, 0xf6, 0x5c, 0x40, 0x41, 0x9e, 0x88, 0xc1,
        0x90, 0xca, 0xda, 0xd1, 0x3c, 0x01, 0x27, 0x74,
        0x87, 0xf7, 0x4c, 0x4c, 0x94, 0x29, 0x12, 0x63,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs118_ProduceCorrectResult) {

    const u8 s[] = {
        0xbb, 0xd5, 0x6c, 0x53, 0x9f, 0xa8, 0x43, 0xa1,
        0x13, 0xb5, 0x1c, 0xb9, 0x8b, 0xd9, 0xf3, 0xd7,
        0x4a, 0xd7, 0x23, 0xe1, 0x80, 0x49, 0xb5, 0x7b,
        0x27, 0x48, 0xa0, 0x07, 0xe8, 0x70, 0x94, 0x39,
        0xab, 0xfd, 0x43, 0x23, 0xc7, 0xd7, 0xbf, 0x7e,
        0x23, 0x10, 0xeb, 0x85, 0x97, 0x4a, 0x84, 0xdc,
        0x8f, 0x33, 0xc7, 0x0d, 0xb9, 0xa1, 0x2e, 0x1d,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x82, 0xb2, 0xd2, 0xd4, 0x51, 0x65, 0xb0, 0x52,
        0x4d, 0x0c, 0x92, 0xf1, 0x25, 0xcf, 0x51, 0x15,
        0x0d, 0x69, 0xcd, 0x07, 0x1c, 0xed, 0x0b, 0xe1,
        0x09, 0x21, 0x21, 0x09, 0x9c, 0x83, 0x8d, 0xc6,
        0x6e, 0xb3, 0x21, 0xf1, 0xd9, 0x50, 0x09, 0x24,
        0x2c, 0x97, 0x1a, 0x65, 0x28, 0x59, 0xaf, 0xa8,
        0xe3, 0x89, 0x7a, 0xcd, 0xaf, 0xda, 0xc0, 0x80,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs119_ProduceCorrectResult) {

    const u8 s[] = {
        0x38, 0xce, 0xf4, 0xfc, 0x5c, 0x10, 0x7b, 0x57,
        0x40, 0xf4, 0x8c, 0x6a, 0x63, 0x32, 0xd1, 0xb2,
        0xc2, 0x24, 0xdf, 0x37, 0x33, 0x7e, 0x9c, 0x6b,
        0x96, 0xd3, 0x04, 0xca, 0xf6, 0xc4, 0x89, 0xa1,
        0x79, 0x32, 0x13, 0x81, 0xa9, 0xc8, 0x3b, 0xc2,
        0x1d, 0x7d, 0xd4, 0x49, 0xc4, 0xfc, 0x1f, 0x16,
        0x4c, 0x6a, 0x73, 0xca, 0x06, 0xdf, 0xcc, 0x01,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x3a, 0x41, 0xc2, 0xfb, 0x2a, 0x76, 0x12, 0xc3,
        0xd6, 0xba, 0x70, 0x62, 0x77, 0xf9, 0x1d, 0x77,
        0xf5, 0x03, 0x4f, 0xef, 0xd7, 0xea, 0x40, 0x83,
        0x3b, 0x9d, 0x09, 0x9e, 0x55, 0xee, 0x2d, 0x93,
        0xf5, 0xb9, 0x50, 0x3d, 0x11, 0xb2, 0x23, 0xb1,
        0x27, 0x0a, 0x75, 0x2e, 0xb0, 0x2b, 0x5e, 0x6d,
        0x2c, 0xd3, 0x05, 0xdd, 0x7a, 0x5e, 0x37, 0x52,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs120_ProduceCorrectResult) {

    const u8 s[] = {
        0xfb, 0x54, 0x20, 0x78, 0x28, 0x05, 0xdf, 0xb4,
        0x94, 0xc1, 0x1a, 0xcc, 0x3b, 0xfb, 0x6b, 0x12,
        0x60, 0xd3, 0x9f, 0x76, 0x40, 0xe1, 0x1d, 0xf9,
        0x4a, 0x4e, 0xb7, 0x4a, 0x78, 0x4b, 0x0f, 0x44,
        0xed, 0x6c, 0x24, 0x83, 0xf8, 0xca, 0xd2, 0xd7,
        0x08, 0x77, 0x29, 0x82, 0x82, 0x4e, 0xe1, 0x40,
        0xa4, 0x16, 0x96, 0x99, 0xcf, 0x72, 0x47, 0x21,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x22, 0x98, 0xdd, 0x89, 0x95, 0xc5, 0x28, 0x67,
        0x59, 0x68, 0x01, 0xd7, 0x64, 0x09, 0x83, 0x8a,
        0x5e, 0x0f, 0x9c, 0x97, 0xb4, 0x9b, 0x27, 0xfc,
        0xd4, 0xf4, 0xbd, 0x67, 0x18, 0x43, 0x58, 0xf8,
        0x17, 0x6c, 0x93, 0xc6, 0x6a, 0x34, 0x0a, 0xa6,
        0xc0, 0x33, 0x6f, 0x2c, 0xc5, 0xfa, 0x2a, 0xa8,
        0xed, 0x35, 0x20, 0xa9, 0x14, 0x87, 0x26, 0x47,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs121_ProduceCorrectResult) {

    const u8 s[] = {
        0xf0, 0x12, 0x3d, 0x0b, 0x3d, 0xfe, 0xc3, 0x9c,
        0x73, 0xcd, 0x40, 0x11, 0xf3, 0x9e, 0xda, 0xd5,
        0xc5, 0xc5, 0x57, 0x2b, 0xe8, 0x48, 0x6d, 0xa9,
        0x69, 0x4b, 0x65, 0x1a, 0xc0, 0xee, 0xcd, 0x9f,
        0x4b, 0x63, 0x76, 0x7d, 0xbe, 0x29, 0xa4, 0xa7,
        0xc3, 0x6a, 0x97, 0x58, 0x15, 0x1f, 0x83, 0x82,
        0x0e, 0x34, 0xa7, 0xb5, 0xba, 0xbf, 0x0a, 0x3c,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x3f, 0x19, 0x83, 0x2f, 0xcb, 0x27, 0xa1, 0xe2,
        0x7a, 0xa4, 0x51, 0x00, 0x60, 0x2c, 0x17, 0x9b,
        0x32, 0x5b, 0xaa, 0x8e, 0xbf, 0x54, 0xac, 0xff,
        0xbb, 0xaf, 0x77, 0xd9, 0x80, 0x33, 0x9b, 0x76,
        0x32, 0x2d, 0x09, 0xde, 0x41, 0x92, 0x2a, 0x12,
        0x52, 0x6a, 0xf0, 0x88, 0xee, 0x87, 0x3d, 0x74,
        0xe1, 0xc4, 0xa6, 0xf0, 0x37, 0x66, 0xb6, 0x14,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs122_ProduceCorrectResult) {

    const u8 s[] = {
        0x49, 0x9a, 0x0b, 0x2b, 0x87, 0xb9, 0x3e, 0x92,
        0x78, 0x26, 0x02, 0x48, 0xe0, 0xe0, 0xbb, 0xe0,
        0x26, 0x99, 0x9e, 0x4b, 0xc0, 0xd8, 0xb4, 0xf6,
        0x53, 0x0a, 0x44, 0xb6, 0xdf, 0xd9, 0xe3, 0xa4,
        0x4c, 0xe7, 0x03, 0xa8, 0x1f, 0xb6, 0x4c, 0x91,
        0x34, 0xd0, 0xec, 0xd0, 0x7e, 0x9a, 0xc0, 0x75,
        0x02, 0x9b, 0x83, 0x68, 0xff, 0x68, 0x55, 0x09,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x7d, 0x62, 0x9b, 0x08, 0x1a, 0x14, 0xf3, 0x55,
        0x95, 0xdb, 0x1e, 0xe5, 0x56, 0xed, 0xf5, 0x73,
        0x1a, 0xfc, 0x48, 0xd7, 0x4a, 0x20, 0x54, 0xed,
        0x69, 0x9d, 0x48, 0x30, 0xcb, 0x8a, 0x09, 0x8c,
        0x00, 0xf5, 0x9c, 0x28, 0xbb, 0x96, 0xf1, 0x29,
        0xa6, 0x59, 0x0c, 0x0b, 0x81, 0x88, 0x49, 0x9d,
        0xa5, 0xd3, 0x93, 0xaf, 0xab, 0x59, 0xa5, 0xbf,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs123_ProduceCorrectResult) {

    const u8 s[] = {
        0xf1, 0x4a, 0x16, 0x03, 0x89, 0x19, 0x52, 0x00,
        0x85, 0x56, 0x62, 0x5b, 0x31, 0x29, 0x27, 0x2e,
        0x1e, 0x56, 0xec, 0xcc, 0x72, 0x34, 0xa5, 0x0c,
        0x0e, 0xcd, 0xc8, 0xf5, 0xfc, 0x83, 0x7f, 0xf0,
        0xb4, 0xd5, 0x9b, 0x91, 0x75, 0x9b, 0xee, 0xaf,
        0x2e, 0xad, 0x77, 0xea, 0x03, 0xec, 0x91, 0x8a,
        0x4d, 0x78, 0xa8, 0x1d, 0x33, 0xa6, 0x91, 0x04,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xfe, 0x6f, 0xa0, 0x36, 0x02, 0xcb, 0xd3, 0xa5,
        0xd7, 0xdb, 0x4a, 0x7b, 0xc3, 0x76, 0x79, 0xb8,
        0x82, 0x25, 0xbe, 0x77, 0xc6, 0x9a, 0x59, 0xb8,
        0x9b, 0xf4, 0x66, 0xcf, 0xc6, 0x00, 0xd1, 0x87,
        0x64, 0x29, 0x97, 0x21, 0xa8, 0x68, 0x94, 0xc6,
        0x36, 0x57, 0xb3, 0x79, 0x8e, 0x51, 0x0d, 0xda,
        0xa9, 0xaf, 0x06, 0x41, 0x97, 0x2f, 0x60, 0x79,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs124_ProduceCorrectResult) {

    const u8 s[] = {
        0xd0, 0x98, 0x63, 0x1c, 0xf5, 0x46, 0x85, 0x4a,
        0x1f, 0x26, 0xe6, 0x8e, 0xb2, 0x6f, 0xcd, 0x3d,
        0x03, 0xf1, 0x17, 0x70, 0x3b, 0x52, 0x37, 0x70,
        0x08, 0x39, 0xb1, 0xbc, 0xa8, 0x7c, 0x5b, 0xef,
        0x7e, 0xa6, 0xcf, 0x07, 0x67, 0x52, 0xc5, 0xc9,
        0xde, 0xf0, 0xff, 0xb3, 0x45, 0x63, 0x7f, 0x7e,
        0x50, 0x1d, 0x2d, 0xdc, 0x31, 0x61, 0x7e, 0x28,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x1a, 0x6e, 0x72, 0xe2, 0x60, 0x15, 0xc3, 0x0b,
        0x63, 0x36, 0xcc, 0xeb, 0x7c, 0xd5, 0xe8, 0x15,
        0x4b, 0x63, 0x9f, 0x65, 0x3d, 0x58, 0xe1, 0x12,
        0x39, 0xd2, 0x34, 0xbd, 0xd1, 0xc6, 0xcd, 0xe5,
        0xb7, 0x4f, 0x65, 0x39, 0xec, 0xf8, 0x4f, 0xd4,
        0xff, 0x0c, 0x52, 0x69, 0x8a, 0xf2, 0x8f, 0xda,
        0x88, 0x97, 0x5f, 0xbc, 0xe3, 0xc0, 0x26, 0x05,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs125_ProduceCorrectResult) {

    const u8 s[] = {
        0xeb, 0xb3, 0x88, 0xed, 0xe1, 0x75, 0xd9, 0x6a,
        0x18, 0x20, 0x25, 0x08, 0x64, 0xa8, 0x24, 0xfb,
        0x2f, 0xa6, 0xa3, 0x79, 0xc7, 0xe5, 0x5b, 0x62,
        0x59, 0x02, 0x14, 0xd7, 0x2a, 0xee, 0x83, 0x5f,
        0x98, 0x56, 0xca, 0xfc, 0xcf, 0x45, 0x4e, 0x44,
        0xce, 0x3a, 0x52, 0xe0, 0xb8, 0x8d, 0xc0, 0x0a,
        0xea, 0xc4, 0xe2, 0x91, 0x9f, 0xc7, 0x17, 0x27,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x8e, 0x8f, 0x7c, 0xba, 0xd8, 0x4f, 0x8f, 0xd6,
        0xa2, 0xbb, 0xb9, 0x4b, 0x1d, 0xeb, 0xcf, 0x76,
        0x06, 0x96, 0xc1, 0xd1, 0x47, 0x9a, 0x13, 0x61,
        0xbc, 0xb9, 0xcb, 0x0a, 0xf3, 0x8b, 0x45, 0xa1,
        0x31, 0x89, 0xd9, 0x3c, 0x45, 0xbf, 0x99, 0xfd,
        0x42, 0xbd, 0x66, 0x91, 0xad, 0xd9, 0x7f, 0xe9,
        0x62, 0x95, 0x71, 0x6e, 0x6c, 0x0d, 0xde, 0xdb,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs126_ProduceCorrectResult) {

    const u8 s[] = {
        0x85, 0x0c, 0x6e, 0x4b, 0x1f, 0x0c, 0x94, 0xa2,
        0xf7, 0x5c, 0x83, 0x40, 0xc8, 0x0e, 0xe5, 0x3f,
        0x6e, 0xcc, 0x98, 0x8e, 0xb5, 0xd1, 0x63, 0x6c,
        0xa4, 0x08, 0x39, 0x6a, 0x9e, 0x52, 0x26, 0xfe,
        0x65, 0x2a, 0x35, 0x50, 0xba, 0xe0, 0xe7, 0xc1,
        0xe2, 0xf0, 0xd2, 0x25, 0x8d, 0x98, 0xfd, 0x42,
        0x63, 0xe7, 0x73, 0x68, 0x14, 0x47, 0x7c, 0x03,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0x64, 0x6c, 0x50, 0xe0, 0xbf, 0xc8, 0x9d, 0x24,
        0xb7, 0x7a, 0x9b, 0x37, 0x0d, 0x73, 0xfc, 0x23,
        0xee, 0xf5, 0xc4, 0x98, 0x98, 0xde, 0x06, 0xac,
        0x47, 0x0e, 0x1e, 0x62, 0xe6, 0x35, 0xe7, 0xce,
        0xd8, 0x0c, 0xf9, 0x9e, 0x6f, 0x2d, 0x77, 0xba,
        0xf0, 0x86, 0xbc, 0x0a, 0x03, 0x0e, 0xea, 0x8b,
        0xe5, 0xc3, 0x09, 0x24, 0x2f, 0x21, 0x7b, 0xbc,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs127_ProduceCorrectResult) {

    const u8 s[] = {
        0x31, 0x36, 0x57, 0xa6, 0x07, 0x35, 0xe0, 0x72,
        0x4f, 0xd9, 0xa6, 0x60, 0xa1, 0xd5, 0x6c, 0x6e,
        0x48, 0xde, 0x46, 0x58, 0x88, 0xfe, 0xa6, 0x5e,
        0x23, 0xa5, 0x06, 0xd3, 0x5e, 0x1f, 0x6c, 0xfd,
        0x4d, 0x5f, 0xb3, 0xa7, 0xd0, 0x96, 0x18, 0xdc,
        0xbc, 0x11, 0x90, 0x5e, 0x24, 0xb7, 0x17, 0x9d,
        0x56, 0x90, 0x5e, 0x70, 0x38, 0xec, 0xd5, 0x18,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xab, 0xbe, 0x5d, 0x1d, 0x40, 0xc6, 0x71, 0xa5,
        0x03, 0x6a, 0x0f, 0x66, 0xe2, 0x5b, 0xdc, 0xd8,
        0x15, 0x9f, 0x2c, 0xb9, 0x10, 0x8b, 0x78, 0x06,
        0x9e, 0x9f, 0xf8, 0x93, 0x47, 0xfd, 0xb5, 0x62,
        0xa2, 0x63, 0x3f, 0x99, 0x45, 0xb9, 0xdc, 0xac,
        0x97, 0x46, 0x3b, 0xcc, 0xfa, 0x50, 0x87, 0xc9,
        0x7d, 0xb3, 0x13, 0xb8, 0xba, 0x27, 0xf6, 0xdd,
        0x00
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}

TEST(POINTS_ED448, MultiplyBasepoint_RandomlyGeneratedInputs128_ProduceCorrectResult) {

    const u8 s[] = {
        0x73, 0x51, 0xf4, 0x2c, 0xe0, 0xf1, 0xa5, 0x33,
        0x37, 0x2b, 0x38, 0x5f, 0x8a, 0x83, 0xa9, 0xa2,
        0x75, 0x93, 0x88, 0xae, 0x5b, 0xcd, 0xb0, 0x21,
        0xf2, 0x90, 0xaf, 0xda, 0xb1, 0x4b, 0x3c, 0xa1,
        0x99, 0x0a, 0xa9, 0xa5, 0x13, 0x56, 0x85, 0x16,
        0xc1, 0x9e, 0x89, 0xed, 0xde, 0x3d, 0xda, 0xf4,
        0x10, 0xd9, 0xc1, 0x8d, 0x4f, 0x38, 0x2b, 0x04,
        0x00
    };
    point output;
    u8 encoded_output[57];
    u8 expected_output[] = {
        0xf9, 0xa5, 0xeb, 0x8f, 0x6e, 0x1d, 0xa8, 0xda,
        0xe7, 0xbe, 0xd4, 0x26, 0xdb, 0xe8, 0x1a, 0xf8,
        0x5c, 0x7b, 0xce, 0x38, 0x60, 0x47, 0xa5, 0xfc,
        0xde, 0xcf, 0x0a, 0x89, 0x4e, 0xbc, 0xf2, 0x9b,
        0x64, 0xe4, 0x7f, 0x9f, 0x50, 0x9b, 0xc6, 0xe5,
        0x1f, 0x6c, 0x01, 0x0b, 0x82, 0x51, 0x2b, 0x1b,
        0x0c, 0x62, 0x2f, 0xe8, 0xb0, 0x96, 0x85, 0x6d,
        0x80
    };
    ed448_group_ops.multiply_basepoint(&output, s);
    ed448_group_ops.encode(encoded_output, &output);
    MEMCMP_EQUAL(expected_output, encoded_output, sizeof(encoded_output));
}
