#include <CppUTest/TestHarness.h>
#include <scalars/scalars.h>

TEST_GROUP(SCALARS_ED25519) {

};

TEST(SCALARS_ED25519, IsCanonical_AllBytesLessThanOrEqualToOrder_ShouldReturnTrue) {

    const u8 input[] = {
        0xec, 0xd2, 0xf4, 0x5b, 0x1b, 0x62, 0x11, 0x57,
        0xd5, 0x9b, 0xf6, 0xaa, 0xdd, 0xf8, 0xdd, 0x13,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    int canonical = ed25519_scalar_ops.is_canonical(input);
    CHECK_EQUAL(1, canonical);
}

TEST(SCALARS_ED25519, IsCanonical_CanonicalButSomeBytesLargerThanOrder_ShouldReturnTrue) {

    const u8 input[] = {
        0xef, 0xdd, 0xff, 0x55, 0x1a, 0x66, 0x12, 0x58,
        0xdd, 0x9c, 0xf7, 0xa2, 0xee, 0xff, 0xdd, 0x13,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10
    };
    int canonical = ed25519_scalar_ops.is_canonical(input);
    CHECK_EQUAL(1, canonical);
}

TEST(SCALARS_ED25519, IsCanonical_CanonicalButMostBytesEqualToOrder_ShouldReturnTrue) {

    const u8 input[] = {
        0xec, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58,
        0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10
    };
    int canonical = ed25519_scalar_ops.is_canonical(input);
    CHECK_EQUAL(1, canonical);
}

TEST(SCALARS_ED25519, IsCanonical_OneLargerThanOrder_ShouldReturnFalse) {

    const u8 input[] = {
        0xee, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58,
        0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10
    };
    int canonical = ed25519_scalar_ops.is_canonical(input);
    CHECK_EQUAL(0, canonical);
}

TEST(SCALARS_ED25519, IsCanonical_EqualToOrder_ShouldReturnFalse) {

    const u8 input[] = {
        0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58,
        0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10
    };
    int canonical = ed25519_scalar_ops.is_canonical(input);
    CHECK_EQUAL(0, canonical);
}

TEST(SCALARS_ED25519, Reduce_MuchSmallerThanOrder_NoOp) {

    u8 input[] = {
        0xe0, 0xd0, 0xf0, 0x50, 0x10, 0x60, 0x10, 0x50,
        0xd0, 0x90, 0xf0, 0xa0, 0xd0, 0xf0, 0xd0, 0x10,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const u8 expected[] = {
        0xe0, 0xd0, 0xf0, 0x50, 0x10, 0x60, 0x10, 0x50,
        0xd0, 0x90, 0xf0, 0xa0, 0xd0, 0xf0, 0xd0, 0x10,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10
    };
    ed25519_scalar_ops.reduce(input);
    MEMCMP_EQUAL(expected, input, sizeof(expected));
}

TEST(SCALARS_ED25519, Reduce_EqualTo2To252_NoOp) {

    u8 input[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const u8 expected[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10
    };
    ed25519_scalar_ops.reduce(input);
    MEMCMP_EQUAL(expected, input, sizeof(expected));
}

TEST(SCALARS_ED25519, Reduce_EqualToOrder_ReduceToZero) {

    u8 input[] = {
        0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58,
        0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const u8 expected[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    ed25519_scalar_ops.reduce(input);
    MEMCMP_EQUAL(expected, input, sizeof(expected));
}

TEST(SCALARS_ED25519, Reduce_EqualToTwiceTheOrder_ReduceToZero) {

    u8 input[] = {
        0xda, 0xa7, 0xeb, 0xb9, 0x34, 0xc6, 0x24, 0xb0,
        0xac, 0x39, 0xef, 0x45, 0xbd, 0xf3, 0xbd, 0x29,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const u8 expected[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    ed25519_scalar_ops.reduce(input);
    MEMCMP_EQUAL(expected, input, sizeof(expected));
}

TEST(SCALARS_ED25519, Reduce_EqualToOrderPlusOne_ReduceToOne) {

    u8 input[] = {
        0xee, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58,
        0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const u8 expected[] = {
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    ed25519_scalar_ops.reduce(input);
    MEMCMP_EQUAL(expected, input, sizeof(expected));
}

TEST(SCALARS_ED25519, Reduce_EqualToOrderMinusOne_NoOp) {

    u8 input[] = {
        0xec, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58,
        0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    const u8 expected[] = {
        0xec, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58,
        0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10
    };
    ed25519_scalar_ops.reduce(input);
    MEMCMP_EQUAL(expected, input, sizeof(expected));
}

TEST(SCALARS_ED25519, Reduce_MaxPossibleInput_ReduceCorrectly) {

    u8 input[] = {
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
    };
    const u8 expected[] = {
        0x00, 0x0f, 0x9c, 0x44, 0xe3, 0x11, 0x06, 0xa4,
        0x47, 0x93, 0x85, 0x68, 0xa7, 0x1b, 0x0e, 0xd0,
        0x65, 0xbe, 0xf5, 0x17, 0xd2, 0x73, 0xec, 0xce,
        0x3d, 0x9a, 0x30, 0x7c, 0x1b, 0x41, 0x99, 0x03
    };
    ed25519_scalar_ops.reduce(input);
    MEMCMP_EQUAL(expected, input, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs1_ProduceCorrectResult) {

    const u8 a[] = {
        0xc0, 0x9f, 0x5e, 0xb7, 0xc6, 0x05, 0xbd, 0x23,
        0x02, 0x39, 0x16, 0x65, 0xa7, 0x6b, 0x86, 0xf2,
        0x8a, 0x5c, 0x11, 0xb6, 0xe3, 0xf7, 0xd1, 0xe1,
        0x73, 0xbe, 0x32, 0x17, 0x01, 0x33, 0xa9, 0x02
    };
    const u8 b[] = {
        0x25, 0xdc, 0xec, 0x1c, 0x6b, 0x46, 0xfd, 0xa0,
        0x23, 0x56, 0x93, 0x14, 0x59, 0xbf, 0xf7, 0x24,
        0x96, 0xc3, 0x91, 0x3c, 0xd9, 0x15, 0x07, 0x20,
        0xb3, 0x38, 0xd7, 0xa2, 0xfb, 0x58, 0xa0, 0x00
    };
    const u8 c[] = {
        0x6f, 0x12, 0x53, 0x2c, 0xbf, 0x2c, 0x72, 0xe9,
        0x80, 0x06, 0x95, 0x95, 0x8c, 0xd2, 0x12, 0x7f,
        0x8f, 0x10, 0xb0, 0x3f, 0x5b, 0x15, 0xab, 0x03,
        0xed, 0x25, 0x60, 0x6b, 0xa3, 0x52, 0x31, 0x03
    };
    u8 output[32];
    const u8 expected[] = {
        0xf0, 0xe7, 0x25, 0x65, 0x24, 0xd6, 0xd0, 0x04,
        0x0e, 0xcb, 0xff, 0xca, 0x27, 0xbc, 0xcb, 0x4f,
        0xcd, 0x29, 0xd1, 0x2b, 0x2e, 0xe6, 0xf1, 0xa4,
        0xba, 0x4c, 0xc6, 0x24, 0x85, 0xa9, 0x01, 0x02
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs2_ProduceCorrectResult) {

    const u8 a[] = {
        0x8a, 0x90, 0x86, 0x95, 0xed, 0xee, 0xa0, 0x5d,
        0x15, 0x53, 0x80, 0x7f, 0x63, 0xaa, 0x07, 0x86,
        0xd3, 0xf1, 0x44, 0x53, 0x7d, 0xb8, 0x43, 0x2c,
        0xf6, 0xeb, 0xa4, 0xdc, 0xe6, 0x28, 0x76, 0x0f
    };
    const u8 b[] = {
        0x0e, 0x24, 0x9b, 0x47, 0x36, 0x13, 0x65, 0xf6,
        0x00, 0x52, 0xdb, 0x58, 0xde, 0x48, 0x45, 0x30,
        0xa8, 0x35, 0x3c, 0x50, 0xb7, 0x34, 0xda, 0x6b,
        0x0b, 0xe3, 0x7b, 0xbb, 0xf0, 0x56, 0xac, 0x02
    };
    const u8 c[] = {
        0x4e, 0x00, 0x60, 0x9e, 0x64, 0x18, 0x2d, 0x37,
        0x75, 0x34, 0x60, 0x72, 0xa3, 0x41, 0x1f, 0x16,
        0xb1, 0xff, 0xf6, 0xf0, 0xc1, 0xb3, 0x76, 0x1f,
        0xdd, 0x17, 0x3d, 0x9c, 0x4a, 0xbf, 0xf1, 0x08
    };
    u8 output[32];
    const u8 expected[] = {
        0x9e, 0x90, 0xe3, 0x64, 0xda, 0x7f, 0xf7, 0xf4,
        0x4a, 0x68, 0x3d, 0xb9, 0xe7, 0x48, 0xe4, 0xf3,
        0x16, 0x8c, 0x3a, 0x92, 0x58, 0xec, 0x52, 0x52,
        0x5a, 0xbf, 0x56, 0x56, 0x0a, 0x36, 0x70, 0x02
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs3_ProduceCorrectResult) {

    const u8 a[] = {
        0xf2, 0x24, 0x11, 0xf9, 0x97, 0x91, 0xa9, 0x60,
        0x79, 0x3a, 0x21, 0x6a, 0xa1, 0x2b, 0x3d, 0x5d,
        0x71, 0xce, 0xaf, 0x99, 0x34, 0xfe, 0x38, 0xa3,
        0x6e, 0xfa, 0x59, 0xd7, 0xd0, 0x59, 0x6d, 0x03
    };
    const u8 b[] = {
        0xe3, 0x08, 0x12, 0xf9, 0xa9, 0x38, 0x50, 0x82,
        0x95, 0xcb, 0x44, 0x7c, 0x2b, 0xbd, 0x91, 0x40,
        0x96, 0x14, 0x8b, 0x26, 0x50, 0x5c, 0x3b, 0xf6,
        0xf0, 0x3f, 0x19, 0xb9, 0xb5, 0xc4, 0xf0, 0x04
    };
    const u8 c[] = {
        0x75, 0x82, 0xf0, 0x8a, 0xe9, 0xc0, 0x80, 0x00,
        0x07, 0xb2, 0xab, 0xe3, 0x73, 0xf1, 0x1e, 0xc7,
        0x39, 0xf6, 0xd8, 0x1f, 0x9d, 0xff, 0xcf, 0x66,
        0xcc, 0x8a, 0x94, 0x85, 0x33, 0xa9, 0x7e, 0x02
    };
    u8 output[32];
    const u8 expected[] = {
        0x63, 0xcf, 0xe7, 0xe0, 0x59, 0x64, 0xe4, 0x56,
        0x16, 0x9a, 0xcb, 0xe5, 0x1c, 0x5f, 0x72, 0x08,
        0xe4, 0x16, 0x2d, 0xc3, 0xa3, 0xcf, 0xd8, 0x6f,
        0xbc, 0x88, 0x2c, 0x7d, 0x3f, 0xc1, 0x42, 0x07
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs4_ProduceCorrectResult) {

    const u8 a[] = {
        0xb1, 0x75, 0x68, 0x4a, 0x5e, 0xd0, 0x91, 0x5c,
        0x6b, 0xc3, 0xd5, 0xf4, 0xa1, 0xf1, 0x0c, 0x37,
        0xac, 0x67, 0x9e, 0x64, 0x96, 0x49, 0x22, 0x65,
        0x7f, 0xd9, 0x2d, 0x3f, 0xea, 0x30, 0x16, 0x00
    };
    const u8 b[] = {
        0x5d, 0x79, 0x0d, 0xdf, 0xb0, 0xff, 0xb2, 0x5d,
        0x6c, 0x91, 0xcc, 0x9b, 0xf9, 0x5b, 0x7b, 0x5c,
        0x59, 0x08, 0xd1, 0x33, 0x70, 0xfe, 0x1c, 0x8b,
        0x1e, 0xc0, 0xe2, 0xd8, 0xd4, 0x81, 0xbc, 0x00
    };
    const u8 c[] = {
        0xde, 0xe5, 0x1e, 0x80, 0x74, 0x23, 0x50, 0x97,
        0x36, 0xab, 0x13, 0xb4, 0x5c, 0x71, 0x19, 0x54,
        0x01, 0x45, 0xcf, 0x33, 0xf4, 0x45, 0xc4, 0x50,
        0x5f, 0xf1, 0x51, 0xae, 0x38, 0x0c, 0xbc, 0x05
    };
    u8 output[32];
    const u8 expected[] = {
        0xcc, 0xa8, 0xb8, 0x0a, 0xcf, 0x58, 0x75, 0xa8,
        0xed, 0x4e, 0x76, 0x96, 0xc3, 0xff, 0x6a, 0x98,
        0x73, 0x7a, 0xc0, 0x8f, 0x60, 0x89, 0xf7, 0x77,
        0xa3, 0x2f, 0x4b, 0xc0, 0x8d, 0x5e, 0xf9, 0x0c
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs5_ProduceCorrectResult) {

    const u8 a[] = {
        0x54, 0x67, 0x20, 0x25, 0x7f, 0x52, 0xe8, 0x15,
        0xb7, 0x9d, 0x33, 0xab, 0x7e, 0x63, 0xb7, 0x5f,
        0x62, 0x61, 0x08, 0x8d, 0x81, 0x28, 0x45, 0xde,
        0xbf, 0x2e, 0x08, 0x38, 0xca, 0xe8, 0xde, 0x08
    };
    const u8 b[] = {
        0x94, 0x68, 0xe8, 0x80, 0x1d, 0x86, 0x4a, 0x76,
        0x7f, 0xb9, 0x1d, 0x1f, 0x7d, 0xa4, 0x50, 0xc1,
        0x0f, 0xa6, 0xb7, 0x35, 0xd6, 0x7a, 0xc7, 0xc7,
        0xe6, 0xaa, 0x15, 0x6a, 0xfe, 0xef, 0xe5, 0x08
    };
    const u8 c[] = {
        0xf1, 0xc6, 0x51, 0x2c, 0x2f, 0x9d, 0x83, 0x7e,
        0xf4, 0xc5, 0x23, 0x30, 0x20, 0x49, 0x5b, 0xa0,
        0x92, 0x21, 0xa5, 0xac, 0x36, 0x30, 0x73, 0x7e,
        0x48, 0x10, 0x1e, 0x03, 0x65, 0x93, 0x9d, 0x09
    };
    u8 output[32];
    const u8 expected[] = {
        0xff, 0x8e, 0x94, 0x97, 0x0c, 0xe1, 0x85, 0x4f,
        0x90, 0x38, 0x29, 0x93, 0x17, 0x42, 0x1e, 0x94,
        0x42, 0xeb, 0xd5, 0xbc, 0xaa, 0xa3, 0x86, 0xaa,
        0x27, 0x3a, 0x54, 0x3f, 0x23, 0xbb, 0xf9, 0x01
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs6_ProduceCorrectResult) {

    const u8 a[] = {
        0x54, 0xfa, 0x2d, 0xe2, 0x74, 0x31, 0xfe, 0x4a,
        0x9b, 0x3d, 0xc7, 0xb9, 0x1e, 0xd4, 0x58, 0x79,
        0xeb, 0x45, 0x6d, 0x6d, 0xec, 0x89, 0x3a, 0x2d,
        0x5d, 0x19, 0x7b, 0x64, 0x5f, 0x9c, 0x0f, 0x06
    };
    const u8 b[] = {
        0x50, 0x95, 0x30, 0x4f, 0x81, 0x4c, 0x9f, 0x7f,
        0x83, 0x97, 0x5b, 0x30, 0xef, 0xde, 0x51, 0x78,
        0xf6, 0x6e, 0xac, 0xf2, 0x94, 0x47, 0xc6, 0xee,
        0x18, 0xdf, 0x9d, 0x29, 0xb5, 0x59, 0x12, 0x0a
    };
    const u8 c[] = {
        0x6a, 0x0a, 0xe9, 0xaf, 0xe7, 0x2c, 0x5e, 0xb8,
        0x60, 0xb5, 0x15, 0x2d, 0x02, 0x2f, 0x7f, 0xf2,
        0xb3, 0xe5, 0x57, 0x55, 0x14, 0x1b, 0x7f, 0xcb,
        0xa0, 0x95, 0xae, 0xa0, 0xf8, 0xea, 0xaa, 0x0e
    };
    u8 output[32];
    const u8 expected[] = {
        0x70, 0x28, 0x57, 0x5d, 0x8f, 0x57, 0x1c, 0xa1,
        0x06, 0x16, 0x7b, 0x03, 0x54, 0x54, 0xa7, 0xf5,
        0x57, 0x43, 0x55, 0xb8, 0x77, 0xd3, 0x89, 0x65,
        0xff, 0xb6, 0x75, 0xce, 0x27, 0x23, 0x15, 0x0d
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs7_ProduceCorrectResult) {

    const u8 a[] = {
        0xd1, 0x7a, 0xe8, 0xe2, 0x18, 0xe9, 0xba, 0xdc,
        0x6e, 0x0a, 0x92, 0xbc, 0x01, 0x78, 0x38, 0xf3,
        0x9b, 0x88, 0x04, 0x41, 0x0a, 0x6e, 0x9a, 0x92,
        0xa9, 0xca, 0x40, 0x8d, 0x7a, 0x36, 0xdb, 0x0a
    };
    const u8 b[] = {
        0xb9, 0x68, 0xa1, 0x44, 0x03, 0xa2, 0x64, 0x66,
        0xf5, 0x3f, 0x74, 0x3f, 0x70, 0xd0, 0xb6, 0xd2,
        0x90, 0xd0, 0x4c, 0x01, 0xca, 0x68, 0x35, 0xd0,
        0x16, 0x55, 0x5f, 0xb0, 0xfb, 0x25, 0xdd, 0x04
    };
    const u8 c[] = {
        0x6e, 0xfe, 0x73, 0xaa, 0x3d, 0x18, 0x91, 0x3c,
        0xce, 0x68, 0xf8, 0x82, 0xd6, 0x11, 0x29, 0x84,
        0xed, 0x40, 0x37, 0xf0, 0x52, 0x23, 0x42, 0x51,
        0xef, 0x52, 0x21, 0x56, 0x13, 0x97, 0xd8, 0x0a
    };
    u8 output[32];
    const u8 expected[] = {
        0x42, 0x92, 0x06, 0x93, 0x2d, 0x80, 0x6c, 0x26,
        0xfe, 0xa0, 0xee, 0xbe, 0xb9, 0xd5, 0x55, 0xd2,
        0x43, 0x37, 0xfe, 0x5d, 0xc9, 0xe1, 0x61, 0x39,
        0x22, 0xc9, 0xbd, 0xe4, 0x1f, 0xf8, 0xe4, 0x00
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs8_ProduceCorrectResult) {

    const u8 a[] = {
        0x9b, 0x27, 0xaa, 0x48, 0xac, 0xfd, 0xb9, 0x47,
        0x2c, 0xf4, 0x5c, 0xd5, 0x38, 0x4e, 0x47, 0xf6,
        0x19, 0xd8, 0x5f, 0x50, 0x25, 0xb8, 0xe5, 0x72,
        0xa8, 0xfc, 0x2f, 0xf3, 0xea, 0x74, 0xd5, 0x0a
    };
    const u8 b[] = {
        0xde, 0x7d, 0x2a, 0xf5, 0xd0, 0xd8, 0xfe, 0x37,
        0xcb, 0x44, 0xa2, 0xdb, 0x3c, 0xc1, 0x1b, 0xa3,
        0xe1, 0x5d, 0x59, 0x72, 0x78, 0x5a, 0xf0, 0x73,
        0x40, 0x22, 0xad, 0x65, 0x57, 0x0b, 0xd4, 0x04
    };
    const u8 c[] = {
        0x2d, 0x0e, 0xc2, 0x40, 0x67, 0xc6, 0x07, 0xcd,
        0xbd, 0xe3, 0xf2, 0x02, 0x2b, 0x57, 0x53, 0xfe,
        0x94, 0xef, 0xfa, 0x00, 0x1c, 0x76, 0xea, 0xce,
        0x7f, 0xac, 0x60, 0x61, 0x78, 0xb7, 0x65, 0x04
    };
    u8 output[32];
    const u8 expected[] = {
        0xe5, 0xcd, 0x98, 0x2d, 0x5b, 0xd5, 0x88, 0x12,
        0x34, 0x20, 0x77, 0x35, 0xf5, 0xd9, 0xde, 0x65,
        0xfa, 0x7f, 0x57, 0xf4, 0x35, 0x76, 0x1d, 0xe5,
        0xb2, 0x8a, 0x22, 0x2a, 0xdd, 0x60, 0x48, 0x06
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs9_ProduceCorrectResult) {

    const u8 a[] = {
        0x97, 0x27, 0x5c, 0x96, 0xe1, 0x4b, 0xca, 0xd7,
        0xb2, 0x31, 0xc0, 0x9a, 0xaf, 0xf0, 0x80, 0x3e,
        0xc5, 0x1d, 0xd7, 0x80, 0xce, 0xc2, 0x09, 0x69,
        0x8c, 0x15, 0xbd, 0x45, 0x3e, 0x23, 0x01, 0x0a
    };
    const u8 b[] = {
        0x68, 0x78, 0xa4, 0x19, 0x12, 0x7c, 0xf5, 0x6b,
        0xc4, 0xcf, 0xb4, 0xb8, 0xe7, 0x2f, 0x3e, 0xd6,
        0xdf, 0x89, 0xb1, 0x3e, 0x53, 0x6f, 0xc1, 0x80,
        0xcd, 0x98, 0x5a, 0x1c, 0xf6, 0x8e, 0x57, 0x01
    };
    const u8 c[] = {
        0x9a, 0xd6, 0xc9, 0xa5, 0x0f, 0xce, 0xab, 0x97,
        0x4c, 0x9b, 0xef, 0xcf, 0x7f, 0xc4, 0xca, 0x4f,
        0xc4, 0x53, 0x44, 0xcd, 0x9d, 0x32, 0x33, 0x45,
        0x76, 0xb8, 0x35, 0x9c, 0x18, 0xbe, 0x21, 0x03
    };
    u8 output[32];
    const u8 expected[] = {
        0xe6, 0xf0, 0xb5, 0xe5, 0x9e, 0xf1, 0x62, 0xb2,
        0xa6, 0x84, 0xd2, 0x04, 0x42, 0x24, 0xff, 0x63,
        0xc0, 0x7e, 0x6f, 0x97, 0x30, 0x2a, 0x69, 0x9f,
        0x50, 0x00, 0x82, 0xcf, 0x07, 0xb8, 0x99, 0x07
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs10_ProduceCorrectResult) {

    const u8 a[] = {
        0xe9, 0xe9, 0xd0, 0xd8, 0x8f, 0xe5, 0x69, 0x23,
        0x86, 0xfa, 0x9e, 0x17, 0x1d, 0x58, 0x2e, 0x74,
        0xb7, 0xc0, 0x9b, 0x7a, 0xeb, 0xa9, 0xc9, 0x4a,
        0x92, 0xd4, 0x46, 0xbf, 0x62, 0x6d, 0xde, 0x0c
    };
    const u8 b[] = {
        0xb7, 0x1b, 0xa6, 0x35, 0x29, 0x36, 0xd3, 0x5e,
        0x57, 0x53, 0xf5, 0x69, 0xea, 0xc0, 0x09, 0x85,
        0x97, 0x54, 0x85, 0x3b, 0x2a, 0x50, 0x80, 0x20,
        0xd9, 0xd0, 0xff, 0x87, 0xec, 0xf6, 0x4f, 0x03
    };
    const u8 c[] = {
        0x60, 0x54, 0x3f, 0x25, 0xde, 0xd3, 0x01, 0x4b,
        0x3e, 0x0d, 0xdd, 0xcf, 0x6d, 0xab, 0xdb, 0xe2,
        0xde, 0x1c, 0x06, 0xcb, 0x78, 0x20, 0xdd, 0x08,
        0x10, 0xb4, 0xf6, 0xbe, 0x48, 0x55, 0x17, 0x00
    };
    u8 output[32];
    const u8 expected[] = {
        0x70, 0x70, 0xeb, 0xf7, 0x30, 0x7e, 0x1c, 0x91,
        0xd9, 0x45, 0x44, 0x75, 0x59, 0x3e, 0x41, 0x2e,
        0xa3, 0xb4, 0xb9, 0xf5, 0x81, 0xa5, 0x27, 0x15,
        0x10, 0xca, 0xdb, 0x9d, 0xa1, 0xc0, 0x47, 0x00
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs11_ProduceCorrectResult) {

    const u8 a[] = {
        0x99, 0xfc, 0x19, 0xb8, 0x46, 0x30, 0x1a, 0x75,
        0x57, 0x70, 0x1a, 0x47, 0x03, 0xa6, 0xb5, 0xea,
        0xf9, 0x69, 0x71, 0x01, 0x8a, 0x2e, 0xcb, 0x27,
        0xb2, 0xb5, 0x19, 0xd0, 0x47, 0x04, 0xbc, 0x08
    };
    const u8 b[] = {
        0x95, 0xf3, 0x0c, 0xc2, 0x3e, 0x23, 0xee, 0xed,
        0x32, 0xc9, 0x73, 0xc7, 0x2e, 0xec, 0x40, 0x4e,
        0xe9, 0x8e, 0xae, 0x00, 0xf3, 0x42, 0x20, 0xae,
        0x31, 0x96, 0x66, 0x91, 0x64, 0x71, 0xc1, 0x00
    };
    const u8 c[] = {
        0x78, 0x4d, 0xe1, 0xe1, 0x7d, 0x85, 0x9f, 0x28,
        0x5c, 0xd4, 0xb6, 0x40, 0xdd, 0x91, 0xb9, 0x07,
        0x2f, 0x60, 0xaa, 0xad, 0x55, 0xf9, 0x26, 0x53,
        0x5e, 0xbd, 0xdf, 0x62, 0xd1, 0x38, 0x78, 0x0f
    };
    u8 output[32];
    const u8 expected[] = {
        0xf3, 0x44, 0xe1, 0xeb, 0x0d, 0xfc, 0x69, 0xb9,
        0x80, 0x82, 0x89, 0x16, 0x9c, 0x8c, 0x41, 0xc0,
        0x33, 0xb0, 0xcb, 0x12, 0xb3, 0xa2, 0xc6, 0xa2,
        0xbd, 0x9d, 0xbd, 0x32, 0x0e, 0x5c, 0x86, 0x0f
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs12_ProduceCorrectResult) {

    const u8 a[] = {
        0x92, 0xd1, 0xbb, 0xd3, 0xbf, 0xcd, 0xa0, 0x25,
        0x11, 0xe3, 0x5b, 0x38, 0xef, 0x22, 0x4e, 0x0f,
        0xbb, 0xa6, 0x3c, 0x55, 0xa8, 0xaf, 0x88, 0x94,
        0xc1, 0xc3, 0xb9, 0x23, 0x2b, 0x3b, 0x3f, 0x0b
    };
    const u8 b[] = {
        0xaa, 0xf1, 0x80, 0xfb, 0x63, 0x2f, 0xaf, 0x0e,
        0x7c, 0x29, 0xd2, 0x29, 0x18, 0xf6, 0x4c, 0xdc,
        0x3b, 0x0f, 0x96, 0x0f, 0x2b, 0x46, 0xad, 0x4b,
        0x8b, 0xb8, 0xda, 0x37, 0x4a, 0x32, 0xf2, 0x01
    };
    const u8 c[] = {
        0x85, 0xea, 0x44, 0xe5, 0x75, 0x64, 0x47, 0x5b,
        0x1b, 0x54, 0xdd, 0xa1, 0x79, 0xa9, 0x4e, 0xe0,
        0xa2, 0x94, 0x22, 0x8b, 0xde, 0x89, 0xa0, 0xb8,
        0xf6, 0x3b, 0x3a, 0xb7, 0xbb, 0xcb, 0x86, 0x09
    };
    u8 output[32];
    const u8 expected[] = {
        0xf5, 0x9b, 0xdf, 0x4d, 0x5f, 0x81, 0x12, 0xd6,
        0x85, 0xb9, 0x5a, 0xd4, 0x4a, 0xc4, 0x99, 0x47,
        0xdf, 0x35, 0xd8, 0x34, 0xc4, 0x62, 0x92, 0x2e,
        0x97, 0xe4, 0x93, 0xa9, 0x07, 0x74, 0x0b, 0x0c
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs13_ProduceCorrectResult) {

    const u8 a[] = {
        0x7d, 0xac, 0xf5, 0xaa, 0x5a, 0x42, 0x3e, 0xca,
        0x2c, 0x68, 0x00, 0x45, 0x45, 0x32, 0x21, 0xd7,
        0x55, 0xb7, 0x89, 0xcd, 0x7f, 0x6f, 0x4e, 0x5d,
        0xd6, 0x2c, 0x81, 0xa3, 0x01, 0xe2, 0xa3, 0x08
    };
    const u8 b[] = {
        0x5b, 0x96, 0x91, 0x40, 0x5d, 0x38, 0x06, 0x3f,
        0x7b, 0xaf, 0x72, 0xb6, 0x70, 0xc5, 0x91, 0x9d,
        0xc1, 0xb5, 0xba, 0x02, 0x24, 0x72, 0x64, 0x77,
        0xdd, 0xe7, 0x52, 0x0a, 0x7d, 0x1c, 0x82, 0x0a
    };
    const u8 c[] = {
        0x42, 0x3a, 0x9c, 0xf4, 0x25, 0xc0, 0x6c, 0x5d,
        0xa8, 0x52, 0xce, 0xa4, 0xf3, 0xeb, 0x79, 0x3b,
        0xe9, 0x1e, 0xb1, 0xaa, 0xcb, 0x38, 0x30, 0x2f,
        0x7b, 0xdd, 0x2b, 0x4f, 0x87, 0x4e, 0x81, 0x04
    };
    u8 output[32];
    const u8 expected[] = {
        0x49, 0xe6, 0x4c, 0x66, 0xda, 0xe0, 0xdf, 0xef,
        0x38, 0x00, 0x8e, 0xdd, 0xea, 0xa7, 0x21, 0x29,
        0x6d, 0x69, 0x86, 0x37, 0x36, 0xf1, 0x57, 0xec,
        0x5f, 0x5b, 0x11, 0x48, 0xba, 0xd2, 0x18, 0x0a
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs14_ProduceCorrectResult) {

    const u8 a[] = {
        0x4a, 0xd3, 0x9d, 0xb7, 0xbe, 0xfe, 0x50, 0xbb,
        0x4e, 0xd9, 0xc3, 0xe0, 0x3f, 0x06, 0x60, 0x22,
        0x7a, 0xe5, 0x8b, 0x4a, 0x00, 0x1e, 0x06, 0x4e,
        0xc4, 0xfc, 0xda, 0x2e, 0xcf, 0x50, 0x9e, 0x08
    };
    const u8 b[] = {
        0x24, 0x54, 0xe7, 0x52, 0x39, 0xa3, 0x5e, 0x12,
        0x08, 0x85, 0x49, 0x15, 0xfa, 0x93, 0xa7, 0xb4,
        0x39, 0x56, 0x77, 0x4c, 0x6e, 0x5b, 0x0d, 0x74,
        0xf1, 0x17, 0x2d, 0x19, 0x18, 0x84, 0xd7, 0x02
    };
    const u8 c[] = {
        0x76, 0x46, 0xc3, 0xd3, 0xe9, 0xa3, 0x2e, 0xf8,
        0xb0, 0x7a, 0xe1, 0x70, 0x92, 0x55, 0xa2, 0xb1,
        0x33, 0xd3, 0x37, 0xa6, 0x39, 0x02, 0x66, 0x7d,
        0x87, 0x6f, 0x3f, 0xf5, 0x50, 0x6b, 0x4d, 0x04
    };
    u8 output[32];
    const u8 expected[] = {
        0xb0, 0xaf, 0xc1, 0x8e, 0xb5, 0x90, 0xe8, 0xf3,
        0x1d, 0xe2, 0x39, 0xdd, 0x94, 0x1d, 0x72, 0xf2,
        0x20, 0xe2, 0x72, 0xfb, 0x71, 0x2b, 0x96, 0xa8,
        0xae, 0x39, 0x93, 0x39, 0x13, 0x82, 0x37, 0x0e
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs15_ProduceCorrectResult) {

    const u8 a[] = {
        0xef, 0xe1, 0xf1, 0xc5, 0x5e, 0x0a, 0x1c, 0x95,
        0x06, 0x8d, 0x71, 0xff, 0x28, 0x5e, 0x0a, 0x84,
        0x16, 0x7e, 0x52, 0x0d, 0x63, 0x24, 0x0b, 0x56,
        0x45, 0xb0, 0x2c, 0xdd, 0xba, 0xc7, 0xa9, 0x05
    };
    const u8 b[] = {
        0x77, 0x70, 0x2b, 0x79, 0x96, 0xa1, 0x89, 0x24,
        0x9b, 0x17, 0xa8, 0x72, 0x4b, 0xf4, 0xc1, 0xd6,
        0x3c, 0xce, 0xff, 0x87, 0x2a, 0x24, 0x4f, 0x05,
        0xb8, 0xcb, 0xb6, 0xe4, 0x3a, 0xd9, 0xf3, 0x04
    };
    const u8 c[] = {
        0x11, 0xe9, 0x13, 0xf4, 0x72, 0xdb, 0x77, 0xa2,
        0x78, 0x52, 0xb7, 0x31, 0x40, 0xa0, 0x4f, 0xbb,
        0x6c, 0xdb, 0x0c, 0x9b, 0xf3, 0x47, 0x7c, 0x18,
        0xf6, 0x6b, 0xab, 0x14, 0x49, 0xe2, 0xa6, 0x09
    };
    u8 output[32];
    const u8 expected[] = {
        0xef, 0xd7, 0xb8, 0xa4, 0x6f, 0xed, 0xae, 0x40,
        0x88, 0xde, 0x7f, 0x7f, 0x7e, 0x2e, 0xa7, 0x94,
        0xbf, 0xf6, 0x1b, 0xcc, 0xd4, 0x71, 0x29, 0xfa,
        0x3d, 0xaf, 0x5f, 0xe1, 0x1c, 0xa9, 0x32, 0x0a
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs16_ProduceCorrectResult) {

    const u8 a[] = {
        0xa9, 0x97, 0x78, 0x90, 0x31, 0x5d, 0x64, 0xb4,
        0x01, 0x99, 0xbc, 0x20, 0xae, 0xc6, 0x87, 0xc2,
        0xe4, 0x8b, 0x64, 0x67, 0x61, 0x74, 0x4f, 0xb1,
        0xf0, 0x65, 0xa2, 0x3b, 0x84, 0x94, 0x76, 0x09
    };
    const u8 b[] = {
        0x12, 0x07, 0xaa, 0x9a, 0x81, 0x9b, 0x0b, 0x17,
        0x0f, 0x9d, 0x9d, 0x9a, 0x34, 0xe7, 0x4b, 0x33,
        0x03, 0x83, 0x85, 0x9c, 0xa2, 0x49, 0x41, 0xf2,
        0x05, 0x79, 0x86, 0xd7, 0xbe, 0x8b, 0xc5, 0x0e
    };
    const u8 c[] = {
        0x92, 0x38, 0xac, 0x2e, 0x83, 0x3a, 0x6e, 0x08,
        0x6a, 0x91, 0x95, 0x6b, 0x49, 0x94, 0x7b, 0xfe,
        0x41, 0xb2, 0xb6, 0xa1, 0x93, 0xdc, 0xf4, 0x2d,
        0x60, 0xc8, 0x33, 0xa6, 0x0b, 0x31, 0x68, 0x0c
    };
    u8 output[32];
    const u8 expected[] = {
        0x8c, 0xa4, 0x93, 0x4d, 0x39, 0xee, 0xae, 0xc6,
        0x9b, 0x67, 0x20, 0x4b, 0x95, 0x6e, 0x54, 0xdf,
        0x17, 0x71, 0xaf, 0xd8, 0x8f, 0x86, 0xd3, 0xe1,
        0xe0, 0xb5, 0xc0, 0x19, 0xf1, 0x96, 0x91, 0x0a
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs17_ProduceCorrectResult) {

    const u8 a[] = {
        0x63, 0xc3, 0x13, 0x34, 0x1a, 0xc2, 0x66, 0x50,
        0x26, 0xa6, 0x4f, 0xca, 0x6a, 0xe4, 0xf7, 0x74,
        0x7c, 0x3f, 0xeb, 0xe7, 0x2f, 0x06, 0x55, 0xb3,
        0x9d, 0x4b, 0x3d, 0xc0, 0x6b, 0xb0, 0x37, 0x04
    };
    const u8 b[] = {
        0xd7, 0x54, 0x3c, 0x2a, 0x13, 0x0c, 0x3c, 0xd5,
        0x42, 0x22, 0xe9, 0xc6, 0x4c, 0x4a, 0xbe, 0xea,
        0x29, 0x19, 0xd4, 0x2e, 0xdc, 0x82, 0x21, 0x13,
        0x6e, 0x73, 0x78, 0x4c, 0xdf, 0x1b, 0x54, 0x0a
    };
    const u8 c[] = {
        0x4f, 0x27, 0xa6, 0xc4, 0x50, 0x43, 0xb2, 0x73,
        0xf8, 0x11, 0x43, 0x99, 0xd4, 0x2a, 0x88, 0xb9,
        0x62, 0xb5, 0x93, 0x0f, 0x05, 0xbd, 0x5a, 0xe6,
        0xdb, 0x0d, 0x87, 0x97, 0x93, 0xf1, 0x68, 0x08
    };
    u8 output[32];
    const u8 expected[] = {
        0xb9, 0x16, 0x3e, 0x08, 0x16, 0xfc, 0x87, 0x58,
        0xcc, 0xc5, 0x63, 0xe4, 0xf4, 0x4a, 0x1e, 0x51,
        0xf4, 0xe0, 0x9f, 0x85, 0x2e, 0xe8, 0xcc, 0x6a,
        0xf8, 0xca, 0x23, 0xde, 0x51, 0xe3, 0x44, 0x02
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs18_ProduceCorrectResult) {

    const u8 a[] = {
        0xf8, 0x07, 0x96, 0x2b, 0x06, 0x79, 0x64, 0x73,
        0x37, 0x7f, 0x5a, 0x25, 0xe3, 0xed, 0x80, 0x2e,
        0x02, 0xa0, 0x72, 0x18, 0x3d, 0xe0, 0x33, 0x92,
        0x0e, 0x35, 0x42, 0xcd, 0xc5, 0xf2, 0xa7, 0x01
    };
    const u8 b[] = {
        0x6c, 0xa9, 0x0e, 0x31, 0x71, 0x1c, 0x18, 0x27,
        0xee, 0x74, 0xf6, 0x2b, 0x85, 0x2c, 0x33, 0x28,
        0x71, 0x8e, 0x7c, 0x0a, 0xc3, 0x8a, 0xfe, 0x79,
        0x3b, 0x48, 0x00, 0xcc, 0x8b, 0x62, 0x79, 0x05
    };
    const u8 c[] = {
        0xbe, 0x84, 0x4b, 0xa8, 0x81, 0x94, 0xaf, 0x06,
        0xf5, 0x17, 0x7e, 0x28, 0xab, 0x7b, 0xa9, 0xa1,
        0x06, 0x8c, 0x5b, 0x9b, 0x8e, 0xda, 0x87, 0x95,
        0x8d, 0xb1, 0x47, 0xdb, 0xda, 0x9c, 0x4c, 0x04
    };
    u8 output[32];
    const u8 expected[] = {
        0xc3, 0xa8, 0x43, 0xd3, 0x40, 0xf8, 0xe3, 0xad,
        0xb7, 0x45, 0x46, 0x9c, 0x5d, 0x58, 0x72, 0xdf,
        0xcb, 0x86, 0xcd, 0x76, 0x44, 0xa9, 0x24, 0x6f,
        0x57, 0x78, 0x60, 0xe6, 0x1c, 0x57, 0xe5, 0x04
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs19_ProduceCorrectResult) {

    const u8 a[] = {
        0xcd, 0x83, 0x2c, 0xec, 0x92, 0x56, 0x13, 0x5e,
        0xa0, 0xfd, 0x40, 0x4a, 0x75, 0x6f, 0x33, 0x5a,
        0x0d, 0xf9, 0x1e, 0x07, 0xb8, 0xdb, 0x61, 0xb0,
        0xad, 0x9c, 0x4a, 0xed, 0xaa, 0xc3, 0xa3, 0x09
    };
    const u8 b[] = {
        0xfd, 0x8c, 0xe8, 0x19, 0x3c, 0x27, 0x46, 0xbc,
        0xdc, 0x22, 0xae, 0x62, 0x04, 0x84, 0x01, 0x76,
        0x9d, 0xdd, 0x9e, 0x4a, 0x97, 0x90, 0xeb, 0x8e,
        0x43, 0x90, 0xc7, 0xe4, 0xe2, 0x8b, 0xae, 0x0d
    };
    const u8 c[] = {
        0xa8, 0x6d, 0xcb, 0x98, 0xe7, 0x92, 0x46, 0x79,
        0x5a, 0x40, 0x73, 0xc0, 0xb8, 0xd6, 0x5b, 0x44,
        0x22, 0x08, 0x57, 0x47, 0x78, 0xe1, 0xf6, 0x18,
        0x61, 0x34, 0x86, 0xdc, 0x36, 0xfc, 0xc6, 0x05
    };
    u8 output[32];
    const u8 expected[] = {
        0x94, 0x5e, 0x56, 0xeb, 0x12, 0xff, 0xe4, 0xe0,
        0xf2, 0x02, 0xbb, 0x55, 0x83, 0xf7, 0x59, 0x23,
        0x89, 0xfe, 0x3e, 0x4f, 0xc1, 0x35, 0xb4, 0xf7,
        0xc6, 0xa6, 0x4d, 0x1c, 0x9e, 0xea, 0x04, 0x03
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs20_ProduceCorrectResult) {

    const u8 a[] = {
        0xe7, 0xc9, 0xea, 0xde, 0xe2, 0x82, 0xe2, 0x40,
        0x89, 0x51, 0xd5, 0x9f, 0xa4, 0xcf, 0x39, 0xb9,
        0xbd, 0x86, 0x63, 0x2a, 0x2c, 0x42, 0x28, 0xf1,
        0xd8, 0x7c, 0x55, 0xbe, 0x53, 0x6f, 0xd2, 0x0a
    };
    const u8 b[] = {
        0x7e, 0x7b, 0x59, 0x90, 0xe1, 0x20, 0x90, 0xbe,
        0xb9, 0x0f, 0xd5, 0x8a, 0xa5, 0x2e, 0xdb, 0x67,
        0x0a, 0x4a, 0x48, 0x87, 0xd0, 0x3f, 0x27, 0x6d,
        0x52, 0x02, 0x2e, 0x47, 0x9d, 0xde, 0x8a, 0x01
    };
    const u8 c[] = {
        0x5c, 0xba, 0xa9, 0x75, 0x0c, 0x46, 0x56, 0xf5,
        0xf2, 0x9e, 0x3c, 0x0d, 0x36, 0x4b, 0x72, 0x7a,
        0xf5, 0x28, 0xf5, 0x74, 0xb0, 0x44, 0x6d, 0xc3,
        0x1f, 0x3f, 0x77, 0x0d, 0xd8, 0x8b, 0x5b, 0x0a
    };
    u8 output[32];
    const u8 expected[] = {
        0xda, 0x30, 0x2b, 0xfe, 0xfe, 0x55, 0xaa, 0xbd,
        0x8a, 0x63, 0xc9, 0xb6, 0xc4, 0x15, 0x2c, 0x70,
        0xe4, 0x22, 0x62, 0x96, 0xea, 0x54, 0xdf, 0xc1,
        0xf9, 0xd6, 0x57, 0x4b, 0x12, 0x42, 0x2f, 0x0f
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs21_ProduceCorrectResult) {

    const u8 a[] = {
        0x33, 0xd5, 0x72, 0xa2, 0x1e, 0xc0, 0xf4, 0x3c,
        0x05, 0x90, 0x90, 0xac, 0x2f, 0x3e, 0xfd, 0x59,
        0xdb, 0x4c, 0x76, 0xa1, 0xb4, 0xda, 0x7b, 0xc9,
        0x56, 0x87, 0xd0, 0xc1, 0x29, 0x1a, 0x8c, 0x05
    };
    const u8 b[] = {
        0xb6, 0x83, 0x2d, 0x11, 0x5c, 0xd5, 0xce, 0x2e,
        0x08, 0xb6, 0x1b, 0xb5, 0x76, 0x4c, 0x3f, 0xd2,
        0x92, 0x8b, 0xad, 0x74, 0x77, 0xf1, 0x52, 0xe0,
        0xa2, 0xb3, 0xa0, 0xd9, 0x6c, 0x1d, 0x06, 0x04
    };
    const u8 c[] = {
        0xc8, 0xf3, 0xb6, 0x98, 0x66, 0x2f, 0x9c, 0x03,
        0xaa, 0xd7, 0xcb, 0xf2, 0x6e, 0xdc, 0xf8, 0xfe,
        0x86, 0x8b, 0xf6, 0x69, 0x92, 0x00, 0x2b, 0xdf,
        0xb0, 0x3b, 0x80, 0xc0, 0xbf, 0x6c, 0xe2, 0x05
    };
    u8 output[32];
    const u8 expected[] = {
        0xf3, 0x14, 0xaf, 0x40, 0x8d, 0x7b, 0x9e, 0x8d,
        0x81, 0x37, 0x90, 0x35, 0xf3, 0xa8, 0x58, 0xd0,
        0xef, 0xdb, 0x4a, 0x37, 0xd7, 0x55, 0x18, 0xd9,
        0xd4, 0x52, 0x3a, 0x40, 0xe0, 0xce, 0x59, 0x01
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs22_ProduceCorrectResult) {

    const u8 a[] = {
        0x10, 0x70, 0x50, 0x4a, 0xfa, 0xda, 0x84, 0x9b,
        0x03, 0x3f, 0x97, 0x57, 0x18, 0x53, 0x91, 0xc8,
        0xd6, 0x50, 0xbd, 0x83, 0x46, 0x53, 0x23, 0xdf,
        0xb1, 0xf2, 0x69, 0xc7, 0xde, 0xdf, 0x49, 0x05
    };
    const u8 b[] = {
        0x35, 0x11, 0xba, 0xde, 0xc8, 0xfb, 0x1e, 0x1b,
        0xb8, 0xf6, 0xdf, 0xe6, 0x2d, 0xab, 0x5f, 0x59,
        0x55, 0x32, 0x6c, 0x7e, 0x14, 0xb9, 0x7b, 0xd1,
        0xaf, 0x9c, 0x71, 0xfb, 0x2e, 0x8b, 0xa8, 0x07
    };
    const u8 c[] = {
        0xb2, 0x5d, 0xb2, 0xd9, 0xe9, 0x09, 0xaa, 0x27,
        0x6d, 0xc2, 0x2e, 0xa5, 0x33, 0x29, 0x34, 0x4d,
        0x82, 0xda, 0xf7, 0xa9, 0xc1, 0x16, 0x11, 0xb6,
        0x03, 0xfb, 0xd3, 0x29, 0x08, 0x68, 0x06, 0x05
    };
    u8 output[32];
    const u8 expected[] = {
        0x06, 0x01, 0x5d, 0xba, 0x56, 0xeb, 0x35, 0xe0,
        0x6f, 0x37, 0x0f, 0x64, 0x9b, 0x93, 0x1c, 0x64,
        0x27, 0xea, 0xc6, 0xfb, 0x70, 0x1a, 0x64, 0x67,
        0xa8, 0xea, 0x66, 0x75, 0x80, 0x47, 0xc3, 0x05
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs23_ProduceCorrectResult) {

    const u8 a[] = {
        0x6c, 0x49, 0xb5, 0xa2, 0x83, 0x67, 0x2a, 0x14,
        0x5b, 0x91, 0xda, 0x3e, 0x30, 0x62, 0xc4, 0x7c,
        0x37, 0x7f, 0x27, 0x3d, 0x6b, 0x52, 0x53, 0x02,
        0xe1, 0xf4, 0x98, 0x92, 0xcd, 0xfb, 0x4c, 0x03
    };
    const u8 b[] = {
        0x56, 0x96, 0xd1, 0xe4, 0xc2, 0x7b, 0x0c, 0x67,
        0x93, 0x90, 0x5e, 0x89, 0xc4, 0x98, 0x2d, 0xc2,
        0xef, 0x21, 0x90, 0xcf, 0xbf, 0x91, 0x7b, 0x60,
        0x80, 0xf1, 0x47, 0x17, 0xf1, 0x34, 0x4e, 0x00
    };
    const u8 c[] = {
        0xc8, 0x96, 0xb6, 0xbf, 0x01, 0x93, 0xd6, 0xc0,
        0xfb, 0xb1, 0x4c, 0xea, 0x2b, 0xe6, 0x50, 0x41,
        0xa3, 0xaf, 0xd3, 0x76, 0x16, 0x4e, 0xa7, 0xd3,
        0xaa, 0x49, 0x28, 0xe3, 0xef, 0x81, 0xc4, 0x02
    };
    u8 output[32];
    const u8 expected[] = {
        0x8d, 0x8c, 0x7c, 0xb0, 0x4b, 0xcd, 0xea, 0xd8,
        0x1c, 0xc6, 0x9f, 0x95, 0x52, 0xb9, 0x3c, 0x53,
        0xa6, 0xe7, 0x67, 0xb2, 0xd1, 0x09, 0x76, 0x2f,
        0xa0, 0xbc, 0xea, 0x5c, 0xf4, 0xc0, 0xa0, 0x02
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs24_ProduceCorrectResult) {

    const u8 a[] = {
        0x61, 0x26, 0x02, 0x4e, 0xa6, 0x95, 0xbd, 0x9f,
        0x21, 0xa6, 0x77, 0x6d, 0xaf, 0x79, 0x8c, 0xcc,
        0xde, 0xc2, 0x07, 0xad, 0x79, 0x34, 0x27, 0x96,
        0xd7, 0x09, 0x06, 0xe4, 0xfb, 0x11, 0xdb, 0x00
    };
    const u8 b[] = {
        0xb1, 0xd0, 0x75, 0x64, 0x83, 0x14, 0x1a, 0x8e,
        0xa2, 0xf8, 0x16, 0x92, 0xe9, 0x8d, 0x94, 0x25,
        0x9a, 0xe2, 0x00, 0x11, 0x0e, 0xd9, 0x24, 0x0b,
        0x9f, 0xf1, 0xf9, 0x0a, 0xe4, 0x84, 0x94, 0x0b
    };
    const u8 c[] = {
        0x99, 0x87, 0xe5, 0xed, 0xcf, 0x79, 0x4b, 0xb6,
        0x04, 0x96, 0xf6, 0x39, 0xe5, 0x29, 0xcc, 0xcd,
        0x70, 0x95, 0x48, 0xcb, 0xcc, 0x58, 0x97, 0x95,
        0x4c, 0xc7, 0x55, 0x55, 0x56, 0x0a, 0x38, 0x06
    };
    u8 output[32];
    const u8 expected[] = {
        0x82, 0xde, 0x19, 0xd3, 0x62, 0x7e, 0xc0, 0x72,
        0xfe, 0x03, 0x8e, 0xc0, 0xfd, 0x94, 0xfd, 0xeb,
        0x21, 0x56, 0xc9, 0xdd, 0xd0, 0x86, 0x3d, 0x5e,
        0x09, 0x3a, 0x0c, 0xd8, 0xcc, 0xa1, 0x3f, 0x02
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs25_ProduceCorrectResult) {

    const u8 a[] = {
        0x11, 0x7f, 0x46, 0x62, 0xc9, 0xac, 0x32, 0xa2,
        0xd1, 0x76, 0x69, 0x84, 0x05, 0x05, 0x74, 0x9a,
        0xec, 0x34, 0x78, 0xf2, 0x7c, 0xc4, 0x9e, 0xa8,
        0x36, 0xf5, 0xf9, 0x64, 0x21, 0x3d, 0x3a, 0x03
    };
    const u8 b[] = {
        0x9a, 0x68, 0xa9, 0xf7, 0x5f, 0x10, 0x44, 0x45,
        0xc2, 0xff, 0x2e, 0x36, 0xca, 0x6c, 0x84, 0xbe,
        0x8e, 0xb6, 0x41, 0xf7, 0xd1, 0xf4, 0xee, 0x8b,
        0xc0, 0xa9, 0xd6, 0x9c, 0x68, 0x67, 0x1c, 0x01
    };
    const u8 c[] = {
        0x3c, 0x1c, 0x4b, 0x70, 0x9c, 0x56, 0xe8, 0x04,
        0xfb, 0xd7, 0x8e, 0x26, 0xfa, 0x87, 0x84, 0xd6,
        0xc4, 0x9d, 0xbd, 0xdd, 0x06, 0x71, 0x37, 0x5f,
        0xf8, 0xda, 0x20, 0xda, 0x43, 0xcb, 0xf0, 0x09
    };
    u8 output[32];
    const u8 expected[] = {
        0xc7, 0xf0, 0x6e, 0xaa, 0x89, 0x5e, 0xc4, 0xca,
        0x16, 0x9d, 0x9b, 0x00, 0x2f, 0x73, 0xff, 0x5c,
        0x25, 0xac, 0xf0, 0x01, 0xea, 0x17, 0x8b, 0x2a,
        0xd8, 0x05, 0x61, 0x65, 0xce, 0xbc, 0x19, 0x0f
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs26_ProduceCorrectResult) {

    const u8 a[] = {
        0x57, 0x42, 0x5c, 0xd0, 0x62, 0x07, 0xdc, 0x87,
        0xec, 0xcd, 0x83, 0x67, 0x21, 0x09, 0x09, 0xae,
        0x9b, 0xa0, 0x7c, 0xeb, 0xc3, 0x0c, 0x6f, 0x93,
        0x53, 0x74, 0xd0, 0xd1, 0x78, 0x89, 0xc5, 0x0b
    };
    const u8 b[] = {
        0x9f, 0x6c, 0xb1, 0xdc, 0xa8, 0x31, 0x33, 0x44,
        0xb6, 0x72, 0xb1, 0x5b, 0xc4, 0xa1, 0x48, 0x9f,
        0x00, 0x80, 0x5b, 0x10, 0x07, 0xe6, 0x93, 0x6c,
        0x0e, 0xef, 0x67, 0x2d, 0xda, 0x4d, 0x55, 0x04
    };
    const u8 c[] = {
        0x72, 0x8a, 0x68, 0x49, 0xce, 0x6a, 0x71, 0xd8,
        0xd5, 0xba, 0x65, 0x0d, 0x62, 0xdf, 0x92, 0x17,
        0x97, 0x0a, 0x36, 0x22, 0x14, 0x79, 0x8b, 0x01,
        0xd7, 0x9d, 0x95, 0x4c, 0x83, 0x24, 0x56, 0x08
    };
    u8 output[32];
    const u8 expected[] = {
        0x3a, 0x1e, 0x7a, 0x6e, 0x6d, 0xb4, 0x0f, 0x6d,
        0xfc, 0x56, 0x47, 0xc3, 0x3b, 0xd5, 0x04, 0xb6,
        0x1c, 0x69, 0x41, 0xab, 0x28, 0x8d, 0x1d, 0x43,
        0x25, 0x48, 0x37, 0x40, 0x2c, 0x7a, 0x8b, 0x0e
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs27_ProduceCorrectResult) {

    const u8 a[] = {
        0x1e, 0xe3, 0x06, 0x7f, 0xdd, 0x59, 0x1b, 0x9f,
        0x59, 0x43, 0x10, 0x9f, 0x84, 0x73, 0xfc, 0xa3,
        0xf0, 0xf6, 0xc9, 0x30, 0x29, 0x10, 0xbe, 0x64,
        0x56, 0xfc, 0x8d, 0xf8, 0x29, 0xaf, 0x07, 0x05
    };
    const u8 b[] = {
        0x64, 0x81, 0x1a, 0x7b, 0x32, 0x75, 0x17, 0x15,
        0xbd, 0x31, 0x19, 0xd3, 0x5e, 0x5b, 0x85, 0x2b,
        0x21, 0x13, 0xc4, 0x07, 0x90, 0x35, 0xa7, 0xb0,
        0x7d, 0x0e, 0x5f, 0x3b, 0x5d, 0xd6, 0xc3, 0x0c
    };
    const u8 c[] = {
        0xf3, 0x7a, 0x4e, 0x86, 0x1f, 0x2b, 0xa9, 0xc7,
        0x85, 0x0b, 0x91, 0x2d, 0x2a, 0xde, 0xf4, 0x30,
        0x1a, 0x1f, 0xec, 0x6a, 0x45, 0xce, 0xc5, 0xa5,
        0xfd, 0x1e, 0x71, 0x38, 0xaa, 0x2b, 0xc3, 0x00
    };
    u8 output[32];
    const u8 expected[] = {
        0x31, 0xfd, 0x93, 0x09, 0x14, 0xfc, 0x34, 0x4d,
        0x7b, 0xe4, 0xb0, 0x49, 0x41, 0x3a, 0xc1, 0x11,
        0x4b, 0xb8, 0xb7, 0xee, 0x29, 0x8e, 0x07, 0x0e,
        0xb3, 0xdb, 0xd0, 0x34, 0x35, 0xa2, 0xc9, 0x02
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs28_ProduceCorrectResult) {

    const u8 a[] = {
        0xb0, 0xaf, 0x36, 0x97, 0x68, 0xed, 0x88, 0xdd,
        0xf5, 0x20, 0x8e, 0x32, 0x49, 0xd8, 0x36, 0xa3,
        0x00, 0xf3, 0xbe, 0x2f, 0x23, 0x3b, 0x77, 0x19,
        0x1d, 0xe0, 0x20, 0xce, 0x74, 0xce, 0x07, 0x0a
    };
    const u8 b[] = {
        0xca, 0x10, 0xe1, 0x03, 0xc1, 0x01, 0xe1, 0x2f,
        0x90, 0xd6, 0xca, 0xab, 0xee, 0x5f, 0xfa, 0xf1,
        0xf2, 0xd9, 0x28, 0xc3, 0xdd, 0x46, 0xd8, 0xf4,
        0x59, 0xe5, 0x78, 0x66, 0x47, 0xde, 0x4c, 0x00
    };
    const u8 c[] = {
        0x64, 0x52, 0x2e, 0x63, 0x8f, 0x92, 0x15, 0x4e,
        0x2c, 0x7e, 0x4c, 0xdc, 0x88, 0x56, 0x19, 0x75,
        0x2e, 0x58, 0x87, 0x69, 0x0d, 0xb8, 0xde, 0x5a,
        0xcb, 0xb3, 0xcd, 0xd2, 0x97, 0x43, 0x3c, 0x03
    };
    u8 output[32];
    const u8 expected[] = {
        0xc0, 0x1a, 0x53, 0x40, 0xc6, 0x2f, 0xdd, 0xa0,
        0xdf, 0xfc, 0x51, 0x55, 0x89, 0x7a, 0x87, 0xbe,
        0x92, 0x2a, 0xcf, 0x35, 0x88, 0xf4, 0xc5, 0xed,
        0x68, 0x5c, 0xf0, 0x2e, 0xb1, 0x25, 0xf7, 0x06
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs29_ProduceCorrectResult) {

    const u8 a[] = {
        0xfd, 0xa8, 0xd9, 0xfa, 0x34, 0xa4, 0x2e, 0xdc,
        0x60, 0x90, 0x82, 0x7f, 0x0c, 0xe1, 0xea, 0xde,
        0x24, 0xdd, 0xc9, 0xc8, 0xd8, 0x3c, 0xdd, 0x35,
        0x9d, 0x1e, 0x35, 0xed, 0x6d, 0x4f, 0x08, 0x04
    };
    const u8 b[] = {
        0xca, 0x41, 0x53, 0x80, 0x9d, 0xfc, 0x65, 0x6e,
        0xc2, 0x46, 0xab, 0x0f, 0x65, 0x43, 0xb5, 0xed,
        0x90, 0x41, 0xb8, 0xf9, 0x41, 0x34, 0xe8, 0xc9,
        0x5f, 0xdf, 0xd4, 0xf3, 0xf9, 0x2c, 0x9b, 0x0f
    };
    const u8 c[] = {
        0xc6, 0x01, 0x89, 0x85, 0x7e, 0x22, 0x68, 0x4f,
        0x0d, 0xed, 0x09, 0x81, 0xe5, 0x64, 0xb3, 0xbd,
        0x3a, 0xb0, 0x41, 0x44, 0x51, 0x5a, 0xb8, 0x42,
        0xfd, 0xd6, 0xd5, 0x97, 0x51, 0xcf, 0x3f, 0x04
    };
    u8 output[32];
    const u8 expected[] = {
        0xd4, 0x44, 0xfa, 0xdc, 0x70, 0xdb, 0x22, 0xb3,
        0xdc, 0x6e, 0xb4, 0x43, 0x2a, 0xa1, 0x12, 0xe7,
        0x92, 0x8d, 0x94, 0x2a, 0xb0, 0x67, 0x1f, 0x0e,
        0xaf, 0x10, 0xb6, 0x2f, 0x6e, 0x14, 0x98, 0x04
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs30_ProduceCorrectResult) {

    const u8 a[] = {
        0xd9, 0xc0, 0xbd, 0x09, 0xfa, 0x45, 0x20, 0x51,
        0x7e, 0xa8, 0x0b, 0x31, 0x89, 0x3e, 0x33, 0x21,
        0xcf, 0x57, 0xf8, 0x74, 0x5d, 0x01, 0x0d, 0x5b,
        0x85, 0x41, 0x00, 0x9f, 0xd2, 0x13, 0x36, 0x07
    };
    const u8 b[] = {
        0x79, 0x35, 0x47, 0xb5, 0x91, 0xc6, 0x79, 0x65,
        0x68, 0x67, 0x92, 0xd3, 0x8a, 0x48, 0x85, 0x44,
        0x54, 0xbd, 0x24, 0xd8, 0x07, 0x50, 0x2f, 0xb2,
        0xb5, 0x8d, 0x3e, 0x76, 0xdd, 0xbf, 0xa9, 0x08
    };
    const u8 c[] = {
        0xc2, 0xac, 0xac, 0xb6, 0x4e, 0x80, 0x1d, 0xb9,
        0xda, 0x8a, 0xaa, 0x4e, 0x15, 0x57, 0x26, 0x82,
        0x72, 0x09, 0x69, 0x83, 0x71, 0x8e, 0x84, 0x90,
        0x60, 0x58, 0x0c, 0x22, 0x26, 0xf0, 0xdc, 0x0a
    };
    u8 output[32];
    const u8 expected[] = {
        0x3b, 0x84, 0x51, 0x85, 0x7b, 0xeb, 0xc3, 0x1e,
        0x54, 0xc2, 0xad, 0x52, 0x44, 0x84, 0xc5, 0xca,
        0xe9, 0x79, 0xfe, 0x8c, 0x1f, 0xab, 0x73, 0xbd,
        0x2f, 0x86, 0x21, 0xc4, 0xa9, 0xe3, 0x2c, 0x03
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs31_ProduceCorrectResult) {

    const u8 a[] = {
        0xba, 0x3d, 0x1e, 0x0d, 0xaf, 0x33, 0xe4, 0x5b,
        0x0c, 0x0c, 0xef, 0x67, 0x0e, 0x5e, 0xe0, 0x19,
        0xff, 0x7a, 0xc9, 0xae, 0xee, 0xc3, 0x5c, 0xab,
        0xc8, 0x21, 0x86, 0x44, 0x7b, 0xe8, 0x3d, 0x0b
    };
    const u8 b[] = {
        0x77, 0x3f, 0x61, 0x40, 0x58, 0x98, 0xf1, 0x57,
        0x48, 0x99, 0xfa, 0x41, 0xb1, 0x14, 0xa8, 0xc9,
        0x62, 0x34, 0x86, 0x6b, 0x48, 0xde, 0x76, 0x0d,
        0xb1, 0x9d, 0xd8, 0x73, 0x61, 0x15, 0x10, 0x05
    };
    const u8 c[] = {
        0x4d, 0x89, 0xda, 0xff, 0x8f, 0x93, 0x02, 0x69,
        0x18, 0x66, 0x07, 0x15, 0xe3, 0x07, 0xd2, 0x0a,
        0x7f, 0x7c, 0xde, 0xb6, 0x04, 0xd6, 0x70, 0x03,
        0x47, 0xe0, 0x04, 0xf5, 0x98, 0x0d, 0x0f, 0x04
    };
    u8 output[32];
    const u8 expected[] = {
        0xca, 0x77, 0x88, 0xca, 0xf1, 0x9e, 0xf4, 0x2f,
        0x51, 0x4f, 0xdf, 0x95, 0x91, 0xcd, 0x0a, 0x45,
        0xb5, 0xcf, 0xa9, 0x82, 0x72, 0xa3, 0x49, 0x47,
        0x3a, 0x23, 0x46, 0x1c, 0xa4, 0x17, 0x75, 0x04
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs32_ProduceCorrectResult) {

    const u8 a[] = {
        0xe0, 0x95, 0x0c, 0x01, 0xc2, 0x19, 0x83, 0x35,
        0x2b, 0x18, 0xec, 0xa4, 0x90, 0x4d, 0x58, 0xe3,
        0x38, 0xfe, 0xe9, 0x32, 0x00, 0xba, 0x68, 0xc7,
        0xb8, 0x7b, 0xf4, 0x48, 0xc9, 0xc5, 0xc5, 0x05
    };
    const u8 b[] = {
        0xf5, 0xce, 0x31, 0x48, 0xb7, 0x9b, 0x9b, 0xca,
        0xea, 0x28, 0x40, 0x4b, 0xf8, 0xfb, 0x09, 0x63,
        0xb3, 0xa8, 0xf9, 0x9d, 0x4d, 0x97, 0x4a, 0x65,
        0x3e, 0x7d, 0xe6, 0xcf, 0xf1, 0x84, 0x22, 0x03
    };
    const u8 c[] = {
        0x93, 0x67, 0x90, 0xd6, 0xbb, 0xcb, 0x45, 0xa4,
        0x78, 0x7f, 0xcb, 0x82, 0x6c, 0xbf, 0x83, 0xdd,
        0x07, 0x3c, 0x92, 0xf4, 0x76, 0xa6, 0xa0, 0xde,
        0x94, 0xd8, 0x65, 0x41, 0x0a, 0xc4, 0xdb, 0x0d
    };
    u8 output[32];
    const u8 expected[] = {
        0xf2, 0x38, 0x00, 0x86, 0xd3, 0xec, 0x57, 0xee,
        0x79, 0xc3, 0xd8, 0x3f, 0xf0, 0xd7, 0x69, 0x87,
        0x5b, 0x2a, 0xb5, 0xda, 0x23, 0x5b, 0xc6, 0xfa,
        0x8a, 0x8b, 0xc8, 0x61, 0x4d, 0xdb, 0x73, 0x02
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs33_ProduceCorrectResult) {

    const u8 a[] = {
        0x97, 0x50, 0x55, 0xd1, 0xbd, 0x41, 0x1c, 0x87,
        0x77, 0x88, 0xa6, 0xcd, 0x9d, 0xa6, 0xbc, 0xd0,
        0xa2, 0xa2, 0xc8, 0xa0, 0x45, 0x7e, 0xc9, 0xfa,
        0x71, 0x88, 0x6a, 0xa5, 0x67, 0x2a, 0x84, 0x0a
    };
    const u8 b[] = {
        0x97, 0x14, 0xca, 0xc5, 0xc9, 0x2d, 0xd4, 0x24,
        0xf5, 0x9b, 0xce, 0x71, 0x2f, 0xd1, 0xe1, 0x15,
        0x7f, 0x20, 0xbd, 0x87, 0xbb, 0x4c, 0x16, 0xe6,
        0xc1, 0xcc, 0x78, 0x4c, 0x85, 0x51, 0xba, 0x09
    };
    const u8 c[] = {
        0xa1, 0x82, 0x8f, 0x64, 0xd9, 0x5c, 0xda, 0x3e,
        0x1b, 0x62, 0x90, 0x1d, 0x47, 0x6e, 0x3a, 0xbf,
        0x12, 0xbe, 0x33, 0x3c, 0xc4, 0xfe, 0xda, 0xeb,
        0xbb, 0xc5, 0x75, 0x90, 0xfb, 0x35, 0x9a, 0x0a
    };
    u8 output[32];
    const u8 expected[] = {
        0xda, 0xb2, 0x3c, 0x0e, 0x0c, 0x3e, 0xf7, 0x60,
        0x4f, 0x0b, 0x71, 0x16, 0x62, 0x7e, 0x7f, 0x43,
        0x83, 0x4a, 0x44, 0xa0, 0x3b, 0x8b, 0x62, 0x8e,
        0x47, 0xdb, 0x06, 0x50, 0xc1, 0x1b, 0x1b, 0x0b
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs34_ProduceCorrectResult) {

    const u8 a[] = {
        0x05, 0x02, 0x73, 0x35, 0x66, 0x88, 0xcf, 0xda,
        0x4c, 0x19, 0xf4, 0xaf, 0xcb, 0x77, 0x44, 0xd3,
        0xbe, 0xee, 0x01, 0xfc, 0x26, 0xb0, 0x86, 0x06,
        0xb7, 0x18, 0x00, 0xbb, 0x0a, 0x17, 0x2b, 0x00
    };
    const u8 b[] = {
        0xcf, 0x42, 0x85, 0xc2, 0x37, 0x74, 0x41, 0x1c,
        0xbb, 0x18, 0xbc, 0x20, 0x6c, 0x3b, 0xf9, 0xf6,
        0xe4, 0x65, 0x6e, 0x00, 0x0f, 0xb9, 0x11, 0x07,
        0x38, 0xe3, 0x29, 0x6f, 0x87, 0xfc, 0xe9, 0x06
    };
    const u8 c[] = {
        0xb7, 0x40, 0x4c, 0x97, 0x4d, 0xfb, 0xf3, 0xaa,
        0x6b, 0x0c, 0xa7, 0x60, 0xa2, 0x06, 0xd2, 0x01,
        0xc5, 0x60, 0x85, 0x20, 0x54, 0xce, 0xdd, 0x3c,
        0x7e, 0x9b, 0x67, 0xfb, 0x64, 0xc2, 0xa4, 0x0b
    };
    u8 output[32];
    const u8 expected[] = {
        0xbc, 0xa7, 0x2d, 0x1c, 0xeb, 0x54, 0x56, 0x55,
        0xf9, 0x54, 0x71, 0xdf, 0xa3, 0x93, 0x1a, 0x52,
        0x68, 0xfe, 0xf8, 0xb1, 0x12, 0xea, 0xd6, 0x53,
        0x1f, 0x7b, 0x87, 0x55, 0x89, 0x73, 0x67, 0x08
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs35_ProduceCorrectResult) {

    const u8 a[] = {
        0x21, 0x26, 0x2a, 0xe6, 0x24, 0x5b, 0xa1, 0xea,
        0xf5, 0x33, 0x4c, 0xce, 0xee, 0x79, 0x30, 0x11,
        0x96, 0xf1, 0xa6, 0xa9, 0x89, 0xcb, 0x26, 0xc9,
        0x0e, 0xa0, 0x84, 0x6b, 0xc5, 0x0d, 0x99, 0x02
    };
    const u8 b[] = {
        0x25, 0x58, 0x5f, 0x7a, 0x63, 0x60, 0x66, 0x5d,
        0xc6, 0xdb, 0xab, 0xe1, 0x85, 0xb0, 0x3a, 0x35,
        0x65, 0x44, 0xaf, 0x82, 0x4f, 0x23, 0xa6, 0xee,
        0x0b, 0xcf, 0x75, 0x13, 0xa8, 0x20, 0x7e, 0x0c
    };
    const u8 c[] = {
        0xf4, 0xc1, 0xdd, 0x08, 0xda, 0x05, 0xc9, 0x4c,
        0x26, 0xa7, 0xaf, 0x50, 0xd0, 0x11, 0x4a, 0xfe,
        0x37, 0x58, 0xfa, 0xb0, 0xc0, 0x73, 0x99, 0x6e,
        0x60, 0xd8, 0x82, 0x2b, 0x55, 0x3c, 0xac, 0x04
    };
    u8 output[32];
    const u8 expected[] = {
        0xa2, 0xed, 0x07, 0xc5, 0x42, 0x01, 0x56, 0x94,
        0xed, 0x2b, 0x31, 0x59, 0x4f, 0xf9, 0xfb, 0x5b,
        0x83, 0x68, 0x9d, 0xd3, 0x3c, 0x07, 0x9c, 0x0a,
        0xdf, 0xc4, 0x0f, 0x80, 0x2e, 0x2b, 0x43, 0x04
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs36_ProduceCorrectResult) {

    const u8 a[] = {
        0x50, 0x35, 0xe6, 0xfb, 0xee, 0x4a, 0x65, 0xf9,
        0x95, 0x35, 0x21, 0xe7, 0xff, 0x8b, 0x9b, 0x68,
        0xd4, 0x95, 0x6b, 0xea, 0x25, 0xdf, 0xec, 0x43,
        0xd0, 0xbd, 0xbc, 0xe5, 0xa6, 0xf1, 0x1a, 0x02
    };
    const u8 b[] = {
        0xd6, 0x34, 0x0b, 0xe7, 0x5c, 0x3d, 0x0b, 0xdc,
        0xe8, 0xd7, 0x6d, 0x74, 0x76, 0x72, 0x23, 0x2d,
        0x35, 0x76, 0xa8, 0x82, 0x48, 0xde, 0x9b, 0x88,
        0x3d, 0x15, 0xd0, 0x7c, 0x83, 0xcf, 0x90, 0x05
    };
    const u8 c[] = {
        0x81, 0x7b, 0x21, 0x74, 0x4b, 0xf5, 0x8b, 0xbf,
        0xdd, 0x23, 0x2f, 0xae, 0xcd, 0x84, 0x9b, 0xcd,
        0xe2, 0x06, 0x67, 0x85, 0x25, 0xf8, 0x30, 0xe8,
        0x65, 0x96, 0x1c, 0x2c, 0xd2, 0xce, 0x82, 0x00
    };
    u8 output[32];
    const u8 expected[] = {
        0xb5, 0x73, 0x7a, 0x26, 0x49, 0x8b, 0xbd, 0xdb,
        0x42, 0x9d, 0x5e, 0xc5, 0x2d, 0x2e, 0xba, 0x9d,
        0x6e, 0x66, 0x81, 0xa7, 0xed, 0x06, 0x70, 0xe0,
        0x21, 0x1b, 0x6f, 0x37, 0x2c, 0x53, 0x2c, 0x0a
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs37_ProduceCorrectResult) {

    const u8 a[] = {
        0x49, 0x37, 0x67, 0x30, 0xd1, 0x67, 0x34, 0x95,
        0xb4, 0xb1, 0x2a, 0x2a, 0xd0, 0x16, 0xc0, 0xb8,
        0xbf, 0xc5, 0x25, 0xd7, 0x0c, 0xab, 0x07, 0x67,
        0xd6, 0x6e, 0x27, 0x5c, 0x43, 0x37, 0x6f, 0x02
    };
    const u8 b[] = {
        0xd3, 0x22, 0xfe, 0x38, 0x7f, 0x20, 0xe6, 0x9f,
        0xaa, 0xd8, 0x77, 0x35, 0x8d, 0x20, 0x4b, 0x86,
        0xee, 0x83, 0x8d, 0xe1, 0xbb, 0x25, 0xeb, 0x1c,
        0x47, 0x25, 0xa8, 0xfb, 0xa1, 0x26, 0x0f, 0x07
    };
    const u8 c[] = {
        0x36, 0x25, 0x95, 0x82, 0xb8, 0xc1, 0xdc, 0x1e,
        0x58, 0x47, 0x81, 0xfd, 0x1e, 0x50, 0x62, 0xaf,
        0x3d, 0xcf, 0x67, 0xf9, 0x17, 0x4b, 0xa6, 0x19,
        0x85, 0xcf, 0x57, 0xf7, 0xb6, 0x5d, 0xdb, 0x0c
    };
    u8 output[32];
    const u8 expected[] = {
        0x17, 0x31, 0x2f, 0x7b, 0x61, 0x1b, 0xd0, 0x8d,
        0x3d, 0x6d, 0xee, 0x52, 0xd9, 0xef, 0x81, 0xa8,
        0x44, 0x9b, 0xb1, 0xa1, 0x5d, 0xf0, 0x1a, 0x42,
        0xeb, 0x89, 0x8d, 0x97, 0xba, 0xc1, 0x47, 0x01
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs38_ProduceCorrectResult) {

    const u8 a[] = {
        0xf3, 0xaa, 0x53, 0xac, 0xbf, 0x49, 0x08, 0x00,
        0xb1, 0x2c, 0x96, 0x6d, 0xcb, 0x92, 0x9d, 0x25,
        0x5c, 0x55, 0x06, 0x38, 0x23, 0xd9, 0x2d, 0xf6,
        0x4b, 0xbf, 0xf7, 0x76, 0x7e, 0x49, 0x1e, 0x09
    };
    const u8 b[] = {
        0x2d, 0x26, 0x5f, 0x08, 0x69, 0xf6, 0xfe, 0xfc,
        0x4d, 0x78, 0x34, 0x72, 0xb7, 0x7e, 0xf0, 0x1f,
        0xdd, 0x80, 0xa7, 0xa7, 0x4e, 0x0b, 0x43, 0xff,
        0xd5, 0xf4, 0x0c, 0x2f, 0xcc, 0x92, 0x59, 0x02
    };
    const u8 c[] = {
        0xfc, 0xa2, 0x0c, 0x39, 0x5e, 0xcc, 0x37, 0x0d,
        0x15, 0x4a, 0xe7, 0x3f, 0xe1, 0xd2, 0x00, 0x1b,
        0xd1, 0x4e, 0x67, 0x88, 0x6c, 0x9f, 0x19, 0x61,
        0x6a, 0x42, 0xce, 0x45, 0xf5, 0x51, 0xa6, 0x0c
    };
    u8 output[32];
    const u8 expected[] = {
        0x5b, 0xc2, 0xcc, 0x9a, 0x8b, 0x7c, 0xf0, 0xf7,
        0x43, 0x76, 0x13, 0x27, 0x32, 0x9b, 0x53, 0x76,
        0xae, 0x84, 0xb8, 0xb5, 0x6b, 0x40, 0xcf, 0xfb,
        0x79, 0x50, 0x1d, 0x0c, 0xef, 0x95, 0xad, 0x0e
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs39_ProduceCorrectResult) {

    const u8 a[] = {
        0xaa, 0xec, 0x88, 0x6d, 0xc0, 0x26, 0x41, 0xa0,
        0x84, 0x92, 0x21, 0xf9, 0x65, 0x02, 0x9b, 0x15,
        0xec, 0xf0, 0xaa, 0x04, 0xbb, 0x3d, 0xb8, 0xd3,
        0xa7, 0x63, 0xb8, 0x0e, 0x8a, 0x3c, 0x7f, 0x0c
    };
    const u8 b[] = {
        0xc1, 0x02, 0xd6, 0x2f, 0xf5, 0x44, 0xfd, 0xdf,
        0x75, 0xc0, 0x5f, 0x63, 0x46, 0x6a, 0x28, 0xc9,
        0xa5, 0xdb, 0x78, 0x96, 0xb1, 0x0b, 0x4d, 0x80,
        0x20, 0x9d, 0x5a, 0x95, 0x16, 0x20, 0x03, 0x04
    };
    const u8 c[] = {
        0x49, 0x2e, 0xdd, 0xd0, 0x17, 0x70, 0x57, 0x76,
        0xd2, 0xfb, 0xd4, 0x5d, 0x73, 0xa7, 0x67, 0x40,
        0x8a, 0xb0, 0x6b, 0x6d, 0x43, 0xb8, 0xf0, 0x8d,
        0x93, 0xf8, 0x27, 0x7a, 0xee, 0x1e, 0x3b, 0x0b
    };
    u8 output[32];
    const u8 expected[] = {
        0xf2, 0xec, 0xb2, 0x67, 0x04, 0x15, 0xa4, 0xde,
        0xb6, 0x15, 0x18, 0x38, 0x58, 0x0a, 0x2a, 0xd8,
        0x09, 0x52, 0xdb, 0xfc, 0x4e, 0x48, 0x65, 0x87,
        0x86, 0x04, 0x87, 0x88, 0x62, 0xce, 0x6e, 0x0d
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs40_ProduceCorrectResult) {

    const u8 a[] = {
        0x10, 0xa9, 0xce, 0x2b, 0xbc, 0x47, 0x41, 0x07,
        0xfa, 0xc5, 0xb9, 0x76, 0xba, 0xf9, 0x9d, 0xe6,
        0x41, 0x26, 0x64, 0xe6, 0xf0, 0x38, 0xc5, 0xb5,
        0x24, 0xd2, 0x10, 0x2d, 0x51, 0x35, 0xb8, 0x0b
    };
    const u8 b[] = {
        0x4d, 0x7a, 0x52, 0x67, 0x84, 0x87, 0xdc, 0xf5,
        0xf8, 0x7d, 0xc0, 0x15, 0x67, 0x95, 0x61, 0x8a,
        0xae, 0x13, 0x0c, 0x3a, 0xd7, 0x72, 0x1b, 0xea,
        0x7e, 0x26, 0xf3, 0xf3, 0xda, 0x0e, 0xf2, 0x0b
    };
    const u8 c[] = {
        0x15, 0x64, 0xdb, 0xc0, 0x56, 0xd1, 0xdc, 0x20,
        0xbc, 0x49, 0x18, 0xbd, 0xd4, 0xfb, 0x24, 0xf5,
        0xca, 0x40, 0xf7, 0xe8, 0xb2, 0x76, 0xdf, 0xcd,
        0xc1, 0x60, 0x15, 0x7e, 0xeb, 0xe1, 0xfb, 0x0d
    };
    u8 output[32];
    const u8 expected[] = {
        0xe3, 0xfc, 0x67, 0xe8, 0x52, 0xca, 0xad, 0x54,
        0x83, 0x5f, 0xf7, 0x00, 0xa4, 0xa1, 0xa7, 0xf2,
        0xa5, 0x9d, 0x80, 0xca, 0x1c, 0x48, 0xde, 0x24,
        0x23, 0xa7, 0xfb, 0xd6, 0x30, 0x94, 0x04, 0x00
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs41_ProduceCorrectResult){

    const u8 a[] = {
        0x39, 0xf4, 0x1d, 0x1a, 0xf6, 0x2f, 0x26, 0x13,
        0x13, 0x72, 0x3d, 0x9f, 0x3a, 0xab, 0xe6, 0x5c,
        0x63, 0x7f, 0x04, 0xad, 0x08, 0x2c, 0x30, 0x49,
        0x9a, 0xdd, 0x25, 0xf2, 0xee, 0x52, 0x6e, 0x06
    };
    const u8 b[] = {
        0x37, 0x89, 0xa2, 0x2e, 0x26, 0xf0, 0x41, 0xa8,
        0x11, 0xd7, 0x1f, 0x47, 0x3f, 0xa0, 0xaf, 0x95,
        0x67, 0x52, 0x1d, 0x51, 0x18, 0xcc, 0x84, 0x88,
        0xdf, 0xda, 0xf0, 0x2b, 0xe3, 0x2b, 0x96, 0x05
    };
    const u8 c[] = {
        0x66, 0xcd, 0xfc, 0x88, 0xd9, 0x6c, 0x20, 0xd4,
        0x6b, 0x3c, 0xd9, 0x21, 0x10, 0xa3, 0x4f, 0xd2,
        0x94, 0x28, 0xcb, 0x77, 0x15, 0xe3, 0xe2, 0xc3,
        0x4b, 0x7f, 0x58, 0x5d, 0xc7, 0x27, 0x72, 0x07
    };
    u8 output[32];
    const u8 expected[] = {
        0xf3, 0x49, 0xf9, 0x23, 0xad, 0xfe, 0x40, 0xbf,
        0x03, 0xa6, 0x8a, 0xe5, 0xb3, 0xcf, 0xea, 0x3e,
        0xae, 0x0f, 0xae, 0x4f, 0x65, 0x2d, 0x1a, 0x14,
        0x6b, 0x11, 0x9a, 0x99, 0xfd, 0x48, 0xb8, 0x03
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs42_ProduceCorrectResult){

    const u8 a[] = {
        0x02, 0x0f, 0x35, 0x9d, 0xf8, 0x1f, 0xf8, 0x21,
        0x8d, 0x53, 0x88, 0x0f, 0xf6, 0xed, 0x03, 0xc0,
        0xbb, 0x82, 0x98, 0x2f, 0xb8, 0xf3, 0x03, 0xc8,
        0x05, 0x76, 0xdc, 0x23, 0x5d, 0x84, 0x9c, 0x09
    };
    const u8 b[] = {
        0x44, 0xe3, 0x5f, 0x73, 0xe9, 0xf9, 0x82, 0xe6,
        0x9f, 0x23, 0x51, 0x52, 0xbb, 0x9a, 0x1e, 0x61,
        0x9b, 0x80, 0x55, 0x37, 0x2a, 0xbd, 0xcb, 0x9d,
        0x58, 0xc8, 0x46, 0xec, 0x31, 0xc7, 0xa8, 0x01
    };
    const u8 c[] = {
        0x30, 0x6a, 0xce, 0x0b, 0x04, 0xee, 0xa0, 0xd5,
        0x71, 0xf4, 0x14, 0xb2, 0xf1, 0xd1, 0x05, 0x7c,
        0x4a, 0x30, 0xea, 0x0c, 0x19, 0xdf, 0xdc, 0x44,
        0x39, 0x0b, 0x3e, 0xb4, 0x30, 0xcb, 0xad, 0x03
    };
    u8 output[32];
    const u8 expected[] = {
        0x44, 0xff, 0xfc, 0xa7, 0xd6, 0x34, 0xe9, 0x09,
        0x07, 0x04, 0xfd, 0xea, 0xbe, 0x5f, 0x31, 0x5e,
        0xc6, 0xe3, 0xb8, 0x44, 0x1c, 0xf0, 0x4e, 0xb0,
        0x49, 0x36, 0x3d, 0xef, 0x0a, 0xef, 0xad, 0x0a
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs43_ProduceCorrectResult){

    const u8 a[] = {
        0xc0, 0x44, 0xd3, 0x08, 0x06, 0xf0, 0xef, 0xe7,
        0xa2, 0x07, 0xb0, 0xbb, 0xdb, 0x6a, 0xbe, 0x68,
        0x12, 0x0d, 0x40, 0xfb, 0x91, 0xb5, 0x89, 0x24,
        0xb1, 0xc9, 0x1a, 0x4d, 0x9b, 0x18, 0x27, 0x0a
    };
    const u8 b[] = {
        0x49, 0xa9, 0x88, 0x03, 0x28, 0x99, 0x77, 0xfb,
        0xe3, 0x29, 0xe1, 0x79, 0xc1, 0x5f, 0xc5, 0xdb,
        0xf6, 0x53, 0xb2, 0xec, 0x3c, 0xf3, 0x69, 0x4c,
        0x4b, 0xff, 0x4a, 0x34, 0xe0, 0x6c, 0x5b, 0x0b
    };
    const u8 c[] = {
        0xe5, 0x0f, 0x74, 0xd1, 0xaa, 0xbb, 0x2e, 0xa6,
        0xf9, 0x9d, 0x33, 0x8a, 0xe9, 0x90, 0x29, 0x24,
        0x83, 0xff, 0x93, 0x0e, 0x5a, 0xd4, 0x1e, 0x0f,
        0x50, 0x8e, 0xbf, 0xf4, 0x88, 0x10, 0xe6, 0x00
    };
    u8 output[32];
    const u8 expected[] = {
        0xbd, 0xf6, 0x5e, 0x5f, 0xe8, 0x88, 0x91, 0xef,
        0x41, 0x33, 0x7a, 0x54, 0xce, 0xd1, 0x51, 0x46,
        0x70, 0x07, 0x0d, 0xe6, 0x13, 0xd0, 0x69, 0x60,
        0xdf, 0x03, 0x22, 0xc8, 0x5b, 0xf3, 0x57, 0x01
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs44_ProduceCorrectResult){

    const u8 a[] = {
        0x35, 0x55, 0x16, 0x15, 0xbd, 0xcc, 0xb7, 0xf4,
        0x03, 0x40, 0x23, 0xed, 0xba, 0x83, 0xc2, 0x37,
        0x9a, 0x24, 0x07, 0x03, 0x29, 0xb5, 0x5a, 0xb2,
        0x64, 0xd3, 0xa8, 0x00, 0xfc, 0xf1, 0x76, 0x0b
    };
    const u8 b[] = {
        0x5b, 0x2d, 0x09, 0xaa, 0x63, 0x44, 0x32, 0xd4,
        0x8f, 0x35, 0x1d, 0xe3, 0x1c, 0x2c, 0x4a, 0x12,
        0xa1, 0x89, 0xdd, 0x8b, 0x81, 0xed, 0x2c, 0x12,
        0x9b, 0xcf, 0x23, 0xda, 0x0f, 0x05, 0xb7, 0x0a
    };
    const u8 c[] = {
        0x7d, 0xa6, 0x27, 0x61, 0x81, 0x03, 0x91, 0x3e,
        0xf8, 0x78, 0x00, 0x18, 0x4c, 0xc3, 0xea, 0x81,
        0x33, 0xb0, 0x68, 0x14, 0xe9, 0x94, 0xb1, 0x63,
        0x0d, 0xf7, 0x93, 0x9e, 0x10, 0x89, 0xde, 0x09
    };
    u8 output[32];
    const u8 expected[] = {
        0xd7, 0xc3, 0x73, 0x65, 0x98, 0x24, 0x24, 0x6b,
        0xc8, 0x83, 0xde, 0x86, 0xfd, 0xba, 0xe0, 0x24,
        0x40, 0x39, 0x01, 0xe5, 0xab, 0x3a, 0xc2, 0x71,
        0xf0, 0x41, 0x19, 0x1f, 0xb4, 0x4f, 0x55, 0x0c
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs45_ProduceCorrectResult){

    const u8 a[] = {
        0x88, 0xdd, 0x86, 0x26, 0x2e, 0xf2, 0xf3, 0x8d,
        0x43, 0x8f, 0xa3, 0x6c, 0xfc, 0xb0, 0xd8, 0x4e,
        0xd5, 0x43, 0xb7, 0xff, 0x63, 0x93, 0x58, 0x70,
        0x60, 0xb7, 0xfd, 0xa7, 0x47, 0xed, 0xbc, 0x04
    };
    const u8 b[] = {
        0xe5, 0x83, 0x96, 0xc6, 0x51, 0x53, 0xdf, 0x40,
        0x6a, 0x6a, 0x59, 0x96, 0xdb, 0xf4, 0xe8, 0xae,
        0x2e, 0xfa, 0xde, 0x84, 0xda, 0xfe, 0x71, 0x26,
        0x9a, 0xd1, 0x44, 0x86, 0xd0, 0x2c, 0xb2, 0x02
    };
    const u8 c[] = {
        0xee, 0x99, 0x64, 0x2b, 0xca, 0x5e, 0x0e, 0x99,
        0x09, 0x05, 0xe4, 0xdf, 0xe9, 0xa8, 0xae, 0xc1,
        0xd3, 0xea, 0xd5, 0x38, 0x3c, 0x0a, 0x51, 0xa6,
        0x58, 0x81, 0x8d, 0x88, 0x4f, 0x7b, 0x75, 0x03
    };
    u8 output[32];
    const u8 expected[] = {
        0x2a, 0x17, 0xad, 0x74, 0x8c, 0x6d, 0x1d, 0xcb,
        0x8b, 0x32, 0x66, 0x14, 0xdc, 0x8c, 0xd5, 0xe5,
        0x44, 0xf9, 0x36, 0x99, 0xb6, 0x52, 0x80, 0x78,
        0xc5, 0xce, 0xdd, 0xee, 0x46, 0x8c, 0xd8, 0x08
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs46_ProduceCorrectResult){

    const u8 a[] = {
        0x07, 0xfe, 0xc8, 0x6c, 0xff, 0x2f, 0x4c, 0x17,
        0x6b, 0x71, 0xff, 0x93, 0x6b, 0x7e, 0xf5, 0x39,
        0x06, 0x30, 0x9c, 0x08, 0xf4, 0xc7, 0x52, 0x34,
        0x44, 0xc7, 0x91, 0x4b, 0x6e, 0x9d, 0x04, 0x0e
    };
    const u8 b[] = {
        0x18, 0x83, 0x2a, 0x90, 0x45, 0xf2, 0xcb, 0xa5,
        0x37, 0x63, 0x01, 0x44, 0x1e, 0x22, 0xab, 0x16,
        0xc0, 0x93, 0x4b, 0xcb, 0xed, 0xfd, 0x94, 0x14,
        0x72, 0x68, 0xe8, 0xe4, 0x0d, 0xa4, 0x26, 0x0a
    };
    const u8 c[] = {
        0x20, 0x68, 0x55, 0x26, 0xf1, 0x4e, 0xdb, 0xeb,
        0xe4, 0xa0, 0x5a, 0x9c, 0x06, 0x5b, 0x75, 0x6b,
        0x4e, 0x01, 0xf6, 0xd6, 0xe5, 0x3d, 0x36, 0xdf,
        0x82, 0xad, 0x7d, 0x53, 0xbd, 0xc6, 0xb0, 0x02
    };
    u8 output[32];
    const u8 expected[] = {
        0x57, 0x04, 0xc2, 0xe7, 0x10, 0x73, 0x54, 0xf9,
        0x93, 0xb6, 0x1d, 0x5c, 0xc6, 0xb1, 0x2b, 0xe6,
        0x13, 0x44, 0x4d, 0x04, 0xd8, 0xa9, 0x2e, 0x92,
        0x92, 0xfb, 0x65, 0x92, 0x71, 0xbd, 0x87, 0x05
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs47_ProduceCorrectResult){

    const u8 a[] = {
        0x61, 0x4c, 0x74, 0x5c, 0xca, 0xab, 0x67, 0xa9,
        0x91, 0x11, 0x91, 0x3e, 0xf8, 0xdc, 0xe4, 0x53,
        0x93, 0x78, 0xb5, 0xb1, 0xeb, 0x1c, 0x21, 0x34,
        0xb3, 0xdf, 0xa8, 0xc6, 0xd5, 0x9a, 0x83, 0x00
    };
    const u8 b[] = {
        0xc6, 0x53, 0x7b, 0xea, 0x01, 0x83, 0xce, 0xe0,
        0x58, 0xc5, 0xc0, 0x6a, 0x99, 0x64, 0x66, 0xb3,
        0x10, 0xd9, 0xa5, 0x9c, 0x87, 0x03, 0xdf, 0x73,
        0xcd, 0x9b, 0x13, 0xd1, 0xbe, 0x0f, 0x41, 0x05
    };
    const u8 c[] = {
        0x1b, 0xfa, 0x95, 0x4f, 0x45, 0xd2, 0x2c, 0x40,
        0xfd, 0x4a, 0x77, 0x7d, 0x6b, 0xaa, 0x1c, 0xeb,
        0xb4, 0xa8, 0xe0, 0xe9, 0x03, 0x86, 0xe1, 0x2c,
        0xdd, 0x55, 0x81, 0xbd, 0x06, 0x5e, 0xcd, 0x07
    };
    u8 output[32];
    const u8 expected[] = {
        0xf6, 0x52, 0x00, 0x5f, 0xd1, 0xa2, 0x35, 0x35,
        0x8a, 0x98, 0x76, 0x83, 0x07, 0x11, 0x1a, 0x91,
        0x18, 0x27, 0x9d, 0x11, 0x0b, 0x57, 0x14, 0x04,
        0xfe, 0x6f, 0x20, 0xac, 0x22, 0xda, 0x42, 0x00
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs48_ProduceCorrectResult){

    const u8 a[] = {
        0xd9, 0x50, 0x2e, 0x6a, 0xff, 0xc3, 0xa2, 0xca,
        0xa3, 0xf1, 0x49, 0xac, 0xeb, 0x48, 0xbc, 0x5e,
        0xe6, 0x50, 0x09, 0x49, 0x9a, 0xf3, 0xa6, 0xf3,
        0x55, 0xf1, 0x27, 0x65, 0x26, 0x69, 0xaa, 0x00
    };
    const u8 b[] = {
        0x28, 0xbd, 0x6b, 0x84, 0xb1, 0x6b, 0x97, 0x29,
        0x72, 0x83, 0x94, 0x23, 0x2c, 0x82, 0x6f, 0x4d,
        0xb1, 0x66, 0xf9, 0xca, 0xf6, 0x1d, 0x0e, 0x9b,
        0xcf, 0x94, 0x5a, 0x99, 0x43, 0xe7, 0x9a, 0x02
    };
    const u8 c[] = {
        0x38, 0x63, 0xbc, 0x83, 0x98, 0x9f, 0xde, 0x34,
        0x0b, 0x3e, 0xc0, 0x41, 0x8d, 0xef, 0x7c, 0x03,
        0xaa, 0xf2, 0x4e, 0xe7, 0x25, 0x39, 0x1a, 0xca,
        0x59, 0x7e, 0x77, 0xa1, 0xf6, 0x30, 0x3e, 0x00
    };
    u8 output[32];
    const u8 expected[] = {
        0x86, 0x60, 0x38, 0x87, 0x7a, 0xe8, 0xf1, 0x07,
        0xcb, 0x35, 0xd1, 0xe0, 0x54, 0xa2, 0x55, 0x76,
        0xef, 0x2c, 0x28, 0x25, 0x6c, 0xb1, 0x51, 0x67,
        0xce, 0x16, 0x3e, 0xa0, 0xa3, 0x8c, 0x8e, 0x06
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs49_ProduceCorrectResult){

    const u8 a[] = {
        0x09, 0x52, 0x1b, 0xac, 0xf7, 0x4a, 0xba, 0xc5,
        0xe4, 0xd7, 0x79, 0x83, 0x47, 0x1b, 0x34, 0xba,
        0xa8, 0xcc, 0xad, 0x3d, 0x5c, 0xce, 0x87, 0x7c,
        0x6f, 0x85, 0x6f, 0x3a, 0x47, 0x9b, 0x38, 0x09
    };
    const u8 b[] = {
        0x63, 0xbe, 0xce, 0xfe, 0x84, 0x26, 0x15, 0x32,
        0xb3, 0xb8, 0xa5, 0x1c, 0x53, 0x15, 0x00, 0x89,
        0x68, 0xc0, 0xf4, 0x79, 0xc4, 0x9a, 0xe1, 0xe2,
        0x13, 0x53, 0x1f, 0x8c, 0xe2, 0x46, 0x17, 0x07
    };
    const u8 c[] = {
        0x0b, 0xd9, 0x21, 0x12, 0x13, 0xf2, 0xd3, 0x23,
        0xcc, 0xf3, 0x64, 0xf0, 0xe3, 0x1b, 0x82, 0x49,
        0x19, 0xfc, 0x00, 0x42, 0x51, 0x07, 0x36, 0x2d,
        0x70, 0xe4, 0xbb, 0xdb, 0x5d, 0x33, 0xb6, 0x02
    };
    u8 output[32];
    const u8 expected[] = {
        0x28, 0xe9, 0xee, 0x19, 0x23, 0x10, 0x43, 0x6b,
        0xcf, 0x51, 0x7a, 0xef, 0x0a, 0x2e, 0xaf, 0x16,
        0xd0, 0xdb, 0x40, 0xbe, 0xa6, 0xbf, 0x87, 0xaa,
        0x5c, 0x88, 0xf8, 0x1f, 0x19, 0x7a, 0xae, 0x0a
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs50_ProduceCorrectResult){

    const u8 a[] = {
        0x8c, 0x07, 0xc2, 0x9e, 0x48, 0x5b, 0xae, 0xce,
        0x04, 0x6c, 0x7f, 0x43, 0x94, 0x1b, 0x7d, 0x23,
        0xf6, 0x9f, 0x9c, 0x39, 0xd7, 0x7e, 0x32, 0x45,
        0xa4, 0x76, 0x72, 0xbe, 0x19, 0x9c, 0xca, 0x0b
    };
    const u8 b[] = {
        0x1a, 0xe3, 0xf4, 0x61, 0x01, 0x5c, 0x39, 0x8b,
        0x66, 0x25, 0xd0, 0xeb, 0x0f, 0xcb, 0x43, 0x9c,
        0x30, 0xfd, 0x53, 0x9c, 0x66, 0x95, 0xf2, 0x7f,
        0xe7, 0xd9, 0xe2, 0x75, 0x50, 0x6b, 0x9b, 0x09
    };
    const u8 c[] = {
        0xcc, 0xd3, 0xac, 0xb9, 0x2f, 0x7d, 0x1e, 0x4b,
        0x73, 0x9c, 0xc5, 0x2c, 0xd1, 0x06, 0xb9, 0x2d,
        0xf5, 0x94, 0x74, 0x88, 0x22, 0xe4, 0xae, 0xd8,
        0xb9, 0x91, 0xf9, 0xed, 0x69, 0x92, 0x01, 0x04
    };
    u8 output[32];
    const u8 expected[] = {
        0xaf, 0xf1, 0x19, 0x8a, 0xa8, 0x41, 0xe3, 0x13,
        0x4d, 0x97, 0x1f, 0x3f, 0x0e, 0x3c, 0x59, 0x05,
        0xd6, 0x0c, 0x50, 0xf2, 0x24, 0xb1, 0x1e, 0xa5,
        0xd4, 0x4b, 0xfb, 0xb4, 0x5e, 0x77, 0x97, 0x0a
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs51_ProduceCorrectResult){

    const u8 a[] = {
        0x6a, 0x8a, 0x35, 0x1c, 0x44, 0x46, 0x04, 0x8e,
        0x91, 0x27, 0xcf, 0x39, 0x54, 0x1d, 0x66, 0xf2,
        0xda, 0x44, 0xaa, 0x28, 0xd4, 0x29, 0x08, 0xe9,
        0x08, 0x59, 0x0b, 0xad, 0xa9, 0xf0, 0x42, 0x08
    };
    const u8 b[] = {
        0x92, 0x0c, 0x7f, 0xec, 0x1f, 0xd8, 0x2d, 0xda,
        0x0a, 0x63, 0x2d, 0xc6, 0xba, 0xb0, 0x38, 0x19,
        0x9c, 0x4d, 0x97, 0x9c, 0x94, 0xe2, 0x4a, 0xb4,
        0xf6, 0xe7, 0xa3, 0xe1, 0x70, 0xec, 0x8b, 0x06
    };
    const u8 c[] = {
        0x33, 0x00, 0x62, 0x10, 0xe7, 0x03, 0xa3, 0x20,
        0x16, 0xbc, 0x1a, 0x43, 0x98, 0x14, 0xca, 0xd7,
        0x51, 0x12, 0x3f, 0x51, 0x1c, 0x3f, 0xfc, 0x51,
        0x97, 0x26, 0xa9, 0xc5, 0xb9, 0xda, 0x5a, 0x08
    };
    u8 output[32];
    const u8 expected[] = {
        0x0f, 0xe1, 0x57, 0x96, 0xb5, 0x31, 0x04, 0xd5,
        0xea, 0x19, 0xf9, 0x90, 0x11, 0x22, 0x33, 0x79,
        0xed, 0xab, 0xf3, 0x71, 0xc8, 0xea, 0xad, 0xd5,
        0xf0, 0x44, 0x86, 0xf7, 0x9d, 0xc0, 0xa1, 0x0d
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs52_ProduceCorrectResult){

    const u8 a[] = {
        0xc4, 0xc1, 0x76, 0x64, 0xa7, 0x5e, 0x47, 0xbc,
        0x84, 0x3f, 0x06, 0xaf, 0x33, 0xc4, 0x73, 0x95,
        0x4c, 0x87, 0xd0, 0x6a, 0x3e, 0xe4, 0x0e, 0xf0,
        0x1c, 0x6a, 0x05, 0x66, 0x09, 0x99, 0x6b, 0x0c
    };
    const u8 b[] = {
        0xc4, 0x23, 0x91, 0x7b, 0xa1, 0x52, 0xc1, 0xb7,
        0xc1, 0x44, 0xf4, 0x6a, 0x31, 0xe3, 0x5e, 0xff,
        0x7d, 0x3a, 0x77, 0xab, 0x5e, 0x6c, 0xea, 0x2b,
        0x5a, 0x88, 0x18, 0x50, 0x1a, 0xab, 0xa5, 0x06
    };
    const u8 c[] = {
        0xb8, 0x5d, 0x4a, 0x7b, 0xa3, 0x98, 0x76, 0x82,
        0x17, 0xa2, 0xc1, 0xda, 0xc4, 0xde, 0x1c, 0x3e,
        0x3b, 0x17, 0xd5, 0xa1, 0x8f, 0x60, 0xf1, 0x82,
        0xcf, 0x34, 0xf2, 0xd9, 0x44, 0x3a, 0x3a, 0x07
    };
    u8 output[32];
    const u8 expected[] = {
        0x44, 0xd6, 0x8d, 0x6c, 0x5c, 0xe1, 0x99, 0x07,
        0xe0, 0x43, 0x3a, 0xe2, 0xd0, 0x59, 0xa4, 0x14,
        0x1e, 0xf8, 0x83, 0xf0, 0xeb, 0xcd, 0x7e, 0x66,
        0xfb, 0xa2, 0x69, 0x59, 0x5b, 0xb8, 0x55, 0x04
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs53_ProduceCorrectResult){

    const u8 a[] = {
        0x15, 0x72, 0x98, 0x40, 0x54, 0x12, 0x79, 0xef,
        0x6e, 0xc5, 0xc2, 0x97, 0x92, 0x84, 0x87, 0x24,
        0x56, 0x74, 0xca, 0x86, 0x8c, 0x7f, 0xdb, 0xef,
        0xf1, 0xc1, 0xa7, 0x52, 0x79, 0x43, 0x0b, 0x0e
    };
    const u8 b[] = {
        0xbf, 0xfd, 0x82, 0xc1, 0x4f, 0x0a, 0xc4, 0xc0,
        0x39, 0x76, 0x43, 0xec, 0xdb, 0x7d, 0x0b, 0x66,
        0x7d, 0x15, 0x23, 0xeb, 0x43, 0x79, 0x79, 0x62,
        0x56, 0x14, 0x2a, 0x49, 0x18, 0xbf, 0x2e, 0x06
    };
    const u8 c[] = {
        0x2b, 0x33, 0x17, 0xe7, 0x12, 0xeb, 0x4b, 0x54,
        0x03, 0x06, 0x13, 0x1b, 0x3e, 0x80, 0x0d, 0x5f,
        0x76, 0x7c, 0x11, 0x4c, 0x51, 0x52, 0x0a, 0x9a,
        0x4f, 0xf9, 0xf1, 0x16, 0x0d, 0x9d, 0x0b, 0x03
    };
    u8 output[32];
    const u8 expected[] = {
        0x2e, 0x68, 0xd8, 0x8c, 0x6f, 0x17, 0xdd, 0xdc,
        0xa2, 0xbe, 0x80, 0x8f, 0x6d, 0x1b, 0x23, 0xc4,
        0x6e, 0xf8, 0x94, 0xe1, 0x15, 0xb2, 0xda, 0xcb,
        0x04, 0x0f, 0xb2, 0xd4, 0x70, 0x8d, 0x6b, 0x09
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs54_ProduceCorrectResult){

    const u8 a[] = {
        0xb1, 0xb9, 0xbe, 0xb0, 0x43, 0x10, 0x43, 0x7d,
        0x3c, 0xa2, 0x48, 0x8d, 0x0f, 0x26, 0x0c, 0x0e,
        0x5a, 0xf9, 0xe0, 0x5e, 0xce, 0x8c, 0xf7, 0x3b,
        0x53, 0xc9, 0x4d, 0x6b, 0x07, 0x60, 0x46, 0x04
    };
    const u8 b[] = {
        0x4b, 0x09, 0x58, 0x1b, 0xa1, 0xee, 0xee, 0x87,
        0xc1, 0x75, 0xc2, 0x4a, 0x32, 0x81, 0x7e, 0x38,
        0x08, 0xa3, 0xf5, 0x05, 0xef, 0xb5, 0x7d, 0x77,
        0x6c, 0x7a, 0x94, 0x65, 0x91, 0x85, 0x79, 0x07
    };
    const u8 c[] = {
        0x3d, 0x7b, 0xba, 0x66, 0xf4, 0x37, 0x65, 0x49,
        0x78, 0x87, 0x58, 0xeb, 0x7a, 0xed, 0x4a, 0x93,
        0x75, 0x53, 0x64, 0x8e, 0x46, 0x21, 0x5b, 0x4e,
        0x7e, 0x6b, 0xef, 0x63, 0xf8, 0x46, 0x8c, 0x00
    };
    u8 output[32];
    const u8 expected[] = {
        0xd9, 0x02, 0x9c, 0xa5, 0x68, 0x28, 0xa9, 0xe2,
        0xbc, 0x2e, 0x5b, 0x4c, 0x27, 0xac, 0x7d, 0x17,
        0x8f, 0x38, 0x67, 0xe1, 0xca, 0x12, 0x3f, 0x73,
        0x1d, 0x93, 0x29, 0x43, 0x2a, 0xd8, 0xd6, 0x0d
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs55_ProduceCorrectResult){

    const u8 a[] = {
        0xbf, 0x56, 0x87, 0xfb, 0x4f, 0x0f, 0xdd, 0xdb,
        0x58, 0x93, 0x75, 0x3a, 0xe3, 0x5f, 0xe1, 0x6b,
        0x94, 0xc1, 0xac, 0x60, 0x91, 0x9d, 0xe1, 0x6b,
        0x7f, 0x97, 0x11, 0x3c, 0x15, 0x2e, 0x68, 0x0a
    };
    const u8 b[] = {
        0x79, 0x25, 0xf8, 0xbd, 0xe6, 0x0b, 0xd4, 0xb4,
        0xaa, 0x00, 0x7e, 0x06, 0xcd, 0xdd, 0x00, 0xc6,
        0x56, 0x57, 0x50, 0xcb, 0x0b, 0x12, 0x6d, 0xb7,
        0xd5, 0xca, 0x0c, 0xe7, 0x45, 0xbd, 0x92, 0x0e
    };
    const u8 c[] = {
        0xf2, 0x5d, 0x61, 0xfc, 0x8d, 0x18, 0x5b, 0xcc,
        0x15, 0x3a, 0xc7, 0x1f, 0xe7, 0xad, 0x9c, 0x4a,
        0xd4, 0xf9, 0x52, 0xe1, 0x67, 0x25, 0x3f, 0xa0,
        0x55, 0x3e, 0xc6, 0xd4, 0x25, 0x8a, 0x8b, 0x0f
    };
    u8 output[32];
    const u8 expected[] = {
        0x96, 0x5b, 0xcf, 0x2f, 0xa6, 0xf8, 0xb5, 0x44,
        0x87, 0xf8, 0xe0, 0xd0, 0x43, 0xad, 0xa7, 0x2b,
        0xbf, 0x10, 0x53, 0x6b, 0x22, 0x43, 0x2d, 0x56,
        0xb7, 0x82, 0x3c, 0x1c, 0x11, 0x4b, 0x86, 0x0a
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs56_ProduceCorrectResult){

    const u8 a[] = {
        0x85, 0xd5, 0x72, 0x73, 0xac, 0x05, 0x9f, 0xc8,
        0xab, 0x2b, 0x05, 0x67, 0x59, 0x9c, 0x7c, 0x22,
        0x98, 0x66, 0x83, 0x3a, 0xf0, 0x1d, 0x00, 0xbd,
        0x79, 0x41, 0x30, 0x87, 0x4f, 0xd7, 0x9b, 0x01
    };
    const u8 b[] = {
        0xd3, 0x7d, 0x71, 0x06, 0x1a, 0xe9, 0x1c, 0x42,
        0x04, 0x39, 0x3a, 0x4a, 0x89, 0x64, 0xd6, 0x62,
        0x1e, 0xba, 0x56, 0x64, 0x7c, 0x60, 0xe7, 0x1b,
        0x2b, 0xe1, 0x6a, 0xbe, 0x29, 0x30, 0x21, 0x06
    };
    const u8 c[] = {
        0x41, 0xb7, 0x38, 0x43, 0x5b, 0xf3, 0xad, 0x8f,
        0xc2, 0xf0, 0xd6, 0x91, 0xe9, 0xdd, 0xdd, 0xf6,
        0xd5, 0xee, 0x3f, 0xbb, 0x33, 0x3b, 0x10, 0x62,
        0x30, 0x44, 0x2e, 0x11, 0x9c, 0x0b, 0x31, 0x01
    };
    u8 output[32];
    const u8 expected[] = {
        0xbd, 0x13, 0x59, 0x39, 0x9e, 0x66, 0xc4, 0xf4,
        0xbc, 0x0b, 0xb6, 0xe2, 0x46, 0xbd, 0x1d, 0xf7,
        0xb8, 0xea, 0xef, 0x80, 0xf0, 0xa5, 0x8d, 0x74,
        0x4d, 0xa2, 0x87, 0x8a, 0xb1, 0x59, 0xc5, 0x04
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs57_ProduceCorrectResult){

    const u8 a[] = {
        0x47, 0xa1, 0x02, 0x9d, 0x85, 0x0b, 0xf8, 0x65,
        0xe7, 0x04, 0x5c, 0xf7, 0xe5, 0x6c, 0xaa, 0x6d,
        0x82, 0x3d, 0x49, 0xdd, 0x7a, 0xbb, 0x37, 0xbe,
        0xc4, 0x8a, 0xa2, 0x19, 0xfe, 0xfb, 0x22, 0x07
    };
    const u8 b[] = {
        0x53, 0x76, 0xf6, 0x07, 0x27, 0x71, 0xbd, 0x02,
        0x26, 0xd4, 0xd9, 0x46, 0xbd, 0x67, 0xb9, 0x87,
        0xbe, 0x04, 0x55, 0x99, 0x33, 0x59, 0x0e, 0x9c,
        0x08, 0x94, 0x1d, 0x7e, 0x4e, 0xaa, 0x98, 0x05
    };
    const u8 c[] = {
        0x84, 0x56, 0x91, 0xd8, 0x6d, 0x23, 0x86, 0x8d,
        0x35, 0xa9, 0x42, 0xf1, 0xa2, 0x24, 0x74, 0xe1,
        0x8b, 0xfa, 0xd7, 0xdf, 0x98, 0x15, 0xf0, 0x12,
        0x41, 0x0c, 0x30, 0x91, 0x06, 0x72, 0x4f, 0x05
    };
    u8 output[32];
    const u8 expected[] = {
        0x54, 0xc1, 0x61, 0xc7, 0xff, 0x8f, 0x82, 0x9d,
        0x90, 0xd1, 0xf2, 0x17, 0xb2, 0xe0, 0x9e, 0x8d,
        0x09, 0x75, 0x05, 0xf8, 0xc9, 0x5c, 0x08, 0xd7,
        0x8b, 0x44, 0x77, 0x2e, 0xf8, 0x3e, 0x58, 0x0d
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs58_ProduceCorrectResult){

    const u8 a[] = {
        0x1a, 0x10, 0x78, 0x7f, 0xab, 0x8e, 0x2e, 0xd5,
        0x18, 0x97, 0xb6, 0x5b, 0x5b, 0x2c, 0x90, 0x21,
        0x73, 0x49, 0xfa, 0x7b, 0xb4, 0x5d, 0x70, 0x0e,
        0x50, 0xf8, 0xe8, 0x77, 0xbd, 0x7e, 0xde, 0x0a
    };
    const u8 b[] = {
        0xe2, 0xe4, 0xd0, 0xb1, 0xfc, 0x10, 0xc8, 0xc6,
        0xf3, 0x83, 0xd8, 0x20, 0x54, 0x02, 0x0d, 0xff,
        0x84, 0x34, 0x81, 0xea, 0x99, 0xe5, 0x7b, 0xde,
        0xbe, 0x04, 0x10, 0x82, 0x56, 0x7b, 0x60, 0x0b
    };
    const u8 c[] = {
        0xc0, 0x23, 0xc7, 0x53, 0x6f, 0x1b, 0x01, 0xed,
        0x22, 0xce, 0x9e, 0xb3, 0x0a, 0x87, 0xff, 0xc5,
        0xd0, 0x71, 0xe6, 0x5b, 0x1d, 0x42, 0x82, 0x82,
        0x51, 0x79, 0xfd, 0xa0, 0x32, 0xf7, 0x0b, 0x01
    };
    u8 output[32];
    const u8 expected[] = {
        0xf7, 0x7c, 0x3f, 0x82, 0x64, 0xe9, 0x59, 0x17,
        0x40, 0x39, 0x88, 0xaa, 0x74, 0x7d, 0x52, 0xac,
        0xcb, 0xe0, 0xe9, 0xfc, 0xa1, 0x84, 0x7d, 0x69,
        0x0d, 0x6d, 0x87, 0x38, 0xce, 0x7c, 0xe9, 0x09
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs59_ProduceCorrectResult){

    const u8 a[] = {
        0xe4, 0x9e, 0xd3, 0x59, 0x1d, 0x0b, 0xe4, 0xa1,
        0x00, 0xa8, 0x70, 0xc1, 0x12, 0xfb, 0x3c, 0xe8,
        0xc0, 0x2c, 0x53, 0xac, 0x1c, 0x49, 0xbe, 0xc7,
        0x4a, 0x83, 0xd0, 0xab, 0x97, 0x0c, 0x0a, 0x0a
    };
    const u8 b[] = {
        0xb9, 0x97, 0x00, 0xf5, 0x6c, 0xc0, 0x79, 0x9a,
        0xd1, 0x99, 0x40, 0x5b, 0xc0, 0xfc, 0xfa, 0x0c,
        0x5e, 0xe7, 0xa8, 0xc0, 0x36, 0x52, 0xc0, 0x67,
        0x04, 0x2a, 0x5b, 0xf0, 0xd8, 0x3d, 0xab, 0x02
    };
    const u8 c[] = {
        0x27, 0x13, 0x2e, 0xeb, 0xb5, 0xcf, 0xc0, 0x6b,
        0x85, 0x75, 0x6f, 0x30, 0x1d, 0x79, 0xe6, 0x76,
        0xd7, 0xfa, 0x95, 0xd1, 0x6b, 0xdc, 0xb5, 0x8a,
        0x6d, 0xec, 0x76, 0xe6, 0x23, 0xc2, 0xd0, 0x0f
    };
    u8 output[32];
    const u8 expected[] = {
        0x71, 0x4e, 0x9e, 0x2f, 0xde, 0xe1, 0x67, 0x8f,
        0x01, 0x47, 0xc1, 0xd1, 0x71, 0x9a, 0xc5, 0xf3,
        0x43, 0xdd, 0xf9, 0x1c, 0xa0, 0x49, 0x29, 0xb6,
        0xbb, 0x2c, 0x60, 0x94, 0xbc, 0x62, 0x0c, 0x03
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs60_ProduceCorrectResult){

    const u8 a[] = {
        0x22, 0xf2, 0xb0, 0x54, 0x23, 0x6f, 0x6e, 0x51,
        0x2b, 0x50, 0x4d, 0xb4, 0xe0, 0x6f, 0x79, 0xf4,
        0x61, 0x9c, 0x81, 0xf5, 0xfd, 0x9a, 0xab, 0x76,
        0xb2, 0x94, 0x38, 0x30, 0xd4, 0xb9, 0x0a, 0x00
    };
    const u8 b[] = {
        0xe4, 0xfb, 0x7c, 0xa6, 0x59, 0xd7, 0xc3, 0x3a,
        0xe7, 0x68, 0x36, 0x9c, 0xce, 0x4c, 0x26, 0x1e,
        0xd2, 0x45, 0x94, 0xbd, 0x39, 0x95, 0x85, 0xe7,
        0xbb, 0x67, 0x9a, 0x67, 0x74, 0x0b, 0x7a, 0x0b
    };
    const u8 c[] = {
        0x3d, 0xae, 0x1d, 0x40, 0x39, 0xe5, 0xec, 0xf2,
        0x34, 0x32, 0x78, 0xdd, 0x35, 0x29, 0xca, 0xd9,
        0x2d, 0xe7, 0x24, 0xe9, 0x25, 0xf2, 0x7f, 0xe9,
        0xe3, 0x64, 0x22, 0x52, 0xed, 0xfb, 0x91, 0x0f
    };
    u8 output[32];
    const u8 expected[] = {
        0xb4, 0x67, 0x17, 0x31, 0xea, 0x53, 0x9b, 0x45,
        0x2c, 0x7f, 0xf9, 0x6f, 0xdb, 0xcb, 0x4f, 0xc3,
        0x39, 0x48, 0x5c, 0x84, 0x6c, 0xe0, 0xc7, 0x34,
        0x2c, 0xf1, 0x38, 0x0a, 0x8e, 0x7b, 0x4d, 0x09
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs61_ProduceCorrectResult){

    const u8 a[] = {
        0x78, 0x70, 0xd8, 0xd1, 0xbb, 0x9e, 0xfd, 0x04,
        0x96, 0x51, 0xba, 0xcd, 0x86, 0x22, 0x0e, 0xe2,
        0x4c, 0xf6, 0xfe, 0x49, 0xc1, 0x43, 0x99, 0xcd,
        0x36, 0xe3, 0x24, 0x43, 0xe8, 0xdd, 0x00, 0x07
    };
    const u8 b[] = {
        0xcc, 0x52, 0x6f, 0x43, 0x6d, 0x90, 0x23, 0xc8,
        0x21, 0x29, 0xd6, 0x91, 0xad, 0xfd, 0xb8, 0x35,
        0xff, 0x7a, 0xea, 0xdf, 0x69, 0xbb, 0x64, 0x4d,
        0x24, 0xca, 0x77, 0x78, 0xb9, 0x00, 0x19, 0x02
    };
    const u8 c[] = {
        0x86, 0x05, 0x3d, 0xa8, 0x96, 0xd0, 0x13, 0x52,
        0x01, 0x22, 0x91, 0xa8, 0x8a, 0xe1, 0xfb, 0x86,
        0x64, 0x31, 0xfc, 0xf1, 0x33, 0xd7, 0x89, 0x5d,
        0xbd, 0x8d, 0x92, 0x06, 0x08, 0x27, 0x8f, 0x08
    };
    u8 output[32];
    const u8 expected[] = {
        0xa0, 0xc6, 0x2f, 0x69, 0x8b, 0xc8, 0xa7, 0x69,
        0x61, 0xaf, 0x75, 0x5e, 0x3f, 0x8f, 0x77, 0xe7,
        0x1a, 0xac, 0xcc, 0x29, 0x04, 0xcd, 0x7b, 0x23,
        0x04, 0xbc, 0xe1, 0x97, 0x49, 0x94, 0x57, 0x0a
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs62_ProduceCorrectResult){

    const u8 a[] = {
        0x42, 0x6f, 0xbf, 0x6d, 0x52, 0xf4, 0x32, 0x84,
        0xa0, 0x6d, 0xfb, 0xca, 0x8b, 0x04, 0x0d, 0xa3,
        0xc7, 0xbb, 0xb5, 0x6e, 0xe8, 0x77, 0x68, 0xac,
        0xbe, 0xfc, 0xfa, 0xff, 0x1e, 0x18, 0xc2, 0x06
    };
    const u8 b[] = {
        0xf0, 0xfc, 0x55, 0x10, 0xd0, 0xe5, 0xed, 0x72,
        0x92, 0xc4, 0x16, 0xaa, 0xa4, 0x01, 0x1e, 0xb0,
        0x12, 0x94, 0x91, 0x11, 0xa6, 0xc9, 0xcc, 0x7d,
        0x05, 0x3d, 0x12, 0xa3, 0xd8, 0x9a, 0xe6, 0x0f
    };
    const u8 c[] = {
        0x14, 0xd1, 0x47, 0x4d, 0x1e, 0x86, 0x23, 0x87,
        0x45, 0x8a, 0xd7, 0xb9, 0x0f, 0x75, 0x16, 0x3d,
        0x17, 0x98, 0x30, 0xc0, 0x13, 0x9a, 0xac, 0x0e,
        0x3c, 0xb3, 0x89, 0x68, 0x86, 0xec, 0xb0, 0x05
    };
    u8 output[32];
    const u8 expected[] = {
        0xd3, 0xb8, 0xe8, 0x6b, 0x81, 0x1b, 0x93, 0x67,
        0xcb, 0x08, 0x99, 0x50, 0x39, 0x99, 0x02, 0xbb,
        0x2e, 0xe9, 0xe8, 0x59, 0x12, 0xc4, 0x16, 0x54,
        0xd6, 0x9d, 0x63, 0x67, 0x08, 0x46, 0xfc, 0x0c
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs63_ProduceCorrectResult){

    const u8 a[] = {
        0x86, 0xd1, 0x8a, 0x66, 0x5c, 0xa7, 0x90, 0x31,
        0x9e, 0x6c, 0x58, 0x76, 0x30, 0xc6, 0x7c, 0xdc,
        0x54, 0xbc, 0xbe, 0xee, 0xd8, 0xca, 0x94, 0x48,
        0x5c, 0x65, 0x19, 0xed, 0x9a, 0x3c, 0x77, 0x06
    };
    const u8 b[] = {
        0xe1, 0x5c, 0x37, 0xd0, 0x44, 0x6e, 0x99, 0xc6,
        0xf3, 0x72, 0x2a, 0x5d, 0x2f, 0xf5, 0x3b, 0x9e,
        0x2a, 0x83, 0x5e, 0xcb, 0xf8, 0xc9, 0x0c, 0x4b,
        0x0b, 0xa5, 0xf6, 0xfb, 0xfb, 0xea, 0x42, 0x01
    };
    const u8 c[] = {
        0xbd, 0x42, 0xcb, 0x68, 0x71, 0x07, 0xbe, 0xd4,
        0x29, 0xdf, 0x35, 0x87, 0xe7, 0xb1, 0x4e, 0x86,
        0xc8, 0xd6, 0x82, 0x82, 0x85, 0xc2, 0x19, 0xe7,
        0x2b, 0x37, 0x74, 0xbc, 0x73, 0xb4, 0x72, 0x06
    };
    u8 output[32];
    const u8 expected[] = {
        0x0e, 0x25, 0x68, 0x5d, 0xda, 0xfa, 0x2d, 0x20,
        0x96, 0xdc, 0x8d, 0xf2, 0x8f, 0x94, 0x9c, 0x41,
        0xb2, 0x30, 0x7b, 0x9d, 0x44, 0xcf, 0x80, 0x25,
        0x2b, 0x11, 0x25, 0xe7, 0xe9, 0xff, 0xe8, 0x0c
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs64_ProduceCorrectResult){

    const u8 a[] = {
        0xa9, 0x9d, 0xb0, 0x1b, 0x6e, 0xee, 0xb4, 0x56,
        0x8f, 0x6a, 0xb1, 0xa1, 0x07, 0x65, 0xa0, 0x64,
        0xe5, 0xba, 0x55, 0x47, 0xe1, 0x58, 0xd0, 0x2a,
        0xbe, 0x05, 0x32, 0x7c, 0xb5, 0xa4, 0x92, 0x06
    };
    const u8 b[] = {
        0xe0, 0x5f, 0x8e, 0x4d, 0x49, 0x61, 0x28, 0xdf,
        0x2f, 0xb8, 0x42, 0x2b, 0x23, 0x11, 0x5c, 0x85,
        0xdb, 0xc8, 0xb4, 0xf0, 0x64, 0xea, 0x23, 0x65,
        0xb5, 0x20, 0xf6, 0x05, 0x51, 0xe5, 0x30, 0x03
    };
    const u8 c[] = {
        0x96, 0xa3, 0x90, 0x4a, 0xe2, 0xb7, 0xeb, 0xb1,
        0xc4, 0x29, 0xa2, 0xe4, 0xf1, 0x80, 0x67, 0xf2,
        0x31, 0x9e, 0xda, 0xf1, 0x32, 0xaa, 0xbc, 0x55,
        0x5b, 0x3e, 0xe4, 0x4e, 0x24, 0xf5, 0x26, 0x0b
    };
    u8 output[32];
    const u8 expected[] = {
        0x49, 0x86, 0x49, 0xe7, 0x0d, 0x93, 0x61, 0x31,
        0x7d, 0x1c, 0x1e, 0x24, 0x76, 0xeb, 0x39, 0xb7,
        0x90, 0x75, 0x20, 0x62, 0x0c, 0x69, 0xe8, 0x66,
        0xe4, 0xa5, 0xda, 0x85, 0x05, 0x33, 0x58, 0x0e
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs65_ProduceCorrectResult){

    const u8 a[] = {
        0xd0, 0x18, 0x3e, 0x00, 0x9d, 0xf4, 0xcc, 0x61,
        0x9e, 0x30, 0x5f, 0x54, 0xff, 0x90, 0x1c, 0x0d,
        0xf1, 0x6d, 0x71, 0x2c, 0xb9, 0x27, 0xf8, 0xcf,
        0xda, 0x32, 0xd3, 0x8c, 0x63, 0x88, 0xd6, 0x07
    };
    const u8 b[] = {
        0x99, 0x24, 0xe2, 0x19, 0x63, 0x99, 0x74, 0x18,
        0x2c, 0x20, 0xa6, 0xb2, 0xc4, 0x04, 0x05, 0xa6,
        0x97, 0x4c, 0x7b, 0x41, 0x37, 0xd5, 0xf0, 0x85,
        0xbc, 0x7e, 0x53, 0xe3, 0xea, 0x98, 0x51, 0x0c
    };
    const u8 c[] = {
        0xc0, 0xc7, 0x52, 0x3b, 0x8f, 0x2a, 0x31, 0xe2,
        0x3c, 0x7b, 0x3d, 0x98, 0xe1, 0xdc, 0x82, 0x79,
        0x0d, 0x0f, 0xc6, 0xa2, 0xd6, 0x91, 0x43, 0x96,
        0x30, 0xc5, 0x06, 0xd1, 0xa2, 0x8b, 0x21, 0x09
    };
    u8 output[32];
    const u8 expected[] = {
        0x4b, 0xb9, 0xb7, 0x3f, 0x6d, 0x4c, 0xcc, 0x02,
        0xd6, 0x70, 0x42, 0xb2, 0xe6, 0x40, 0x50, 0x00,
        0x12, 0x60, 0xbd, 0x9e, 0x45, 0xb4, 0x33, 0x64,
        0xcd, 0xf1, 0x88, 0x19, 0xd6, 0xf4, 0xeb, 0x0b
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs66_ProduceCorrectResult){

    const u8 a[] = {
        0xcd, 0x29, 0x26, 0xd7, 0xae, 0x71, 0xc7, 0xa7,
        0x89, 0x73, 0xdf, 0x36, 0x3f, 0xe7, 0x64, 0xd2,
        0xc5, 0x1e, 0x6f, 0x52, 0xf0, 0x89, 0x80, 0x5b,
        0xf0, 0x4e, 0x08, 0x7a, 0x78, 0x34, 0x55, 0x02
    };
    const u8 b[] = {
        0x81, 0x53, 0xf9, 0xe4, 0x21, 0x6e, 0xe2, 0x0e,
        0x66, 0xba, 0xee, 0xca, 0xe6, 0xb7, 0x62, 0xd9,
        0xb9, 0xf2, 0x16, 0xcd, 0x54, 0x52, 0x0a, 0xc5,
        0x71, 0x8e, 0x94, 0x5d, 0x54, 0x2c, 0xcb, 0x0b
    };
    const u8 c[] = {
        0x17, 0x5d, 0x23, 0xf9, 0xad, 0x43, 0x7e, 0x8d,
        0x77, 0xc8, 0x0f, 0x50, 0x6e, 0x52, 0x67, 0xe4,
        0xa1, 0xa4, 0xef, 0x9f, 0x46, 0xdb, 0xd9, 0xb4,
        0x73, 0x70, 0x0a, 0xb6, 0x46, 0xd5, 0x03, 0x0a
    };
    u8 output[32];
    const u8 expected[] = {
        0x68, 0x1b, 0xe1, 0xac, 0x11, 0x83, 0xcb, 0x1c,
        0x0d, 0x17, 0xa7, 0x67, 0xe1, 0x98, 0xe8, 0xa3,
        0x3f, 0x9f, 0x0f, 0x1d, 0x2e, 0xc9, 0x96, 0xad,
        0x20, 0x3f, 0x2d, 0xf8, 0xac, 0x0c, 0x67, 0x06
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs67_ProduceCorrectResult){

    const u8 a[] = {
        0x84, 0xc8, 0x85, 0x10, 0x17, 0x07, 0xad, 0x4e,
        0xb9, 0xea, 0xcd, 0xd7, 0xda, 0x2b, 0xf5, 0xf1,
        0x6a, 0x63, 0xc2, 0x7f, 0x5b, 0x17, 0xa3, 0xe5,
        0xaa, 0x99, 0xa7, 0x8b, 0x4a, 0x45, 0x8a, 0x05
    };
    const u8 b[] = {
        0x6d, 0x69, 0x5d, 0xb1, 0x93, 0x5f, 0xb5, 0xa3,
        0x55, 0xe2, 0xb4, 0xe2, 0x6d, 0xf3, 0xee, 0xfb,
        0x5c, 0x99, 0xb5, 0x39, 0x0f, 0xa5, 0xc7, 0x1c,
        0xc6, 0x71, 0x2e, 0x87, 0xdf, 0x01, 0x08, 0x0d
    };
    const u8 c[] = {
        0xf6, 0x7c, 0x3b, 0x69, 0xc7, 0x06, 0xe9, 0xf9,
        0x6d, 0xc6, 0x04, 0xfe, 0x11, 0x91, 0xcd, 0xe1,
        0xb2, 0xcb, 0x94, 0xfd, 0x1a, 0x62, 0xee, 0x00,
        0xed, 0xea, 0x91, 0x58, 0x62, 0x9c, 0x0a, 0x00
    };
    u8 output[32];
    const u8 expected[] = {
        0xf0, 0xe2, 0x60, 0x75, 0x83, 0xc4, 0x54, 0xf2,
        0x13, 0x05, 0x69, 0xa2, 0x91, 0xd2, 0xe2, 0xdd,
        0x01, 0x98, 0x12, 0x2f, 0x0f, 0x28, 0x1c, 0xf8,
        0x8a, 0x40, 0xdf, 0xc4, 0x43, 0xa1, 0xac, 0x07
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs68_ProduceCorrectResult){

    const u8 a[] = {
        0x59, 0xc3, 0x74, 0x98, 0xde, 0xe0, 0xea, 0xd3,
        0xd3, 0xd7, 0xce, 0x62, 0xe8, 0x2a, 0x5c, 0xa8,
        0x64, 0x2e, 0x07, 0xf2, 0xd7, 0x0d, 0x2b, 0xdb,
        0xef, 0x52, 0x21, 0x96, 0x98, 0xbf, 0x4b, 0x03
    };
    const u8 b[] = {
        0x43, 0x08, 0x49, 0x06, 0x3b, 0xdd, 0x9e, 0x71,
        0xc2, 0x2c, 0x97, 0x26, 0xc1, 0x38, 0x79, 0xf2,
        0x83, 0x8d, 0xdd, 0x7a, 0xba, 0xfe, 0x94, 0x3e,
        0x03, 0x5f, 0x54, 0x18, 0x44, 0xdb, 0xfb, 0x02
    };
    const u8 c[] = {
        0xe5, 0x62, 0x97, 0x54, 0xd0, 0xb6, 0x03, 0xcf,
        0x49, 0xf6, 0x21, 0x62, 0x75, 0x85, 0xbb, 0xf3,
        0x2a, 0xf7, 0xe1, 0x18, 0xf4, 0x08, 0x48, 0xe9,
        0x2e, 0xee, 0xce, 0x38, 0xdd, 0xc0, 0x2c, 0x07
    };
    u8 output[32];
    const u8 expected[] = {
        0x22, 0x5d, 0x7b, 0x6d, 0x17, 0xe2, 0xd9, 0x32,
        0x90, 0xe2, 0x70, 0x25, 0x12, 0x87, 0x25, 0xa4,
        0x1d, 0xbb, 0x3b, 0x12, 0x1c, 0xc0, 0x53, 0x30,
        0x1f, 0xcd, 0xf3, 0xc3, 0xb0, 0xf4, 0x90, 0x05
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs69_ProduceCorrectResult){

    const u8 a[] = {
        0x88, 0x5d, 0xfc, 0x71, 0xc5, 0x72, 0x0d, 0x2a,
        0x55, 0xae, 0x4a, 0x2f, 0x2e, 0xf7, 0x2c, 0xa9,
        0x45, 0x6b, 0x26, 0xfc, 0x9b, 0x60, 0x91, 0x76,
        0x55, 0xd4, 0x01, 0x9a, 0xdb, 0x7b, 0xca, 0x0a
    };
    const u8 b[] = {
        0x79, 0x71, 0x5c, 0x7f, 0x42, 0x46, 0x96, 0x59,
        0xf5, 0xcc, 0x66, 0xb9, 0xdb, 0xf4, 0x4a, 0x56,
        0x59, 0x24, 0xda, 0x9d, 0x46, 0x33, 0xfb, 0x5e,
        0xab, 0x2a, 0xd3, 0x09, 0x32, 0x70, 0xb5, 0x07
    };
    const u8 c[] = {
        0xd6, 0x25, 0x5d, 0xc9, 0xce, 0xc9, 0x33, 0x6a,
        0x30, 0xcf, 0x75, 0x73, 0x2f, 0x47, 0x74, 0x0c,
        0xb9, 0xa5, 0xc5, 0xf1, 0x91, 0xe0, 0xc8, 0x42,
        0xd9, 0x75, 0x22, 0x3e, 0xc3, 0x86, 0xa7, 0x03
    };
    u8 output[32];
    const u8 expected[] = {
        0xe1, 0x14, 0xce, 0x20, 0x33, 0x08, 0x58, 0xe7,
        0xd3, 0x59, 0x0d, 0x4f, 0x5a, 0x86, 0x79, 0x74,
        0xc6, 0x8d, 0x1b, 0x27, 0x2d, 0xa5, 0x95, 0x33,
        0xa2, 0x4d, 0x47, 0x7a, 0x55, 0xfb, 0x52, 0x03
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs70_ProduceCorrectResult){

    const u8 a[] = {
        0xb3, 0x19, 0x99, 0x6e, 0x53, 0x1b, 0x09, 0xa7,
        0x75, 0x17, 0x25, 0x29, 0x1b, 0xc9, 0x98, 0xf1,
        0xfc, 0xe8, 0x36, 0xbe, 0x98, 0x46, 0x88, 0x13,
        0xed, 0x39, 0xd9, 0x01, 0xdd, 0xb9, 0xa4, 0x03
    };
    const u8 b[] = {
        0xcb, 0x6d, 0x69, 0x88, 0xeb, 0xda, 0xfa, 0x9c,
        0xce, 0x96, 0xe1, 0x6d, 0xa0, 0x85, 0x57, 0xa2,
        0x03, 0xed, 0xef, 0xa2, 0xf8, 0x33, 0x77, 0x06,
        0x87, 0x9c, 0x5a, 0x3c, 0x6b, 0x90, 0x04, 0x07
    };
    const u8 c[] = {
        0xcb, 0x8a, 0x16, 0xc2, 0x3b, 0xd2, 0xe7, 0x67,
        0x1a, 0xfa, 0xd5, 0x8e, 0xf9, 0x10, 0xc6, 0x52,
        0x4e, 0xd8, 0x72, 0x0a, 0x0c, 0x64, 0xae, 0x4b,
        0x92, 0x0b, 0x02, 0x81, 0x4a, 0xaa, 0x2e, 0x05
    };
    u8 output[32];
    const u8 expected[] = {
        0x21, 0xf0, 0x54, 0x73, 0x0f, 0x93, 0x88, 0x73,
        0x93, 0xe6, 0x72, 0x55, 0x4b, 0xd0, 0x74, 0x84,
        0x87, 0x70, 0xc2, 0xbf, 0x0a, 0x55, 0x39, 0x58,
        0x73, 0x5a, 0x65, 0x91, 0xda, 0xf5, 0xf8, 0x07
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs71_ProduceCorrectResult){

    const u8 a[] = {
        0x87, 0x80, 0x69, 0x48, 0xe2, 0xcc, 0x60, 0x69,
        0x22, 0xd9, 0xae, 0xf3, 0x68, 0x22, 0xac, 0x50,
        0x71, 0xb2, 0xe4, 0xe6, 0x9e, 0xd7, 0x34, 0x38,
        0x5a, 0x64, 0x1b, 0x61, 0x13, 0x33, 0x3c, 0x0a
    };
    const u8 b[] = {
        0x22, 0xb7, 0x2e, 0x56, 0x2a, 0x3e, 0x28, 0x20,
        0x45, 0x5e, 0x5f, 0xd9, 0xff, 0x53, 0xc5, 0xed,
        0x03, 0x26, 0xe5, 0x27, 0x59, 0x86, 0x27, 0x5e,
        0x1c, 0x36, 0x4f, 0x12, 0x44, 0xc3, 0x53, 0x02
    };
    const u8 c[] = {
        0x30, 0x05, 0xca, 0x92, 0x51, 0xa9, 0xa4, 0x1c,
        0x0c, 0x9b, 0x4b, 0xc3, 0x2f, 0x2e, 0x7f, 0x2a,
        0x50, 0xe4, 0xe1, 0x0c, 0xd2, 0x52, 0x5a, 0xee,
        0x14, 0x5e, 0xf0, 0xea, 0x24, 0xb5, 0x8a, 0x05
    };
    u8 output[32];
    const u8 expected[] = {
        0x0b, 0x7a, 0x78, 0xeb, 0x6a, 0x56, 0xf0, 0x44,
        0x0e, 0xd7, 0x46, 0x1d, 0xe6, 0xe6, 0x81, 0xe9,
        0x89, 0xc7, 0x5b, 0x68, 0xa5, 0xdf, 0xaa, 0x51,
        0xf2, 0x4e, 0x2a, 0x29, 0x7b, 0x05, 0x2d, 0x00
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs72_ProduceCorrectResult){

    const u8 a[] = {
        0xad, 0x3f, 0xa3, 0x01, 0xcd, 0x07, 0xb9, 0x3b,
        0xd2, 0xd1, 0xe4, 0x56, 0x39, 0xb4, 0xaf, 0x91,
        0x5a, 0xd5, 0x5f, 0x60, 0xb3, 0x0b, 0x24, 0x79,
        0x07, 0x9d, 0xc5, 0x90, 0xb8, 0x73, 0xbd, 0x0c
    };
    const u8 b[] = {
        0x7a, 0x17, 0x55, 0x89, 0x77, 0xa8, 0x52, 0x37,
        0x36, 0x4c, 0x25, 0xf1, 0x3f, 0xce, 0xa3, 0x6d,
        0x94, 0x51, 0xcc, 0x36, 0x18, 0x78, 0x82, 0xa5,
        0xe7, 0x71, 0xe7, 0xc3, 0xf6, 0x90, 0x64, 0x0c
    };
    const u8 c[] = {
        0x9c, 0x7e, 0x32, 0xb4, 0xf5, 0xe1, 0xf9, 0x40,
        0x13, 0x6a, 0x2d, 0xf4, 0xa3, 0x33, 0xf8, 0x74,
        0xf9, 0x1f, 0xfb, 0x14, 0x04, 0xe2, 0x71, 0xee,
        0x98, 0x2b, 0xe9, 0x02, 0x7d, 0xd7, 0xc3, 0x01
    };
    u8 output[32];
    const u8 expected[] = {
        0x2d, 0xf6, 0x54, 0x79, 0xab, 0x28, 0x2d, 0x40,
        0x13, 0xec, 0x10, 0x9a, 0x9c, 0x6b, 0x90, 0x5a,
        0x40, 0xe7, 0xe5, 0x88, 0x99, 0x8b, 0x23, 0xfd,
        0x6e, 0xe6, 0x14, 0xe7, 0x61, 0x27, 0x82, 0x07
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs73_ProduceCorrectResult){

    const u8 a[] = {
        0xd8, 0xdf, 0xa7, 0xf8, 0xa8, 0x86, 0xc3, 0xc6,
        0xd1, 0xd4, 0x2f, 0xc9, 0x61, 0x09, 0x35, 0x9e,
        0xe2, 0xf5, 0xe8, 0x5e, 0x14, 0xf1, 0x52, 0xc6,
        0xff, 0x48, 0xbc, 0x34, 0x69, 0x97, 0x3f, 0x0d
    };
    const u8 b[] = {
        0xa6, 0x66, 0x9f, 0x44, 0x80, 0x84, 0x8a, 0x92,
        0xaf, 0x82, 0x90, 0x02, 0x41, 0xd4, 0x9d, 0xba,
        0x0f, 0x77, 0x70, 0xc8, 0xe6, 0xbd, 0x5e, 0xb1,
        0xbd, 0xbb, 0xd1, 0x2d, 0xe9, 0x3b, 0x10, 0x0a
    };
    const u8 c[] = {
        0xa4, 0xf6, 0x50, 0x2d, 0x8f, 0xaf, 0xb0, 0x20,
        0x50, 0x31, 0x02, 0x52, 0xa0, 0xea, 0x6b, 0x7f,
        0xa3, 0x1e, 0x72, 0xd5, 0x1d, 0x2b, 0x33, 0xb5,
        0x0d, 0x75, 0x45, 0xd6, 0xc7, 0xee, 0x9d, 0x0c
    };
    u8 output[32];
    const u8 expected[] = {
        0x14, 0xc6, 0xf3, 0xcd, 0xd3, 0xdc, 0xb5, 0x51,
        0x70, 0x13, 0x03, 0x8d, 0x5d, 0xd9, 0x3f, 0x7a,
        0x61, 0xe8, 0x33, 0x0b, 0x34, 0xe8, 0x77, 0x0f,
        0x44, 0x1c, 0x6e, 0x74, 0x14, 0x38, 0x67, 0x0e
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs74_ProduceCorrectResult){

    const u8 a[] = {
        0xd4, 0x83, 0xc0, 0xbe, 0x17, 0x84, 0x94, 0xb9,
        0x46, 0x93, 0x2c, 0x9d, 0x9b, 0xea, 0x9e, 0xb6,
        0x71, 0xa0, 0x98, 0xfd, 0x65, 0x5c, 0xdf, 0x3a,
        0x5f, 0x50, 0x91, 0x46, 0x18, 0xe7, 0x8c, 0x01
    };
    const u8 b[] = {
        0xfb, 0x38, 0x1a, 0x4b, 0x95, 0x1c, 0xba, 0xa1,
        0x49, 0x39, 0x62, 0xf9, 0xe1, 0x87, 0x5d, 0x9b,
        0x28, 0x38, 0x16, 0x90, 0xda, 0x12, 0xa9, 0x3e,
        0x14, 0x63, 0x1a, 0x27, 0x96, 0x66, 0x1f, 0x09
    };
    const u8 c[] = {
        0xd2, 0xef, 0x71, 0x26, 0x9d, 0x6b, 0x9d, 0xe5,
        0x70, 0xd0, 0xa3, 0xa8, 0xf3, 0xcb, 0x6e, 0x7b,
        0x44, 0x44, 0xa3, 0xae, 0x39, 0x78, 0x8b, 0x25,
        0xf9, 0xa7, 0x30, 0x3a, 0x6a, 0xe5, 0x40, 0x06
    };
    u8 output[32];
    const u8 expected[] = {
        0x2b, 0xdf, 0xf7, 0xa6, 0xfd, 0x64, 0x31, 0x03,
        0x4a, 0xe4, 0x73, 0xec, 0x88, 0x90, 0x4d, 0xe2,
        0x97, 0x32, 0x5a, 0x04, 0x52, 0x9d, 0x1a, 0xee,
        0x9a, 0xc6, 0x26, 0x31, 0xad, 0x01, 0xd6, 0x02
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs75_ProduceCorrectResult){

    const u8 a[] = {
        0x1c, 0xa4, 0x2e, 0x24, 0x8d, 0xc1, 0xb2, 0xf1,
        0x41, 0x42, 0x0b, 0x92, 0xe0, 0x87, 0x0b, 0x25,
        0x1e, 0x62, 0xfc, 0x42, 0x33, 0xfc, 0x44, 0xaf,
        0x8a, 0xf4, 0xa2, 0x95, 0x8f, 0x81, 0xae, 0x02
    };
    const u8 b[] = {
        0x50, 0xff, 0x2c, 0xa6, 0xfe, 0xb8, 0x4c, 0x4c,
        0xca, 0xe1, 0xb6, 0x46, 0x7b, 0x8b, 0xbd, 0xdb,
        0x2f, 0x9f, 0xe2, 0x35, 0x10, 0x37, 0x1a, 0x87,
        0xce, 0xba, 0x77, 0x2a, 0x13, 0xb6, 0x0a, 0x09
    };
    const u8 c[] = {
        0x21, 0x43, 0x01, 0x16, 0xc8, 0x59, 0x6e, 0x57,
        0x54, 0xe9, 0x13, 0x5b, 0x60, 0x7d, 0x58, 0x9f,
        0x8a, 0x59, 0x93, 0x3d, 0x24, 0x45, 0xbb, 0x44,
        0x7d, 0x2f, 0xf1, 0x39, 0x67, 0x0d, 0x8c, 0x00
    };
    u8 output[32];
    const u8 expected[] = {
        0x21, 0x46, 0x9c, 0xa2, 0xcb, 0x84, 0x70, 0xbf,
        0xa3, 0x03, 0x54, 0x78, 0xb2, 0x92, 0x41, 0x65,
        0xaf, 0x66, 0xcc, 0x43, 0xda, 0x67, 0xca, 0xa8,
        0x6a, 0xf0, 0x60, 0x9c, 0xa2, 0x7a, 0xc3, 0x05
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs76_ProduceCorrectResult){

    const u8 a[] = {
        0xda, 0x8e, 0x30, 0xd4, 0x83, 0x1d, 0x03, 0x4a,
        0x5b, 0x29, 0xa8, 0x89, 0x1c, 0x2c, 0x14, 0x36,
        0xc5, 0x72, 0x17, 0x93, 0x78, 0xc3, 0x65, 0x17,
        0x2a, 0xad, 0x7c, 0xc9, 0xa1, 0x56, 0x85, 0x0a
    };
    const u8 b[] = {
        0xbd, 0xcf, 0x29, 0xe8, 0x88, 0xd9, 0x10, 0xf6,
        0xd6, 0x4f, 0x7d, 0xdf, 0x17, 0x0c, 0x3a, 0x0d,
        0x96, 0xa5, 0xfa, 0x03, 0x0b, 0xda, 0x9d, 0x93,
        0xed, 0xa0, 0x18, 0x33, 0x0b, 0x58, 0xc1, 0x01
    };
    const u8 c[] = {
        0xbe, 0x9e, 0x8d, 0xee, 0xfa, 0xeb, 0x9e, 0x93,
        0xfe, 0x56, 0x87, 0xa2, 0xbe, 0xa5, 0xb3, 0x92,
        0x3e, 0xbe, 0x22, 0x8f, 0x0c, 0x41, 0xb8, 0x72,
        0xe4, 0x56, 0xda, 0xad, 0x03, 0xe2, 0xcc, 0x08
    };
    u8 output[32];
    const u8 expected[] = {
        0x71, 0x2e, 0x09, 0x39, 0x1f, 0x32, 0xa6, 0xb2,
        0x42, 0x63, 0xbb, 0x81, 0xda, 0x2b, 0xb5, 0x72,
        0x2e, 0x88, 0x14, 0x8f, 0x88, 0x6d, 0x1b, 0x21,
        0x08, 0x51, 0xa7, 0x58, 0xc3, 0xfc, 0xd4, 0x0e
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs77_ProduceCorrectResult){

    const u8 a[] = {
        0x0c, 0xb2, 0x0b, 0xc6, 0x2d, 0x55, 0xbe, 0xde,
        0x6d, 0x14, 0x98, 0xe3, 0xa1, 0x38, 0x15, 0x0b,
        0xcb, 0xe8, 0x58, 0xec, 0xac, 0x58, 0x8a, 0xe9,
        0xa8, 0x5e, 0xa0, 0xcd, 0x83, 0xd7, 0xcc, 0x0a
    };
    const u8 b[] = {
        0xf6, 0x34, 0x4c, 0x5e, 0x51, 0x25, 0x22, 0x90,
        0x91, 0xf2, 0x77, 0x9e, 0x9d, 0x52, 0xa4, 0x28,
        0x30, 0x47, 0x23, 0x6c, 0x9d, 0xf2, 0x8b, 0x97,
        0xca, 0xb6, 0x86, 0x85, 0x15, 0x80, 0x6d, 0x05
    };
    const u8 c[] = {
        0x37, 0x07, 0x94, 0xe2, 0xd5, 0xb7, 0x1d, 0x34,
        0xe3, 0xd2, 0xc9, 0xb7, 0x92, 0xb0, 0xc0, 0xc3,
        0xf3, 0xf7, 0x70, 0xff, 0xc6, 0x28, 0x2d, 0x6e,
        0x81, 0xfc, 0x8b, 0x4a, 0xee, 0xd9, 0xb3, 0x0e
    };
    u8 output[32];
    const u8 expected[] = {
        0x8d, 0x6b, 0x59, 0xee, 0xd2, 0x52, 0x50, 0x53,
        0x13, 0x43, 0x5e, 0xad, 0x09, 0xe9, 0xb2, 0x96,
        0x47, 0x75, 0xb5, 0x00, 0x7e, 0x5a, 0x14, 0xbc,
        0xc8, 0x8a, 0xf0, 0xcb, 0x8b, 0xa9, 0xb0, 0x06
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs78_ProduceCorrectResult){

    const u8 a[] = {
        0x6f, 0x4b, 0xd5, 0x4c, 0x4b, 0xb2, 0x55, 0x31,
        0xa6, 0xa5, 0x77, 0xbe, 0xbd, 0xd6, 0x53, 0x3b,
        0xe5, 0xde, 0x84, 0x15, 0xaa, 0x42, 0x13, 0x40,
        0x4a, 0x88, 0xd5, 0x41, 0xd9, 0xfc, 0x85, 0x05
    };
    const u8 b[] = {
        0x55, 0x0a, 0xcf, 0x85, 0xc7, 0x53, 0xf4, 0x23,
        0x96, 0x57, 0x1f, 0x7c, 0x56, 0x01, 0xd3, 0x45,
        0xb3, 0x81, 0xdf, 0x79, 0x56, 0x0a, 0x78, 0x4b,
        0xfd, 0x99, 0x67, 0xde, 0x84, 0x4a, 0x6e, 0x0c
    };
    const u8 c[] = {
        0x04, 0xdd, 0x2e, 0x99, 0xfd, 0x0c, 0x4e, 0xdd,
        0x5e, 0xde, 0x5c, 0xbb, 0x1f, 0x9d, 0x00, 0x27,
        0x4f, 0x58, 0x8c, 0x0d, 0x1f, 0x17, 0x22, 0xc5,
        0xc3, 0xf7, 0x77, 0x46, 0xc7, 0xa7, 0xe1, 0x0d
    };
    u8 output[32];
    const u8 expected[] = {
        0x0f, 0xba, 0xc1, 0xb0, 0xb7, 0x12, 0x94, 0xf5,
        0x5e, 0x16, 0x97, 0x30, 0xc5, 0x14, 0xf9, 0x2a,
        0xe8, 0x6b, 0xb7, 0x4b, 0xda, 0x18, 0x13, 0x7f,
        0xae, 0xc3, 0x91, 0xeb, 0xc2, 0xe4, 0x33, 0x0a
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs79_ProduceCorrectResult){

    const u8 a[] = {
        0x11, 0xd5, 0x50, 0xd5, 0x8d, 0xa4, 0x39, 0x20,
        0x41, 0xb7, 0x83, 0x72, 0x52, 0xd4, 0xb9, 0x5b,
        0xa0, 0xea, 0x45, 0x38, 0x1f, 0x7c, 0xc6, 0x86,
        0xc8, 0x66, 0x87, 0x36, 0x95, 0x92, 0x46, 0x02
    };
    const u8 b[] = {
        0x6c, 0x51, 0x67, 0xb4, 0x51, 0x5c, 0x29, 0x87,
        0xa4, 0x64, 0xe1, 0x63, 0x6f, 0xb2, 0x17, 0x61,
        0xfc, 0x59, 0xfd, 0xdf, 0x45, 0x5f, 0x1c, 0x9a,
        0x78, 0xb9, 0xfd, 0x61, 0x37, 0x7e, 0xaf, 0x05
    };
    const u8 c[] = {
        0x0b, 0xc7, 0x68, 0x95, 0xb8, 0x37, 0x24, 0xa4,
        0xfc, 0xba, 0xbc, 0x60, 0xc2, 0x26, 0x9a, 0x34,
        0x8d, 0xc5, 0x01, 0xc9, 0x12, 0x3e, 0x66, 0x88,
        0x58, 0x3c, 0x83, 0x07, 0x3d, 0xb3, 0xa3, 0x0f
    };
    u8 output[32];
    const u8 expected[] = {
        0xf3, 0x43, 0x94, 0x96, 0x9e, 0xa0, 0xd4, 0x88,
        0xc5, 0x4e, 0x32, 0xe5, 0x55, 0x6a, 0x68, 0xef,
        0x5d, 0xf0, 0xa4, 0x4f, 0xc6, 0x22, 0xe4, 0xeb,
        0xc6, 0x81, 0x1d, 0x81, 0xfd, 0xe0, 0xbc, 0x03
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs80_ProduceCorrectResult){

    const u8 a[] = {
        0x6d, 0x36, 0x89, 0xeb, 0x7b, 0xba, 0x93, 0x67,
        0xf5, 0x83, 0xdb, 0x2c, 0x59, 0x81, 0xba, 0x76,
        0xee, 0xd6, 0xc5, 0x08, 0xaa, 0x1f, 0xb7, 0xcb,
        0x33, 0xe8, 0xe8, 0x6b, 0x74, 0xc2, 0x5c, 0x0f
    };
    const u8 b[] = {
        0xb9, 0xc8, 0x99, 0x4e, 0x4d, 0x55, 0xa3, 0x60,
        0x58, 0x61, 0x9f, 0xd5, 0x94, 0x1a, 0x01, 0x27,
        0x3d, 0x80, 0x10, 0x00, 0x46, 0x46, 0x87, 0x00,
        0xbb, 0x41, 0xe7, 0xe6, 0x61, 0x2d, 0x00, 0x0b
    };
    const u8 c[] = {
        0x3c, 0xaa, 0xde, 0x97, 0x21, 0xe0, 0x35, 0xae,
        0x56, 0x90, 0xcb, 0x70, 0x4f, 0xd5, 0x5b, 0x37,
        0xdc, 0x19, 0xea, 0xf6, 0x9a, 0x6b, 0xbb, 0xcc,
        0x47, 0x9e, 0xdb, 0x23, 0xa9, 0x9f, 0xdd, 0x08
    };
    u8 output[32];
    const u8 expected[] = {
        0xfc, 0x42, 0x75, 0xef, 0x44, 0xbb, 0x6a, 0x5d,
        0x7e, 0xff, 0xdf, 0x3e, 0xd1, 0x81, 0x76, 0xc1,
        0xb7, 0x0b, 0x03, 0x0f, 0x8e, 0x2c, 0xcd, 0x2a,
        0x9c, 0x12, 0x64, 0xce, 0x41, 0x3b, 0x52, 0x07
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs81_ProduceCorrectResult){

    const u8 a[] = {
        0x15, 0x78, 0x3f, 0x41, 0x58, 0x66, 0x69, 0x0e,
        0xbb, 0x5b, 0xcf, 0x51, 0x17, 0xc0, 0xb2, 0x4d,
        0x2d, 0x85, 0x8a, 0x2d, 0xa3, 0x6a, 0x16, 0x3d,
        0xa0, 0x41, 0xb1, 0x58, 0x79, 0x81, 0x26, 0x03
    };
    const u8 b[] = {
        0xe7, 0x41, 0x50, 0x25, 0x38, 0xb5, 0xd4, 0xe3,
        0xb0, 0xa7, 0x82, 0xa4, 0x0a, 0x1d, 0x45, 0x07,
        0x19, 0x6d, 0x5e, 0x7b, 0x32, 0x39, 0x8a, 0x23,
        0xcb, 0x3f, 0x21, 0x4d, 0xa9, 0xcd, 0x5f, 0x0c
    };
    const u8 c[] = {
        0xe2, 0x6b, 0x91, 0xa8, 0xd8, 0x58, 0x23, 0x0d,
        0x0f, 0xf6, 0x62, 0x15, 0x8c, 0x5a, 0xae, 0xd2,
        0x23, 0x96, 0x2d, 0xee, 0x24, 0x76, 0x2b, 0x60,
        0xc7, 0x70, 0xd0, 0x13, 0x6e, 0x39, 0xa0, 0x0d
    };
    u8 output[32];
    const u8 expected[] = {
        0xaa, 0x4e, 0x0c, 0x1a, 0x22, 0xca, 0xec, 0xbf,
        0x92, 0xed, 0xfb, 0x8e, 0x2e, 0xe5, 0x8a, 0xf0,
        0x3c, 0x7c, 0x2e, 0x5c, 0x2b, 0x5c, 0xef, 0xe1,
        0x93, 0xa2, 0xd7, 0xff, 0xf9, 0x87, 0x46, 0x0d
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs82_ProduceCorrectResult){

    const u8 a[] = {
        0x20, 0xf2, 0x30, 0xed, 0x00, 0x9b, 0x35, 0xab,
        0x9e, 0x21, 0x5a, 0x75, 0x45, 0x48, 0xaa, 0xe2,
        0x1a, 0x2b, 0x3a, 0x69, 0xb2, 0x92, 0x6e, 0xeb,
        0x95, 0x3d, 0x93, 0x48, 0xce, 0xa7, 0x7e, 0x07
    };
    const u8 b[] = {
        0x88, 0x83, 0xff, 0xa4, 0x95, 0x48, 0xc5, 0xd6,
        0x89, 0x87, 0x91, 0xea, 0x06, 0x55, 0xc6, 0x21,
        0xab, 0xd8, 0xe4, 0xd9, 0x70, 0xb4, 0xa5, 0x1a,
        0x64, 0xc0, 0xe5, 0x12, 0xa1, 0x47, 0x28, 0x0a
    };
    const u8 c[] = {
        0xd8, 0xb1, 0x4f, 0x95, 0xa5, 0xbf, 0xb9, 0xc9,
        0x1b, 0xff, 0x25, 0x96, 0x69, 0xb8, 0x78, 0x6f,
        0xad, 0x7b, 0x6d, 0xb5, 0x76, 0x72, 0xf7, 0x30,
        0xef, 0x63, 0xf4, 0x1a, 0x0a, 0x92, 0x60, 0x0f
    };
    u8 output[32];
    const u8 expected[] = {
        0xc3, 0xa7, 0x4a, 0xea, 0xaa, 0xcd, 0x15, 0xde,
        0x0d, 0x51, 0xc0, 0x5d, 0xf5, 0xb6, 0xbf, 0xce,
        0xe9, 0xd7, 0x2b, 0xd2, 0x7c, 0xb2, 0x65, 0x22,
        0x71, 0x20, 0x6a, 0xc0, 0x4f, 0x2e, 0xbb, 0x05
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs83_ProduceCorrectResult){

    const u8 a[] = {
        0x4f, 0xa7, 0x4d, 0xb3, 0x1a, 0x51, 0xd9, 0x9b,
        0x20, 0xd6, 0xab, 0xb0, 0x1c, 0x33, 0xf3, 0x6f,
        0xfa, 0x26, 0xca, 0xc3, 0x05, 0x0f, 0x7a, 0xcb,
        0x54, 0x3a, 0x73, 0x67, 0x54, 0x6f, 0x28, 0x0b
    };
    const u8 b[] = {
        0x84, 0x50, 0x44, 0x25, 0x5c, 0x48, 0x50, 0xd6,
        0xf0, 0xac, 0x11, 0xf9, 0xa7, 0x48, 0xea, 0x07,
        0x27, 0x5f, 0x8c, 0x45, 0xb8, 0xcc, 0x88, 0x0d,
        0xdf, 0xf6, 0x3f, 0x68, 0x23, 0x27, 0x2f, 0x0b
    };
    const u8 c[] = {
        0x8f, 0x1b, 0xa3, 0x2f, 0xa3, 0xc1, 0x98, 0xf0,
        0x9f, 0x9b, 0xf8, 0x0a, 0x0e, 0xa4, 0xf1, 0x86,
        0x70, 0x4d, 0xf0, 0x4d, 0x9e, 0xde, 0x0c, 0xd1,
        0x28, 0xa9, 0x99, 0xd6, 0x3b, 0x28, 0x8d, 0x00
    };
    u8 output[32];
    const u8 expected[] = {
        0xcb, 0xcf, 0x95, 0x27, 0x2a, 0xc9, 0xb5, 0x6b,
        0x4c, 0xde, 0x87, 0xac, 0x01, 0x20, 0x80, 0xde,
        0x97, 0xe9, 0x3d, 0xa4, 0x26, 0x0f, 0x1c, 0xf6,
        0x4f, 0xdb, 0x7b, 0xea, 0xf0, 0x42, 0x3b, 0x05
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs84_ProduceCorrectResult){

    const u8 a[] = {
        0x6f, 0xd4, 0xa4, 0x79, 0x72, 0xa4, 0x65, 0x63,
        0x5f, 0xd2, 0x3e, 0xac, 0xfa, 0x9f, 0x43, 0xf4,
        0xa5, 0x08, 0x48, 0x1c, 0xd9, 0x0b, 0x8e, 0xc4,
        0x56, 0x17, 0xd1, 0xea, 0x95, 0x65, 0x84, 0x08
    };
    const u8 b[] = {
        0x53, 0xd8, 0xde, 0x25, 0xef, 0x34, 0xa1, 0xf3,
        0xdd, 0x4f, 0x49, 0x1d, 0xad, 0x55, 0x6c, 0x82,
        0xae, 0xa4, 0x88, 0x2f, 0x02, 0x01, 0x08, 0x15,
        0xff, 0xdc, 0x7c, 0x29, 0xac, 0x26, 0xd2, 0x07
    };
    const u8 c[] = {
        0x5d, 0x83, 0x29, 0x9a, 0xbd, 0x28, 0x9a, 0x00,
        0xb8, 0x81, 0x71, 0xe9, 0x21, 0x3d, 0xbf, 0x99,
        0x07, 0xc7, 0xc8, 0x9f, 0xc3, 0xf4, 0x10, 0xd9,
        0xc7, 0x18, 0x74, 0x54, 0xde, 0x6f, 0x6d, 0x09
    };
    u8 output[32];
    const u8 expected[] = {
        0xff, 0xe8, 0x47, 0x8c, 0x4b, 0x1d, 0xd3, 0x19,
        0x06, 0x8b, 0x84, 0xda, 0x62, 0x16, 0x8d, 0xe2,
        0x4c, 0xe1, 0xa5, 0x85, 0x82, 0xfe, 0x4a, 0x28,
        0xf5, 0xfc, 0x3c, 0xa5, 0xb4, 0x9f, 0x6e, 0x08
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs85_ProduceCorrectResult){

    const u8 a[] = {
        0xcd, 0x58, 0x7b, 0x83, 0x20, 0x17, 0xff, 0x52,
        0x1e, 0x85, 0x54, 0xdc, 0x4f, 0x4b, 0xf6, 0xd6,
        0x57, 0x64, 0x8d, 0x9d, 0xe2, 0x58, 0x82, 0x9c,
        0x08, 0x43, 0x67, 0x30, 0xe8, 0xc9, 0x19, 0x0a
    };
    const u8 b[] = {
        0xa3, 0x4b, 0x07, 0x5c, 0xa0, 0xb9, 0x30, 0x0d,
        0x2a, 0xa1, 0xd5, 0xd3, 0xee, 0x4b, 0xe3, 0xe3,
        0x6f, 0x42, 0xda, 0xda, 0xd5, 0x44, 0x4b, 0xfd,
        0x6a, 0x47, 0xaa, 0x40, 0x29, 0x82, 0x0e, 0x01
    };
    const u8 c[] = {
        0xbf, 0x68, 0x15, 0x5c, 0x0c, 0x13, 0x92, 0x3a,
        0x8b, 0xab, 0x29, 0x32, 0xc7, 0x64, 0x51, 0x9d,
        0xc3, 0xb7, 0x7e, 0x1d, 0x2d, 0x96, 0xad, 0x2c,
        0x64, 0xf1, 0x31, 0x8e, 0xcf, 0x46, 0xa1, 0x0f
    };
    u8 output[32];
    const u8 expected[] = {
        0x7d, 0x5c, 0xa2, 0xcf, 0xe7, 0x8d, 0xa7, 0xd7,
        0x73, 0xd1, 0x23, 0x67, 0xb4, 0xeb, 0x7e, 0xc5,
        0x47, 0xa8, 0x82, 0xbb, 0x03, 0xcf, 0x09, 0xb9,
        0x04, 0x5e, 0x61, 0xa6, 0x67, 0x90, 0xe7, 0x0d
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs86_ProduceCorrectResult){

    const u8 a[] = {
        0x5d, 0xbe, 0x2b, 0x85, 0xcd, 0x32, 0x7e, 0x84,
        0xb1, 0xb7, 0xdf, 0xeb, 0x13, 0x93, 0xcf, 0x00,
        0xca, 0x0c, 0x39, 0x8e, 0x57, 0xea, 0x98, 0xec,
        0xbe, 0xcb, 0xa5, 0xbb, 0x51, 0x74, 0xb2, 0x07
    };
    const u8 b[] = {
        0x7d, 0x25, 0xdd, 0x69, 0x9d, 0x53, 0x58, 0xef,
        0xd8, 0xaa, 0x89, 0xaf, 0x79, 0xb1, 0x7b, 0x46,
        0xb5, 0xb1, 0x24, 0xe8, 0xed, 0xd8, 0x77, 0x3d,
        0x60, 0xb8, 0xce, 0xaa, 0x9c, 0xd2, 0x78, 0x0a
    };
    const u8 c[] = {
        0x7a, 0xae, 0xda, 0xc8, 0xf8, 0x90, 0xd6, 0xd0,
        0xee, 0x58, 0xbc, 0x96, 0xdd, 0xf3, 0x0e, 0xe8,
        0x2d, 0x69, 0x38, 0xbb, 0xb7, 0xc6, 0xe9, 0xeb,
        0x91, 0xd9, 0x72, 0x77, 0xfd, 0x7f, 0xe2, 0x0a
    };
    u8 output[32];
    const u8 expected[] = {
        0x7b, 0x37, 0xe3, 0xe3, 0xc9, 0xbf, 0x1d, 0x06,
        0xa7, 0x83, 0x68, 0xe2, 0xf2, 0xd1, 0x56, 0x3f,
        0x9f, 0x0e, 0x81, 0x93, 0x40, 0xef, 0xd0, 0xaf,
        0x96, 0xcb, 0x46, 0x57, 0x3e, 0x09, 0x03, 0x0e
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs87_ProduceCorrectResult){

    const u8 a[] = {
        0x2b, 0x3b, 0x8d, 0xe6, 0xd5, 0x43, 0xd7, 0xd2,
        0x3d, 0xdd, 0x2c, 0x8b, 0xc1, 0x7b, 0x6a, 0x94,
        0xbd, 0x74, 0x4f, 0x97, 0x8d, 0xeb, 0x3b, 0xec,
        0x39, 0xaa, 0x5e, 0xad, 0x29, 0x21, 0x7e, 0x0a
    };
    const u8 b[] = {
        0x73, 0x31, 0x63, 0x1c, 0x5d, 0xd1, 0x30, 0xa1,
        0x6a, 0x00, 0x7e, 0xfe, 0x4f, 0x07, 0xe9, 0xa9,
        0xc9, 0x92, 0xd7, 0xc1, 0x87, 0xe2, 0xdc, 0x6d,
        0xfb, 0x3b, 0x1b, 0x1a, 0x80, 0x7b, 0x9c, 0x05
    };
    const u8 c[] = {
        0x8f, 0xb0, 0x11, 0x65, 0x26, 0xc9, 0xf3, 0xde,
        0xd6, 0x7c, 0x58, 0x9f, 0x9c, 0xea, 0xfa, 0x9a,
        0x7e, 0xf6, 0x5c, 0xac, 0xd8, 0x3f, 0x4b, 0xd4,
        0xec, 0xe6, 0x5f, 0x1c, 0x28, 0xa5, 0x90, 0x0b
    };
    u8 output[32];
    const u8 expected[] = {
        0xb4, 0xed, 0xd3, 0xe0, 0x58, 0x66, 0xb6, 0xb4,
        0x96, 0xee, 0x97, 0x47, 0xf5, 0xd8, 0x38, 0xa5,
        0x45, 0x47, 0x66, 0x24, 0xf2, 0x14, 0x9f, 0xf7,
        0x39, 0xd2, 0x4f, 0x0d, 0x8f, 0xea, 0x97, 0x01
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs88_ProduceCorrectResult){

    const u8 a[] = {
        0x70, 0xc9, 0xa9, 0x4f, 0x7c, 0x4b, 0xb1, 0x04,
        0x63, 0x17, 0x6d, 0xbc, 0x00, 0xcc, 0x57, 0xfb,
        0x88, 0x4e, 0x65, 0x34, 0xc6, 0x63, 0x07, 0x5b,
        0x22, 0xdb, 0xd1, 0xd9, 0x61, 0x54, 0x68, 0x05
    };
    const u8 b[] = {
        0x8b, 0x39, 0xaf, 0x8b, 0x49, 0x7a, 0x2c, 0xd4,
        0xc1, 0x57, 0x38, 0x80, 0x4b, 0x33, 0xb0, 0xaf,
        0x2a, 0xb9, 0xb1, 0x81, 0x5c, 0x46, 0x3d, 0xfd,
        0x3c, 0xd2, 0x10, 0x87, 0x8f, 0x3f, 0xb7, 0x0a
    };
    const u8 c[] = {
        0x16, 0x94, 0x35, 0x37, 0x2f, 0xe7, 0xb2, 0xca,
        0xb3, 0x29, 0x62, 0x6a, 0x20, 0x08, 0x6e, 0x77,
        0xb7, 0x50, 0xa8, 0xa9, 0xf7, 0xb9, 0xc8, 0xf9,
        0x61, 0x90, 0x93, 0x1a, 0x30, 0x5c, 0x3c, 0x06
    };
    u8 output[32];
    const u8 expected[] = {
        0x72, 0x39, 0xf2, 0xfa, 0x85, 0x2c, 0x77, 0x72,
        0xf7, 0xe7, 0x13, 0xaf, 0x7f, 0x7c, 0x09, 0xe4,
        0xaf, 0x71, 0xc7, 0x4c, 0x65, 0x0c, 0xdf, 0xd3,
        0xb1, 0xcc, 0xb0, 0x5c, 0x75, 0xcd, 0x23, 0x03
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs89_ProduceCorrectResult){

    const u8 a[] = {
        0x87, 0x86, 0x8f, 0xa7, 0x69, 0x10, 0x4c, 0xee,
        0x0b, 0x06, 0x9c, 0x8e, 0xd1, 0x87, 0xd6, 0x7b,
        0x8c, 0x07, 0xcf, 0xc2, 0xa7, 0xdb, 0x55, 0x87,
        0x3c, 0x03, 0x28, 0xcd, 0x32, 0xd4, 0x9d, 0x01
    };
    const u8 b[] = {
        0xb2, 0x59, 0x57, 0x2b, 0x06, 0x37, 0x24, 0xe1,
        0x0c, 0x60, 0x2d, 0x36, 0xa7, 0x61, 0x92, 0x78,
        0xc1, 0x69, 0xab, 0x08, 0x98, 0x12, 0x06, 0xfc,
        0x04, 0x87, 0xd0, 0x8c, 0x43, 0xd0, 0x13, 0x00
    };
    const u8 c[] = {
        0x26, 0xb6, 0x79, 0x15, 0x02, 0xc3, 0x23, 0x2d,
        0x96, 0xc6, 0xc8, 0xa7, 0x2c, 0x9e, 0x0a, 0x0e,
        0x0f, 0x20, 0xd7, 0xac, 0x79, 0xdd, 0x4e, 0xeb,
        0x90, 0x9a, 0xb0, 0x58, 0x3a, 0x21, 0xb4, 0x01
    };
    u8 output[32];
    const u8 expected[] = {
        0x46, 0x6e, 0x1a, 0x95, 0x47, 0xe8, 0x00, 0x53,
        0x50, 0x1b, 0x77, 0x39, 0xed, 0x2b, 0x9f, 0xb4,
        0xe7, 0x40, 0x6a, 0xdc, 0x05, 0xab, 0x04, 0x25,
        0xcb, 0x95, 0x0a, 0x65, 0x40, 0x4c, 0xde, 0x0e
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs90_ProduceCorrectResult){

    const u8 a[] = {
        0x2e, 0xa6, 0x96, 0x82, 0x48, 0x96, 0x85, 0xf3,
        0x7a, 0x97, 0xfd, 0x1e, 0x0c, 0xef, 0x1e, 0x22,
        0x77, 0x8b, 0x2d, 0x01, 0xee, 0x87, 0x77, 0x0c,
        0xbe, 0x0c, 0x47, 0x10, 0x36, 0x55, 0xc9, 0x00
    };
    const u8 b[] = {
        0x75, 0x20, 0x9b, 0x84, 0x75, 0x1d, 0xa2, 0xaf,
        0x7f, 0x4b, 0x83, 0x53, 0x4a, 0x2d, 0x45, 0x26,
        0x10, 0x70, 0x2b, 0xb2, 0x76, 0x6b, 0x19, 0x20,
        0xd1, 0x7b, 0xff, 0xa7, 0x53, 0x69, 0x71, 0x07
    };
    const u8 c[] = {
        0x5f, 0xd9, 0xd2, 0x26, 0x9c, 0x54, 0xb2, 0xe3,
        0xe8, 0x95, 0x40, 0x95, 0x32, 0x8d, 0x99, 0xaa,
        0x54, 0x54, 0xc0, 0x06, 0x22, 0x5b, 0x26, 0x17,
        0xbe, 0xc6, 0x49, 0x2b, 0x74, 0x5d, 0x53, 0x0c
    };
    u8 output[32];
    const u8 expected[] = {
        0x5b, 0x3a, 0x11, 0x5d, 0x5f, 0xa0, 0x98, 0xea,
        0x20, 0x24, 0x8c, 0x59, 0x88, 0x0f, 0xc8, 0x97,
        0xfa, 0xc4, 0x15, 0x04, 0xb1, 0x1b, 0xb8, 0x4d,
        0x31, 0xc8, 0x1d, 0x6a, 0xd9, 0x7f, 0xb9, 0x08
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs91_ProduceCorrectResult){

    const u8 a[] = {
        0xd5, 0x23, 0x0c, 0xe5, 0x83, 0x7a, 0x0c, 0x2a,
        0xcb, 0xa6, 0x3e, 0xca, 0xf4, 0x17, 0x4d, 0x10,
        0x11, 0xee, 0x1f, 0xa3, 0x28, 0xbd, 0x51, 0x72,
        0x5a, 0x07, 0xed, 0x91, 0x40, 0xae, 0x97, 0x0d
    };
    const u8 b[] = {
        0x92, 0x6d, 0xca, 0xf8, 0x87, 0x8a, 0x85, 0x3c,
        0xe6, 0xc7, 0x3e, 0x08, 0x90, 0xa4, 0x54, 0xef,
        0x28, 0xb6, 0x73, 0x37, 0xff, 0x20, 0xc8, 0xd3,
        0x94, 0xb7, 0xa0, 0x3b, 0x55, 0x7e, 0x2b, 0x0c
    };
    const u8 c[] = {
        0x52, 0x29, 0x79, 0xa7, 0xa2, 0x50, 0x9b, 0x74,
        0xc5, 0x57, 0x5b, 0xc2, 0x05, 0x3a, 0x74, 0xd6,
        0x95, 0xee, 0xd4, 0x29, 0xb2, 0x4d, 0xf6, 0x7c,
        0x59, 0xc3, 0x6b, 0x89, 0x2a, 0x7d, 0x6a, 0x0f
    };
    u8 output[32];
    const u8 expected[] = {
        0xca, 0x38, 0x90, 0x1f, 0xf0, 0xbe, 0xcd, 0xe5,
        0x88, 0x83, 0xab, 0xa6, 0xc4, 0xc7, 0xf5, 0x85,
        0x3f, 0xf4, 0x3a, 0xc6, 0x5b, 0xc8, 0xfa, 0xaa,
        0x71, 0x08, 0x54, 0x60, 0xb7, 0x7b, 0xc9, 0x0b
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs92_ProduceCorrectResult){

    const u8 a[] = {
        0x23, 0xe6, 0xe0, 0xea, 0x03, 0xaa, 0x45, 0x39,
        0x4d, 0x5e, 0x73, 0x33, 0x30, 0x62, 0x30, 0x48,
        0xaf, 0x9b, 0xcf, 0xa9, 0xe2, 0xdb, 0x1a, 0x45,
        0x1f, 0xe7, 0x5e, 0xaf, 0x1f, 0x83, 0x32, 0x0b
    };
    const u8 b[] = {
        0xb5, 0x53, 0x0a, 0x04, 0xd3, 0xd9, 0x15, 0xf2,
        0x9f, 0x2a, 0xa3, 0x17, 0x3f, 0xd5, 0x75, 0x8a,
        0x3b, 0x2a, 0x29, 0x34, 0xe7, 0x8e, 0xa1, 0x60,
        0xfc, 0xe6, 0x18, 0x25, 0x36, 0xea, 0x59, 0x0c
    };
    const u8 c[] = {
        0xa2, 0x28, 0x5c, 0x7b, 0x74, 0xfe, 0x31, 0x33,
        0x8d, 0x6d, 0x4d, 0xc3, 0x08, 0x37, 0x52, 0x96,
        0x5f, 0xf5, 0x93, 0x04, 0x68, 0x82, 0xf6, 0x1f,
        0xc1, 0xa3, 0x6a, 0x55, 0xfa, 0xa1, 0xef, 0x08
    };
    u8 output[32];
    const u8 expected[] = {
        0x3c, 0x57, 0x34, 0xbc, 0xd7, 0x41, 0xf2, 0x17,
        0x01, 0xcc, 0x9b, 0xd4, 0xee, 0x44, 0x76, 0x2f,
        0x85, 0xcd, 0x38, 0x36, 0x95, 0x25, 0x6d, 0xfd,
        0x8b, 0xb5, 0x98, 0x36, 0x5d, 0x4a, 0x58, 0x05
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs93_ProduceCorrectResult){

    const u8 a[] = {
        0xf0, 0xba, 0xad, 0xdc, 0xf7, 0xa6, 0x9b, 0xdb,
        0x1d, 0x3a, 0x97, 0x9f, 0x4d, 0x19, 0x1a, 0x02,
        0x3f, 0x99, 0x8f, 0xb2, 0xe6, 0x74, 0x7f, 0xf8,
        0x73, 0x2b, 0xf6, 0xb9, 0x43, 0x76, 0xde, 0x08
    };
    const u8 b[] = {
        0x72, 0xa6, 0x9e, 0xd4, 0x83, 0x7f, 0x90, 0x51,
        0xab, 0x30, 0x86, 0x08, 0x35, 0x23, 0x66, 0x1a,
        0xf6, 0xb9, 0xd9, 0x94, 0xb7, 0x61, 0x35, 0x78,
        0x6a, 0x7c, 0xcc, 0xc3, 0xaa, 0x3b, 0x2b, 0x01
    };
    const u8 c[] = {
        0x8c, 0x22, 0x93, 0x6f, 0x5e, 0x76, 0xb5, 0x07,
        0x76, 0xa1, 0x55, 0x1a, 0x78, 0x56, 0xa0, 0xbd,
        0x01, 0x38, 0xc7, 0xb0, 0xfd, 0x13, 0xc5, 0xc3,
        0xfb, 0x93, 0x7a, 0x6a, 0xe4, 0xfb, 0x0f, 0x02
    };
    u8 output[32];
    const u8 expected[] = {
        0x82, 0xfc, 0x53, 0x8b, 0x0c, 0x6d, 0x75, 0x08,
        0x34, 0x4a, 0xe9, 0x54, 0xd5, 0x74, 0xa4, 0xf0,
        0xa2, 0xf8, 0xe1, 0x4e, 0x12, 0x18, 0x17, 0xa3,
        0x27, 0xae, 0xb7, 0x37, 0x16, 0x5e, 0xe6, 0x0c
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs94_ProduceCorrectResult){

    const u8 a[] = {
        0xbc, 0xc8, 0xf6, 0x89, 0xc2, 0x07, 0xbd, 0x1d,
        0xda, 0x11, 0xf5, 0xcc, 0x8d, 0xb3, 0x72, 0xb1,
        0x00, 0xfb, 0x55, 0x1a, 0x61, 0x2e, 0x0d, 0xf5,
        0xe6, 0xed, 0x9a, 0x9b, 0xb4, 0xee, 0x4e, 0x0f
    };
    const u8 b[] = {
        0x4b, 0xc5, 0x8e, 0xc8, 0x42, 0xf2, 0x2d, 0x26,
        0xa2, 0x44, 0x29, 0x44, 0x9a, 0x36, 0x43, 0xf2,
        0x38, 0x27, 0x86, 0xf8, 0x77, 0x9a, 0x99, 0x20,
        0x68, 0x66, 0x7b, 0x5d, 0x41, 0xb7, 0x70, 0x06
    };
    const u8 c[] = {
        0x05, 0x55, 0xd0, 0x35, 0xa9, 0x3b, 0x6e, 0x00,
        0xd4, 0xcc, 0x8c, 0xea, 0xc4, 0x7a, 0xf5, 0xb7,
        0xa6, 0xc5, 0xf5, 0xd2, 0x81, 0xee, 0xb0, 0x06,
        0x76, 0xe6, 0x18, 0xed, 0x16, 0x7d, 0x9d, 0x0d
    };
    u8 output[32];
    const u8 expected[] = {
        0x25, 0x3b, 0xae, 0x87, 0x40, 0x1e, 0xc2, 0xe7,
        0x35, 0x6a, 0xfc, 0xd4, 0x28, 0xfb, 0xeb, 0x55,
        0x99, 0x15, 0x21, 0xcb, 0x99, 0x31, 0xa0, 0x51,
        0x28, 0x0d, 0x91, 0xd4, 0xaa, 0x00, 0x01, 0x05
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs95_ProduceCorrectResult){

    const u8 a[] = {
        0xec, 0x61, 0x9d, 0x3d, 0x69, 0x65, 0x71, 0x76,
        0xb0, 0xd9, 0xbe, 0x9f, 0xac, 0x4b, 0x29, 0xd8,
        0x21, 0x3b, 0x83, 0x2f, 0xe4, 0x17, 0x29, 0xf7,
        0xcc, 0xd8, 0x8e, 0x8d, 0x4d, 0xa2, 0x29, 0x0c
    };
    const u8 b[] = {
        0xfb, 0x81, 0xc2, 0x5a, 0x2f, 0xa9, 0x5f, 0xe6,
        0xd9, 0xd7, 0xd0, 0xa4, 0xbc, 0x8f, 0x65, 0xba,
        0xa4, 0xc5, 0xda, 0x7f, 0xf9, 0xd3, 0x91, 0x40,
        0x86, 0x22, 0x11, 0x48, 0x95, 0xd8, 0x64, 0x04
    };
    const u8 c[] = {
        0x30, 0x50, 0xda, 0x77, 0x4c, 0xb2, 0x81, 0x8e,
        0xc0, 0x77, 0xc6, 0xe5, 0xcd, 0x24, 0x33, 0x53,
        0x08, 0xfe, 0xee, 0x54, 0xc4, 0x79, 0x51, 0xf7,
        0x1e, 0xc9, 0x47, 0xf2, 0x87, 0x6e, 0x24, 0x05
    };
    u8 output[32];
    const u8 expected[] = {
        0x1c, 0xdc, 0xe5, 0xb0, 0x00, 0x99, 0x2f, 0x72,
        0x4b, 0x8e, 0xe2, 0x7a, 0x00, 0xdf, 0x9b, 0x42,
        0xec, 0x24, 0x39, 0x40, 0xe8, 0xa4, 0x00, 0xf6,
        0xb7, 0x68, 0xcf, 0xcc, 0x6e, 0x54, 0xd8, 0x05
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs96_ProduceCorrectResult){

    const u8 a[] = {
        0xfd, 0x00, 0x44, 0xc6, 0x96, 0x5f, 0x0f, 0x0a,
        0x04, 0xcd, 0x3a, 0xbf, 0x24, 0x0a, 0x77, 0x71,
        0x20, 0xcd, 0xe9, 0x59, 0x19, 0x31, 0x71, 0x95,
        0xc0, 0x0f, 0x7d, 0xd6, 0x61, 0xde, 0x5b, 0x09
    };
    const u8 b[] = {
        0xea, 0x38, 0x5d, 0xb9, 0x9e, 0x74, 0x89, 0xac,
        0xe8, 0x00, 0xfb, 0x15, 0x17, 0x92, 0xcd, 0x2e,
        0x55, 0x1a, 0x99, 0xc0, 0x63, 0x78, 0xc0, 0x2a,
        0x36, 0x10, 0x09, 0x79, 0x3a, 0xc2, 0xb3, 0x0f
    };
    const u8 c[] = {
        0x0f, 0xca, 0x47, 0xaf, 0x20, 0x66, 0xdc, 0xa6,
        0x8a, 0xc5, 0x1c, 0xa6, 0x6d, 0x49, 0x29, 0x7c,
        0x2d, 0x11, 0x52, 0x6f, 0xa8, 0xd3, 0xfe, 0x56,
        0x5a, 0xf4, 0x77, 0x0d, 0x92, 0x99, 0x4f, 0x02
    };
    u8 output[32];
    const u8 expected[] = {
        0x72, 0x15, 0xe3, 0xc4, 0x16, 0x8e, 0xeb, 0xc9,
        0xa1, 0x92, 0xe6, 0xec, 0xca, 0x38, 0x8a, 0xa4,
        0xdb, 0xeb, 0x79, 0xc5, 0xfe, 0x6d, 0xa7, 0x90,
        0x60, 0xea, 0x75, 0xae, 0x77, 0xe0, 0xa7, 0x06
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs97_ProduceCorrectResult){

    const u8 a[] = {
        0xa9, 0xb3, 0xd4, 0x0c, 0x98, 0xb6, 0x00, 0xe5,
        0xb6, 0x2a, 0x48, 0x89, 0xa6, 0x69, 0x76, 0x7e,
        0x60, 0x0e, 0x81, 0xaf, 0xe9, 0xa8, 0x63, 0x56,
        0xd7, 0xb4, 0xb8, 0x2b, 0xdc, 0x35, 0xd2, 0x05
    };
    const u8 b[] = {
        0xc0, 0x76, 0x4f, 0x0d, 0x1d, 0x80, 0x36, 0xad,
        0x45, 0xf0, 0x7e, 0x0f, 0x04, 0x27, 0xe7, 0x2b,
        0x7a, 0x15, 0xc9, 0x4a, 0xcb, 0x2d, 0x9d, 0xa6,
        0xb8, 0x3b, 0x29, 0x01, 0x98, 0x33, 0x66, 0x01
    };
    const u8 c[] = {
        0xb6, 0xf6, 0x27, 0xc3, 0x92, 0x6b, 0x00, 0xae,
        0xb0, 0xc2, 0xc7, 0xca, 0x0a, 0x10, 0x72, 0x34,
        0x6c, 0xb3, 0x78, 0xb1, 0x3c, 0x49, 0x84, 0x8a,
        0x57, 0x87, 0x7e, 0xf3, 0xe5, 0xbc, 0xab, 0x0b
    };
    u8 output[32];
    const u8 expected[] = {
        0xc1, 0x81, 0x4c, 0xc6, 0x19, 0x16, 0x7f, 0x04,
        0xd4, 0xe1, 0xcc, 0xbd, 0x19, 0x1e, 0x26, 0x52,
        0xad, 0xbc, 0x94, 0x40, 0x61, 0x0b, 0xd1, 0xe5,
        0x27, 0xd2, 0xbb, 0x9d, 0x1f, 0x1f, 0xdb, 0x04
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs98_ProduceCorrectResult){

    const u8 a[] = {
        0x20, 0x2b, 0x37, 0xc8, 0xe2, 0xcb, 0xfd, 0x0f,
        0x9e, 0x35, 0x0d, 0xa7, 0xc1, 0x30, 0x1f, 0xfe,
        0xf2, 0x54, 0x9a, 0xff, 0x5f, 0x82, 0x41, 0xb0,
        0xcb, 0x7a, 0x59, 0x6b, 0xe1, 0x89, 0xb6, 0x08
    };
    const u8 b[] = {
        0xb3, 0xd7, 0xdb, 0x3a, 0x94, 0x55, 0x22, 0x3d,
        0x3b, 0xd3, 0x1a, 0x0f, 0xb2, 0xac, 0x66, 0xec,
        0xf8, 0x00, 0xc1, 0x0a, 0x98, 0x5a, 0x33, 0xb2,
        0xe7, 0x5b, 0x94, 0xc7, 0xd8, 0xc6, 0xb6, 0x01
    };
    const u8 c[] = {
        0xfc, 0x02, 0x80, 0x5d, 0xda, 0x35, 0xe3, 0x23,
        0xe8, 0xde, 0x22, 0xd9, 0x56, 0xea, 0x29, 0x59,
        0x17, 0xf3, 0x8c, 0xbc, 0xb3, 0x54, 0xab, 0x87,
        0x9d, 0x51, 0xb5, 0x26, 0x08, 0x69, 0x1b, 0x00
    };
    u8 output[32];
    const u8 expected[] = {
        0x20, 0xb9, 0x01, 0xde, 0xa8, 0x25, 0xe5, 0x72,
        0x3d, 0x32, 0x04, 0x14, 0x9d, 0x40, 0x77, 0x7d,
        0x10, 0x42, 0xf2, 0x7e, 0xc5, 0xe5, 0x8b, 0xba,
        0xd0, 0xc4, 0x48, 0xd3, 0x61, 0x5a, 0xcc, 0x04
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs99_ProduceCorrectResult){

    const u8 a[] = {
        0xbb, 0x96, 0xb9, 0x29, 0x45, 0x21, 0xcd, 0xf7,
        0xbf, 0xe7, 0x02, 0xff, 0xba, 0x47, 0x93, 0xb3,
        0xb4, 0x3b, 0xe0, 0x0f, 0x78, 0x69, 0xe6, 0x01,
        0x5c, 0x78, 0xe9, 0xef, 0x30, 0x6d, 0x3f, 0x03
    };
    const u8 b[] = {
        0x0e, 0x2a, 0x20, 0x84, 0x33, 0x33, 0x85, 0xbe,
        0x4b, 0x1e, 0x75, 0xa4, 0x20, 0x40, 0x41, 0xa2,
        0x94, 0x1f, 0xb3, 0xa8, 0x1a, 0x7c, 0x1b, 0xa5,
        0x32, 0x57, 0x93, 0x04, 0x05, 0xfe, 0xe6, 0x00
    };
    const u8 c[] = {
        0x5f, 0x46, 0x6b, 0x2c, 0x0a, 0x85, 0x75, 0xc8,
        0x66, 0x17, 0xc7, 0xd0, 0xcf, 0x3d, 0xb9, 0x6c,
        0x16, 0xad, 0xa9, 0x36, 0x81, 0x0f, 0xad, 0x85,
        0x0b, 0xfe, 0x9a, 0x4b, 0x0a, 0x0c, 0xf8, 0x0e
    };
    u8 output[32];
    const u8 expected[] = {
        0x88, 0x6e, 0xda, 0x0f, 0x84, 0x0f, 0xd1, 0xd2,
        0x13, 0xf9, 0x6c, 0x64, 0x92, 0x94, 0x0c, 0x0e,
        0x7c, 0xa8, 0xaa, 0xd9, 0xef, 0x62, 0x54, 0xd5,
        0x48, 0x46, 0x47, 0xd2, 0x7a, 0xea, 0x50, 0x07
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs100_ProduceCorrectResult){

    const u8 a[] = {
        0x07, 0x1c, 0xa0, 0x70, 0xa3, 0xab, 0x67, 0x85,
        0x68, 0x8b, 0x89, 0x08, 0x2e, 0x1f, 0x44, 0x83,
        0x2f, 0xb3, 0xe4, 0x81, 0xf3, 0xeb, 0x6a, 0xcb,
        0xf7, 0x42, 0x81, 0xed, 0xf8, 0x85, 0x69, 0x0e
    };
    const u8 b[] = {
        0xc8, 0x0c, 0x85, 0xe5, 0xc7, 0x1d, 0xaa, 0x24,
        0x28, 0xd8, 0x08, 0x7b, 0x1c, 0x2e, 0x4f, 0x3a,
        0x69, 0x05, 0x0f, 0xbd, 0x35, 0x2c, 0xf1, 0x68,
        0xa4, 0x11, 0x25, 0x6e, 0xcc, 0x71, 0xbb, 0x0b
    };
    const u8 c[] = {
        0xec, 0xa6, 0x85, 0x91, 0x72, 0xc6, 0x47, 0xd2,
        0xb4, 0xef, 0xdc, 0x03, 0x74, 0x63, 0x7b, 0xa0,
        0x34, 0x52, 0xe1, 0x19, 0x8d, 0x9f, 0x33, 0x5e,
        0x9d, 0x33, 0x8c, 0x0a, 0x8c, 0x93, 0xbc, 0x02
    };
    u8 output[32];
    const u8 expected[] = {
        0xee, 0x14, 0x3e, 0x26, 0x03, 0x4d, 0x00, 0xc6,
        0x93, 0x04, 0x6a, 0xb9, 0x3b, 0xb4, 0xd4, 0x0d,
        0x83, 0xc2, 0xf9, 0x12, 0xb4, 0xbb, 0x72, 0xea,
        0xdc, 0x73, 0x78, 0x9b, 0x8e, 0xcc, 0x3a, 0x03
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs101_ProduceCorrectResult){

    const u8 a[] = {
        0xc2, 0x9d, 0x86, 0xc3, 0x8a, 0x8c, 0x0e, 0x8a,
        0x80, 0x46, 0x56, 0x9d, 0x18, 0xf1, 0x92, 0x4d,
        0xf3, 0xce, 0xe9, 0xf2, 0x21, 0x21, 0xf2, 0xd3,
        0xc6, 0x6c, 0xfb, 0x49, 0x27, 0xc7, 0x45, 0x0c
    };
    const u8 b[] = {
        0x76, 0x41, 0x37, 0x1c, 0x0d, 0x7a, 0x31, 0x10,
        0x00, 0x60, 0x86, 0xad, 0x3d, 0x5f, 0x8e, 0xce,
        0x99, 0xde, 0x08, 0xf7, 0x31, 0xc1, 0x6d, 0x26,
        0x48, 0x0a, 0xe2, 0x62, 0x7a, 0xbc, 0x4c, 0x09
    };
    const u8 c[] = {
        0xa0, 0x38, 0xed, 0xa9, 0x17, 0x26, 0x11, 0x17,
        0x5b, 0x35, 0x9b, 0xa4, 0xd5, 0xe3, 0xe3, 0xf1,
        0xaa, 0x97, 0x66, 0x48, 0x09, 0x7c, 0xfa, 0xcc,
        0x2a, 0x01, 0xec, 0xce, 0x73, 0x1e, 0x87, 0x06
    };
    u8 output[32];
    const u8 expected[] = {
        0x97, 0xcc, 0x1c, 0x92, 0x0e, 0xd5, 0x9e, 0x91,
        0xb0, 0xac, 0xc5, 0xcc, 0x5d, 0x93, 0xb5, 0xff,
        0x34, 0x15, 0x5c, 0x5f, 0xd7, 0xda, 0x19, 0x62,
        0x85, 0x09, 0xe2, 0xe2, 0xe5, 0x50, 0x54, 0x0d
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs102_ProduceCorrectResult){

    const u8 a[] = {
        0xf5, 0xb5, 0xe5, 0x15, 0xa9, 0xab, 0xcb, 0x62,
        0xbc, 0x8c, 0x30, 0x46, 0x75, 0x52, 0x65, 0x0f,
        0xe9, 0x1a, 0xac, 0xe5, 0x76, 0x81, 0x8c, 0x86,
        0x44, 0xd6, 0x3a, 0xb4, 0x93, 0x94, 0xc8, 0x03
    };
    const u8 b[] = {
        0x23, 0xaa, 0xd5, 0x6f, 0xf4, 0xbd, 0x7d, 0x42,
        0xe0, 0xbd, 0x2d, 0xfb, 0x76, 0x69, 0x6a, 0xda,
        0x93, 0xec, 0xfe, 0xb1, 0x3c, 0x64, 0x77, 0x73,
        0x67, 0x8a, 0xcf, 0x60, 0x30, 0xba, 0xeb, 0x00
    };
    const u8 c[] = {
        0x77, 0x60, 0x3f, 0x25, 0x49, 0xa6, 0x33, 0x14,
        0x25, 0xa1, 0x7c, 0x45, 0xbc, 0x44, 0x4a, 0x52,
        0x5b, 0x59, 0x93, 0x7b, 0xf5, 0xc4, 0x5e, 0x56,
        0x43, 0xf1, 0x50, 0x8c, 0x0e, 0xc9, 0x58, 0x0d
    };
    u8 output[32];
    const u8 expected[] = {
        0x97, 0x29, 0xad, 0xc0, 0xd3, 0xe5, 0xe6, 0x5b,
        0xb5, 0x48, 0xee, 0x58, 0x41, 0x44, 0x05, 0xe7,
        0x5c, 0x56, 0x4d, 0x1c, 0x02, 0x1c, 0x3a, 0x9c,
        0xe4, 0x00, 0x56, 0x78, 0x62, 0xa7, 0x85, 0x02
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs103_ProduceCorrectResult){

    const u8 a[] = {
        0xcc, 0x67, 0xb7, 0x74, 0xfb, 0x2d, 0x73, 0x58,
        0x5c, 0x73, 0xf6, 0xa6, 0x7e, 0x8a, 0x5a, 0xb2,
        0xa0, 0x67, 0x83, 0xdd, 0xca, 0x80, 0xc7, 0xd2,
        0xa8, 0xb7, 0x7b, 0x23, 0x0b, 0xb3, 0x4f, 0x05
    };
    const u8 b[] = {
        0x75, 0xad, 0xc7, 0x02, 0xab, 0x90, 0x28, 0xdc,
        0xcf, 0xe6, 0xd4, 0x64, 0xeb, 0x73, 0x4a, 0xe8,
        0x7f, 0x29, 0xcf, 0x3c, 0xe0, 0x83, 0x93, 0x09,
        0xdd, 0x74, 0xe6, 0x0f, 0x59, 0xf1, 0x2b, 0x01
    };
    const u8 c[] = {
        0x87, 0xcc, 0xd5, 0xb2, 0x26, 0x0a, 0x9a, 0x74,
        0xbd, 0xb9, 0x03, 0xa7, 0x7c, 0x6f, 0x8b, 0x1e,
        0x02, 0xf1, 0xb8, 0x20, 0x14, 0x41, 0x79, 0x0a,
        0x12, 0xf7, 0x82, 0x98, 0x5e, 0x89, 0xd9, 0x0d
    };
    u8 output[32];
    const u8 expected[] = {
        0x40, 0x56, 0x6b, 0xd3, 0x68, 0xf7, 0x68, 0x66,
        0x86, 0xca, 0xda, 0x0e, 0xdf, 0x27, 0xc8, 0x1c,
        0x81, 0xbe, 0xee, 0x04, 0x7f, 0x11, 0x7a, 0xef,
        0x11, 0xac, 0x37, 0x39, 0xca, 0x81, 0x26, 0x03
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs104_ProduceCorrectResult){

    const u8 a[] = {
        0xbe, 0x5b, 0x62, 0x6b, 0x20, 0x0c, 0xcb, 0x87,
        0x21, 0x59, 0x4e, 0x52, 0x5a, 0xe1, 0xea, 0x1c,
        0xba, 0x9a, 0x6d, 0x55, 0x7e, 0x6f, 0xff, 0x93,
        0x9f, 0x57, 0x06, 0x94, 0x40, 0x22, 0x31, 0x0b
    };
    const u8 b[] = {
        0x9f, 0x3d, 0xfb, 0x36, 0xa6, 0xfa, 0x62, 0x62,
        0xad, 0x52, 0x58, 0x0a, 0x90, 0x1a, 0x49, 0xfc,
        0x6a, 0xd5, 0x02, 0x55, 0x76, 0x75, 0x87, 0x12,
        0xfc, 0x9c, 0x1a, 0x7c, 0x17, 0xca, 0xc5, 0x05
    };
    const u8 c[] = {
        0x97, 0x88, 0xdb, 0xff, 0x8d, 0x0c, 0x7a, 0x64,
        0x86, 0x9f, 0x42, 0xda, 0xd3, 0xd9, 0x9e, 0xd9,
        0x67, 0xcb, 0xb8, 0x2e, 0xb3, 0x61, 0x97, 0x03,
        0x0b, 0x68, 0xb8, 0xae, 0x16, 0x2e, 0x92, 0x00
    };
    u8 output[32];
    const u8 expected[] = {
        0xcf, 0x36, 0x12, 0x0d, 0x24, 0x1a, 0xdb, 0x77,
        0x52, 0x0a, 0xcb, 0x2f, 0xbb, 0xd2, 0xc6, 0xee,
        0x57, 0xad, 0x2f, 0x72, 0x6c, 0x7a, 0xb6, 0xcc,
        0x90, 0xbc, 0x5e, 0x3a, 0x3b, 0xe7, 0x51, 0x0c
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs105_ProduceCorrectResult){

    const u8 a[] = {
        0xfa, 0xe8, 0x78, 0x63, 0xbc, 0xba, 0x9e, 0xd9,
        0x60, 0x3c, 0xd9, 0x3b, 0x96, 0x95, 0x21, 0xd3,
        0x7b, 0x00, 0xc1, 0x65, 0x49, 0x94, 0xe4, 0xc2,
        0x68, 0x22, 0x1c, 0xec, 0x12, 0x6d, 0x05, 0x02
    };
    const u8 b[] = {
        0xc9, 0xdf, 0x56, 0xec, 0x8b, 0x6b, 0x89, 0xc6,
        0x8c, 0xf1, 0x53, 0x9d, 0xf2, 0x31, 0xf0, 0xd6,
        0x93, 0x2f, 0xd6, 0xa3, 0x6f, 0x1e, 0xaa, 0xdd,
        0x8d, 0x25, 0x69, 0xcc, 0x9a, 0x0e, 0x4c, 0x00
    };
    const u8 c[] = {
        0xf8, 0x50, 0x78, 0x4a, 0xd9, 0x96, 0x9c, 0x3c,
        0x30, 0x1d, 0x40, 0x87, 0xfa, 0xc7, 0xee, 0xb9,
        0x83, 0xfd, 0xde, 0x89, 0xa8, 0x66, 0xc2, 0x9f,
        0xb3, 0x2a, 0x00, 0xc6, 0xad, 0x2c, 0x02, 0x09
    };
    u8 output[32];
    const u8 expected[] = {
        0x10, 0x89, 0xc0, 0xe7, 0x89, 0xd6, 0xbb, 0x5c,
        0x43, 0x0e, 0xb3, 0xa8, 0xae, 0xd9, 0x28, 0xd9,
        0x78, 0x49, 0x81, 0xd9, 0xb7, 0x2f, 0x24, 0x0e,
        0x53, 0x02, 0x75, 0x1a, 0x02, 0x87, 0x4c, 0x04
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs106_ProduceCorrectResult){

    const u8 a[] = {
        0x69, 0xdf, 0x55, 0x26, 0x2c, 0xa7, 0x10, 0x3d,
        0x87, 0xb2, 0x80, 0xf9, 0x38, 0x6b, 0x2c, 0xd9,
        0x75, 0x43, 0xb3, 0x90, 0xbd, 0x0b, 0xb3, 0x59,
        0xe9, 0x0d, 0x0f, 0x7f, 0xab, 0x42, 0x4a, 0x02
    };
    const u8 b[] = {
        0x68, 0x36, 0x3a, 0xd6, 0x68, 0x33, 0x5d, 0xff,
        0x9f, 0x3c, 0x88, 0xd1, 0x7f, 0xd1, 0x29, 0x7c,
        0xe9, 0x83, 0x86, 0x9a, 0x5a, 0x53, 0xd7, 0xba,
        0x82, 0xb4, 0xa8, 0x44, 0x1a, 0xae, 0x6d, 0x0e
    };
    const u8 c[] = {
        0x9f, 0x13, 0xcf, 0xd0, 0xb9, 0xa5, 0x36, 0x2e,
        0x6e, 0x7b, 0xb3, 0xf8, 0xb3, 0x04, 0x00, 0xfb,
        0x95, 0xff, 0x5e, 0x2d, 0x03, 0x8f, 0xaa, 0x50,
        0x5f, 0x9b, 0x58, 0x96, 0x6a, 0xfc, 0x6c, 0x0c
    };
    u8 output[32];
    const u8 expected[] = {
        0x5f, 0xcc, 0xdb, 0xc9, 0x22, 0xab, 0x64, 0x3c,
        0x19, 0xe6, 0xe4, 0x87, 0x45, 0x75, 0xec, 0xe4,
        0xf7, 0x48, 0x96, 0x01, 0x5d, 0x78, 0x44, 0x9c,
        0x32, 0x05, 0x7a, 0x5f, 0x24, 0x33, 0xe3, 0x06
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs107_ProduceCorrectResult){

    const u8 a[] = {
        0x7b, 0x91, 0x98, 0x92, 0xcc, 0xc2, 0x0d, 0xee,
        0x1e, 0x03, 0x58, 0xf3, 0x5d, 0xa4, 0xb1, 0x4a,
        0x72, 0x7e, 0x50, 0xdb, 0x4b, 0x23, 0x93, 0x5f,
        0xf8, 0xd3, 0x82, 0x0f, 0x4c, 0xb0, 0xb9, 0x03
    };
    const u8 b[] = {
        0x89, 0xc8, 0x93, 0x08, 0x07, 0x1f, 0x39, 0xa2,
        0x2a, 0x52, 0xb6, 0x8c, 0x7f, 0x80, 0x77, 0x94,
        0x25, 0xdd, 0x45, 0xc5, 0x43, 0x5a, 0x5e, 0xef,
        0xce, 0x33, 0x3f, 0xbc, 0x9b, 0x63, 0x26, 0x08
    };
    const u8 c[] = {
        0xdb, 0x53, 0xfe, 0xec, 0x7b, 0xb5, 0x25, 0xf4,
        0x85, 0xc7, 0x59, 0xe4, 0x70, 0xb3, 0xe2, 0x5c,
        0x02, 0x45, 0xc2, 0xcf, 0xdc, 0x4a, 0x0a, 0x35,
        0xe3, 0x94, 0x5b, 0x0d, 0xa9, 0x9b, 0x35, 0x06
    };
    u8 output[32];
    const u8 expected[] = {
        0xbc, 0x60, 0x6a, 0xa7, 0xda, 0x3e, 0x0c, 0x80,
        0x92, 0x22, 0x76, 0x93, 0xc2, 0x9b, 0x4f, 0xea,
        0xcd, 0x88, 0xcb, 0x2a, 0x1c, 0xd4, 0xcd, 0xa9,
        0x21, 0xea, 0xb3, 0xbe, 0x0a, 0xbb, 0xac, 0x08
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs108_ProduceCorrectResult){

    const u8 a[] = {
        0xad, 0x01, 0x2e, 0xa1, 0x4f, 0x77, 0x1e, 0x6a,
        0x44, 0x48, 0x50, 0xc5, 0xc5, 0x6f, 0x17, 0x78,
        0x1a, 0xf5, 0x0e, 0x41, 0xf4, 0x57, 0x36, 0x9c,
        0xc6, 0x5f, 0x48, 0x25, 0x42, 0x09, 0x08, 0x0f
    };
    const u8 b[] = {
        0xb8, 0xa0, 0x5f, 0x5d, 0x42, 0x42, 0xce, 0xb5,
        0x18, 0x85, 0xd8, 0xeb, 0xa8, 0x07, 0xf9, 0x91,
        0x40, 0xa2, 0x36, 0x23, 0x7f, 0xe9, 0xbe, 0xff,
        0x1c, 0x98, 0x6c, 0x2f, 0x7c, 0xf7, 0x19, 0x0a
    };
    const u8 c[] = {
        0x62, 0xa6, 0x38, 0x46, 0x68, 0xef, 0x8d, 0xa4,
        0xbe, 0x7b, 0xb2, 0x4e, 0x81, 0x71, 0xd9, 0x94,
        0x02, 0x76, 0xd6, 0x58, 0x9e, 0xbd, 0x6e, 0x85,
        0xb8, 0xa9, 0x72, 0x38, 0x5b, 0x31, 0xd9, 0x0a
    };
    u8 output[32];
    const u8 expected[] = {
        0x1a, 0x06, 0x6d, 0xcc, 0xb9, 0x71, 0x76, 0x8f,
        0x1c, 0x3e, 0x38, 0xf8, 0xc5, 0x97, 0xf9, 0x8b,
        0x92, 0xe1, 0x1d, 0xa0, 0xe1, 0x14, 0x98, 0xc7,
        0xd1, 0x42, 0xc1, 0x83, 0x82, 0xe0, 0x41, 0x0b
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs109_ProduceCorrectResult){

    const u8 a[] = {
        0xbf, 0x74, 0x11, 0xda, 0x07, 0x79, 0x1a, 0x4b,
        0x1a, 0x7a, 0xd1, 0xdb, 0x1c, 0x33, 0xdf, 0x41,
        0x85, 0x30, 0x06, 0x9f, 0xd4, 0x4c, 0x4b, 0x98,
        0x92, 0xad, 0xa2, 0x04, 0xc0, 0xd9, 0xcb, 0x07
    };
    const u8 b[] = {
        0x79, 0x25, 0xec, 0x61, 0xc5, 0xb9, 0xf0, 0x50,
        0x6b, 0x5c, 0x33, 0xad, 0xbc, 0x9d, 0xdf, 0xa7,
        0x4e, 0x15, 0x59, 0xd4, 0x39, 0xe8, 0x76, 0xc8,
        0x19, 0x15, 0xf9, 0xba, 0xe5, 0x57, 0x7c, 0x07
    };
    const u8 c[] = {
        0x0c, 0x63, 0x8a, 0x75, 0x54, 0x04, 0xc2, 0xb5,
        0x50, 0x1a, 0x48, 0x73, 0x2a, 0x0d, 0x87, 0x2c,
        0xb0, 0x39, 0x10, 0x79, 0xb9, 0xfc, 0x47, 0x82,
        0xc9, 0x60, 0x5b, 0xbd, 0xcb, 0x8d, 0x96, 0x05
    };
    u8 output[32];
    const u8 expected[] = {
        0x7b, 0x69, 0x68, 0x55, 0x0e, 0x24, 0xcf, 0x45,
        0xa2, 0xbb, 0x8b, 0xea, 0x12, 0x38, 0x50, 0xe8,
        0x53, 0x5b, 0x65, 0x0b, 0x62, 0xef, 0xcf, 0x6f,
        0x55, 0x62, 0x9c, 0x69, 0xaf, 0x06, 0xbc, 0x0e
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs110_ProduceCorrectResult){

    const u8 a[] = {
        0x74, 0x94, 0xff, 0x4b, 0x18, 0x8a, 0xd6, 0xbd,
        0x93, 0x27, 0xca, 0x5b, 0x02, 0x02, 0x13, 0x93,
        0xfe, 0x55, 0x7c, 0x8a, 0x40, 0x3f, 0x4a, 0xb2,
        0x12, 0xe3, 0x80, 0x24, 0xf1, 0xfa, 0x1d, 0x0e
    };
    const u8 b[] = {
        0x9e, 0xda, 0x19, 0x7e, 0x5c, 0x20, 0x64, 0x0b,
        0x97, 0xb5, 0x60, 0xde, 0x87, 0x9f, 0xeb, 0xb6,
        0x5f, 0x4b, 0xf4, 0xeb, 0xdc, 0x37, 0xc1, 0xda,
        0xca, 0x6a, 0xee, 0xad, 0x48, 0x6e, 0x20, 0x09
    };
    const u8 c[] = {
        0x1c, 0xc4, 0x8f, 0x2e, 0x0b, 0x0c, 0xb9, 0xef,
        0xa6, 0x99, 0x0b, 0x86, 0xba, 0x58, 0xe9, 0x46,
        0x36, 0xef, 0xa1, 0x3c, 0x9e, 0x3c, 0xdc, 0xe6,
        0x5e, 0x69, 0x94, 0x44, 0xe4, 0x98, 0xb3, 0x08
    };
    u8 output[32];
    const u8 expected[] = {
        0x80, 0x1a, 0x13, 0x87, 0x5c, 0x81, 0x31, 0x8d,
        0x46, 0xc2, 0x42, 0x47, 0x0d, 0x4e, 0x58, 0x07,
        0xf7, 0x15, 0x9f, 0x0b, 0x9a, 0x70, 0x46, 0x92,
        0x81, 0xb1, 0x91, 0x33, 0x87, 0xd5, 0xed, 0x0d
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs111_ProduceCorrectResult){

    const u8 a[] = {
        0xde, 0x84, 0x46, 0x3c, 0xc2, 0x20, 0x36, 0xad,
        0x52, 0x7b, 0xd9, 0x8d, 0xc5, 0x14, 0x03, 0x1c,
        0x6b, 0xdb, 0xbf, 0x73, 0x44, 0xf4, 0xe0, 0x13,
        0x04, 0x8e, 0xc7, 0x9d, 0xa1, 0xe7, 0xf4, 0x01
    };
    const u8 b[] = {
        0x0a, 0x7b, 0xa2, 0x26, 0xe6, 0x8e, 0x6c, 0x72,
        0x46, 0x53, 0x62, 0x6c, 0x9c, 0x71, 0x3a, 0x0c,
        0x17, 0xe8, 0x16, 0xc7, 0x81, 0xba, 0xbc, 0xff,
        0x6b, 0x57, 0xb7, 0x68, 0xe8, 0x7a, 0x61, 0x0a
    };
    const u8 c[] = {
        0xdf, 0x02, 0x65, 0x5a, 0xb7, 0xa3, 0x30, 0x4a,
        0xa3, 0x90, 0x34, 0x62, 0x94, 0x0d, 0x86, 0x82,
        0xfc, 0x47, 0x4d, 0xcf, 0xf7, 0x87, 0xbe, 0xab,
        0xf8, 0x81, 0xd5, 0xd0, 0x65, 0xb1, 0x7d, 0x0d
    };
    u8 output[32];
    const u8 expected[] = {
        0xd4, 0xa1, 0xbe, 0xf2, 0xc6, 0x35, 0x24, 0xc9,
        0xc9, 0x66, 0x72, 0x2b, 0x4c, 0xfc, 0x93, 0xa0,
        0xcb, 0xbd, 0xf4, 0x29, 0x1a, 0xce, 0x7a, 0x4b,
        0xed, 0x3d, 0xec, 0x12, 0xa5, 0x29, 0x45, 0x0c
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs112_ProduceCorrectResult){

    const u8 a[] = {
        0x33, 0xc2, 0x1c, 0x68, 0x29, 0x73, 0x56, 0x79,
        0xad, 0x5f, 0x94, 0x1b, 0x9a, 0xeb, 0x81, 0x04,
        0xeb, 0xf3, 0x1e, 0x58, 0x4b, 0xc1, 0xf5, 0x36,
        0x44, 0xe9, 0xef, 0x5a, 0x8a, 0x8f, 0x93, 0x0a
    };
    const u8 b[] = {
        0x1d, 0x5b, 0xbc, 0x8f, 0x5e, 0xe7, 0xb0, 0xfc,
        0x64, 0xca, 0x26, 0x96, 0x73, 0x8f, 0xa2, 0x1e,
        0xe3, 0x54, 0x60, 0xd2, 0x81, 0xd7, 0x76, 0xf5,
        0x6c, 0xa7, 0xce, 0xc1, 0xe5, 0x7b, 0xea, 0x0c
    };
    const u8 c[] = {
        0xfe, 0x0f, 0x7a, 0x60, 0xe9, 0x0a, 0x57, 0xaf,
        0xe5, 0x0a, 0xec, 0x5d, 0x5f, 0xce, 0x3b, 0x15,
        0xc2, 0x28, 0xb4, 0xa4, 0x7d, 0xba, 0x2e, 0xc5,
        0xcc, 0x1a, 0xc6, 0x0d, 0x82, 0x6e, 0x2e, 0x03
    };
    u8 output[32];
    const u8 expected[] = {
        0xb1, 0x5a, 0x9a, 0xee, 0x30, 0x14, 0x2e, 0x83,
        0xcf, 0x12, 0xa7, 0x12, 0x79, 0xbb, 0xa1, 0xd4,
        0xb7, 0xc9, 0x83, 0x03, 0xf1, 0x7c, 0x27, 0xee,
        0xc6, 0x2a, 0x5a, 0x36, 0x5c, 0xd9, 0xc9, 0x0c
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs113_ProduceCorrectResult){

    const u8 a[] = {
        0x4b, 0xd2, 0x78, 0x47, 0xe9, 0xc4, 0x0f, 0xfa,
        0x23, 0x0c, 0x15, 0xc9, 0x33, 0x63, 0x4f, 0xea,
        0x02, 0x94, 0xe5, 0xbb, 0xd0, 0x01, 0xd3, 0xf9,
        0x1c, 0xa3, 0x09, 0x5b, 0x6a, 0x40, 0xd7, 0x0b
    };
    const u8 b[] = {
        0xa1, 0x25, 0xd7, 0xca, 0x68, 0xf6, 0x36, 0x65,
        0x1f, 0xf3, 0xae, 0x8e, 0xb6, 0x5f, 0x82, 0x0d,
        0xbe, 0x1b, 0x81, 0x38, 0x51, 0x35, 0xe0, 0x42,
        0xd2, 0x8a, 0x20, 0xc7, 0x82, 0x24, 0xb2, 0x01
    };
    const u8 c[] = {
        0x15, 0xdf, 0x2d, 0x46, 0x03, 0x7b, 0xc0, 0x9c,
        0x8d, 0x8b, 0x9e, 0x3d, 0xbb, 0x7c, 0x4c, 0xed,
        0x2d, 0xed, 0x25, 0xe5, 0x55, 0xaa, 0xec, 0x40,
        0xc1, 0xf7, 0xe2, 0xf6, 0x83, 0x34, 0xfa, 0x0e
    };
    u8 output[32];
    const u8 expected[] = {
        0x0f, 0xd9, 0xb2, 0xf8, 0xf2, 0x59, 0xce, 0x05,
        0x60, 0xd8, 0xd3, 0x68, 0xcd, 0x9b, 0x9f, 0xc2,
        0xf6, 0x31, 0x99, 0xc9, 0xb5, 0x13, 0x8f, 0x07,
        0x42, 0xe7, 0xc8, 0x2a, 0x4b, 0xe6, 0xe3, 0x0a
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs114_ProduceCorrectResult){

    const u8 a[] = {
        0xcc, 0x5e, 0x8b, 0xc9, 0x7c, 0x2c, 0xad, 0x18,
        0x9b, 0xa4, 0xf6, 0x69, 0x85, 0xb6, 0x23, 0xf3,
        0x3f, 0x45, 0xbf, 0x97, 0x73, 0xe4, 0x92, 0x26,
        0xb0, 0x3c, 0x10, 0x32, 0xe9, 0xd6, 0xd1, 0x01
    };
    const u8 b[] = {
        0xeb, 0x42, 0xa7, 0x91, 0x1f, 0xea, 0x36, 0x18,
        0x42, 0xd2, 0xf6, 0x8c, 0x42, 0xf8, 0x93, 0x55,
        0x61, 0xbe, 0x13, 0x28, 0xe0, 0x77, 0xfe, 0xd6,
        0x9c, 0x25, 0xcd, 0x64, 0x95, 0x8c, 0x0a, 0x06
    };
    const u8 c[] = {
        0xcd, 0xdd, 0x3a, 0xf4, 0xae, 0x6b, 0xad, 0xc9,
        0xa7, 0x44, 0xe4, 0xef, 0xca, 0xea, 0xb3, 0xc2,
        0xee, 0x54, 0x81, 0xe3, 0x22, 0xf6, 0x30, 0x23,
        0x11, 0xeb, 0x53, 0xa1, 0x0e, 0xf0, 0x75, 0x05
    };
    u8 output[32];
    const u8 expected[] = {
        0xe8, 0x70, 0x1c, 0xfa, 0x46, 0x79, 0x45, 0x29,
        0x84, 0x5c, 0x79, 0x60, 0x6c, 0x58, 0xbb, 0xaf,
        0xc4, 0x90, 0x24, 0x84, 0xb3, 0xcf, 0x20, 0x6b,
        0x01, 0xf6, 0xd3, 0xb1, 0xad, 0x65, 0x11, 0x0f
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs115_ProduceCorrectResult){

    const u8 a[] = {
        0x31, 0xbd, 0x94, 0x68, 0x0b, 0x04, 0x22, 0xde,
        0xa1, 0xd6, 0xb5, 0xc1, 0xdc, 0xd2, 0x8f, 0x73,
        0x57, 0xf0, 0x12, 0x4c, 0x16, 0x44, 0x70, 0x51,
        0x25, 0xbe, 0x52, 0x73, 0xff, 0x6e, 0xcc, 0x03
    };
    const u8 b[] = {
        0x39, 0x2a, 0xdf, 0x36, 0xfa, 0x72, 0x6b, 0x58,
        0x8e, 0xfd, 0xeb, 0xe2, 0x9f, 0x83, 0xe6, 0x2a,
        0xb6, 0xb4, 0x87, 0x3a, 0x93, 0x02, 0xd5, 0x72,
        0x4b, 0x1e, 0xe2, 0xa7, 0x4f, 0x08, 0xf0, 0x0d
    };
    const u8 c[] = {
        0x02, 0x60, 0x31, 0x3e, 0xea, 0x38, 0xa0, 0xc7,
        0x38, 0xfb, 0x79, 0x39, 0xa5, 0x5e, 0x88, 0xf3,
        0xee, 0x2e, 0xc7, 0x72, 0x82, 0xb9, 0x05, 0x0f,
        0x2a, 0xec, 0xc2, 0xf9, 0x2e, 0x3b, 0xbf, 0x01
    };
    u8 output[32];
    const u8 expected[] = {
        0x75, 0xbb, 0x2f, 0x15, 0xa6, 0x24, 0x95, 0x5c,
        0x39, 0xe4, 0x68, 0xad, 0x03, 0x1a, 0x65, 0x15,
        0xfc, 0x79, 0x50, 0xcd, 0x45, 0x0c, 0x1f, 0xdf,
        0x51, 0x7c, 0x85, 0x8f, 0xc1, 0xb2, 0x97, 0x06
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs116_ProduceCorrectResult){

    const u8 a[] = {
        0x6d, 0x82, 0x49, 0xbb, 0x39, 0x4a, 0x80, 0x90,
        0x89, 0x41, 0x28, 0x80, 0xcf, 0x29, 0x30, 0xbe,
        0x52, 0x74, 0x9e, 0x4b, 0x5b, 0x58, 0x10, 0xa2,
        0xba, 0x46, 0xc5, 0x77, 0x31, 0x60, 0x23, 0x02
    };
    const u8 b[] = {
        0x52, 0xd5, 0x29, 0x85, 0x1e, 0x42, 0xa7, 0x8e,
        0x69, 0x0c, 0x1b, 0x54, 0x4a, 0x00, 0xd8, 0x82,
        0xac, 0x11, 0xcd, 0x3a, 0xdc, 0xc5, 0xf2, 0x18,
        0xc7, 0xb9, 0x03, 0xd2, 0x79, 0x0a, 0x2a, 0x07
    };
    const u8 c[] = {
        0x10, 0x50, 0x73, 0x22, 0xd4, 0xa5, 0xc2, 0x72,
        0xfa, 0xdf, 0xd1, 0x3f, 0xc1, 0x2b, 0xfa, 0xfe,
        0x91, 0xcb, 0x7b, 0x96, 0xc8, 0x9c, 0xa8, 0x35,
        0x6c, 0x5c, 0x49, 0x86, 0xb6, 0x80, 0x5c, 0x0c
    };
    u8 output[32];
    const u8 expected[] = {
        0x68, 0x2c, 0xb8, 0x3c, 0xe7, 0xf5, 0x2a, 0x26,
        0xb9, 0x31, 0x42, 0x7f, 0xc9, 0x73, 0xdc, 0xda,
        0x28, 0x23, 0x19, 0x24, 0xcf, 0x76, 0x95, 0xfd,
        0x05, 0x3b, 0xbb, 0x69, 0x86, 0xc4, 0x78, 0x01
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs117_ProduceCorrectResult){

    const u8 a[] = {
        0xc7, 0x1f, 0x2b, 0xa8, 0xf8, 0xde, 0xc1, 0x19,
        0x1a, 0x81, 0x5b, 0x80, 0xe0, 0x2e, 0x9d, 0x9c,
        0xfa, 0xcc, 0xa4, 0xea, 0xbc, 0x45, 0xc1, 0x63,
        0x50, 0xf2, 0xb2, 0xca, 0x77, 0x9a, 0x50, 0x0c
    };
    const u8 b[] = {
        0xa5, 0xe5, 0x8e, 0x23, 0x4b, 0x09, 0xe1, 0x94,
        0xc5, 0xb9, 0x19, 0x3b, 0xb4, 0x7a, 0x75, 0x7b,
        0x33, 0xa5, 0x1c, 0x72, 0x11, 0x88, 0x9e, 0x3c,
        0x4e, 0xd0, 0x14, 0xbc, 0x87, 0x2a, 0x90, 0x08
    };
    const u8 c[] = {
        0x28, 0x98, 0xa4, 0xdd, 0x5b, 0x08, 0xed, 0x27,
        0xa5, 0xf2, 0x60, 0xd7, 0x02, 0xc9, 0x88, 0x2b,
        0x8a, 0xb5, 0x05, 0xc9, 0xba, 0x8d, 0x60, 0x0b,
        0x6b, 0xe9, 0x2b, 0xbc, 0x49, 0x09, 0x52, 0x00
    };
    u8 output[32];
    const u8 expected[] = {
        0x39, 0x81, 0x24, 0x00, 0x59, 0xd9, 0xb5, 0xe8,
        0x3d, 0xa1, 0x06, 0xbb, 0x85, 0x4a, 0x1d, 0x00,
        0x65, 0xa4, 0xe2, 0xf6, 0xe7, 0x87, 0x93, 0x77,
        0xa7, 0x51, 0x3d, 0xd5, 0x16, 0xdd, 0xfd, 0x00
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs118_ProduceCorrectResult){

    const u8 a[] = {
        0xe2, 0xa4, 0x02, 0x3c, 0x16, 0x65, 0x87, 0x2b,
        0xc3, 0xef, 0xd5, 0x40, 0xfa, 0x85, 0x6d, 0xd5,
        0x2f, 0xa5, 0xe0, 0x95, 0x48, 0xb9, 0xd2, 0x20,
        0x37, 0xa2, 0x50, 0x27, 0xef, 0xa1, 0x95, 0x02
    };
    const u8 b[] = {
        0x3e, 0xf3, 0xcb, 0x4b, 0xa3, 0x1c, 0x45, 0x2c,
        0xeb, 0x65, 0x64, 0x29, 0x8f, 0xc6, 0x79, 0x2c,
        0xd3, 0xab, 0xae, 0x25, 0xa3, 0xfc, 0xc2, 0xff,
        0xf3, 0x95, 0x31, 0x41, 0xa8, 0xba, 0x66, 0x0b
    };
    const u8 c[] = {
        0x52, 0x67, 0x38, 0x5b, 0xd4, 0x83, 0x00, 0x17,
        0x61, 0xf5, 0x13, 0xa5, 0xcb, 0x49, 0x3e, 0xb8,
        0x47, 0xd3, 0x41, 0x5d, 0xae, 0x6f, 0x89, 0x6a,
        0xdb, 0x38, 0x0f, 0x3f, 0xbb, 0xd5, 0x35, 0x04
    };
    u8 output[32];
    const u8 expected[] = {
        0xc7, 0xed, 0xe3, 0x16, 0x2d, 0x0f, 0x39, 0xd1,
        0x0b, 0xe9, 0x7a, 0xd6, 0xfe, 0x18, 0x01, 0x2c,
        0x47, 0x2e, 0xe4, 0x41, 0x9e, 0x97, 0x49, 0xab,
        0xbf, 0x0d, 0x80, 0xee, 0x20, 0x4d, 0x1b, 0x01
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs119_ProduceCorrectResult){

    const u8 a[] = {
        0x7c, 0x0e, 0xb8, 0x0a, 0xe1, 0xa2, 0x5f, 0x1e,
        0x86, 0xe3, 0x8e, 0x53, 0xc3, 0x66, 0xf6, 0xd8,
        0x38, 0xaf, 0xad, 0x44, 0x71, 0x5e, 0xbd, 0x7a,
        0xe4, 0xca, 0xe7, 0xb9, 0x40, 0x9f, 0x70, 0x07
    };
    const u8 b[] = {
        0x36, 0xa7, 0xc3, 0x08, 0xc0, 0x0f, 0xb6, 0xf1,
        0x7f, 0x3f, 0x00, 0x94, 0xec, 0xa7, 0x7b, 0xcd,
        0x3b, 0xc3, 0xb5, 0x6a, 0x51, 0x78, 0x66, 0x9d,
        0x17, 0x96, 0x8b, 0x38, 0x20, 0x2b, 0x22, 0x0f
    };
    const u8 c[] = {
        0xca, 0xab, 0xbc, 0x03, 0xc3, 0xc5, 0xae, 0x78,
        0xea, 0x8b, 0x99, 0x15, 0x9e, 0xcc, 0x1c, 0x62,
        0xe4, 0xfc, 0x4c, 0x8b, 0x62, 0x0e, 0xba, 0x48,
        0x96, 0x9b, 0x5e, 0xa6, 0xac, 0x7b, 0x5e, 0x03
    };
    u8 output[32];
    const u8 expected[] = {
        0x0c, 0x19, 0x91, 0x96, 0x8d, 0x49, 0xf4, 0x90,
        0xbb, 0x05, 0x8e, 0x9b, 0xda, 0x21, 0x67, 0x70,
        0x2d, 0xee, 0x62, 0x2a, 0xee, 0x84, 0x7a, 0x22,
        0x2f, 0x4e, 0xe2, 0xc8, 0xcf, 0xf2, 0xe3, 0x05
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs120_ProduceCorrectResult){

    const u8 a[] = {
        0xb8, 0x38, 0xcb, 0xfe, 0x76, 0x01, 0x5c, 0xf2,
        0x7c, 0x1f, 0xa9, 0xf3, 0x11, 0xe5, 0xd9, 0x1d,
        0xbd, 0x96, 0x3d, 0xa1, 0x4c, 0xb3, 0x3f, 0x8e,
        0x65, 0x40, 0x1f, 0xb0, 0xc1, 0xf3, 0x6a, 0x04
    };
    const u8 b[] = {
        0x39, 0x50, 0x13, 0x86, 0x12, 0x18, 0xda, 0xa5,
        0x3a, 0x9f, 0x71, 0xd1, 0x0b, 0xe7, 0xfb, 0x2b,
        0x66, 0x02, 0xc5, 0x50, 0x4c, 0x9b, 0x93, 0xca,
        0xd2, 0x7d, 0xa6, 0x39, 0x72, 0xf6, 0xef, 0x09
    };
    const u8 c[] = {
        0x6d, 0x9f, 0xb0, 0x30, 0x26, 0x8d, 0xe3, 0x00,
        0x97, 0x88, 0xdc, 0x58, 0xf9, 0x44, 0x93, 0x73,
        0x5a, 0x06, 0xc7, 0x5e, 0x86, 0xe0, 0xb7, 0x47,
        0xb9, 0x8a, 0x2d, 0x89, 0xd2, 0x87, 0x59, 0x06
    };
    u8 output[32];
    const u8 expected[] = {
        0x29, 0x44, 0xac, 0x0d, 0x1f, 0x38, 0xcb, 0x1f,
        0x0b, 0xe6, 0xb2, 0xf1, 0x79, 0x1a, 0xee, 0x30,
        0xcf, 0xcb, 0x16, 0x5d, 0xf8, 0xc9, 0x2f, 0xc2,
        0xe0, 0x85, 0x60, 0x1b, 0x21, 0xf2, 0xfd, 0x08
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs121_ProduceCorrectResult){

    const u8 a[] = {
        0xd8, 0xad, 0x55, 0xf0, 0x2d, 0x2d, 0x32, 0xcb,
        0x22, 0x97, 0xbb, 0x54, 0x11, 0x08, 0x5f, 0x0d,
        0x03, 0x92, 0x7a, 0x1a, 0xf4, 0xcf, 0x93, 0xb2,
        0xb1, 0xb7, 0x4c, 0xf5, 0xb1, 0x2f, 0xcb, 0x01
    };
    const u8 b[] = {
        0xa9, 0x39, 0xf1, 0xd5, 0x86, 0x3e, 0x30, 0x61,
        0x21, 0x51, 0x15, 0x69, 0x66, 0xb3, 0x45, 0x6f,
        0x9e, 0x32, 0x81, 0x68, 0x78, 0x51, 0x16, 0xc6,
        0x40, 0xf7, 0xdd, 0x2c, 0x1b, 0x49, 0xed, 0x0b
    };
    const u8 c[] = {
        0x1f, 0x50, 0x3e, 0xd7, 0xd9, 0x5b, 0xc8, 0x31,
        0xd6, 0xff, 0xe6, 0x75, 0xfc, 0xdd, 0xfc, 0x10,
        0x66, 0x2f, 0x0e, 0x30, 0x8a, 0x23, 0xb9, 0xfb,
        0x53, 0x8a, 0x1a, 0x72, 0x20, 0x0e, 0x7c, 0x09
    };
    u8 output[32];
    const u8 expected[] = {
        0xa4, 0x58, 0xed, 0x43, 0x67, 0x63, 0xd6, 0x4f,
        0xb1, 0x28, 0x2f, 0x8a, 0x42, 0xfd, 0x67, 0xf9,
        0x35, 0x04, 0x01, 0x0d, 0x30, 0x6e, 0x41, 0x98,
        0x91, 0x45, 0xab, 0x60, 0x0e, 0xb6, 0xed, 0x02
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs122_ProduceCorrectResult){

    const u8 a[] = {
        0x89, 0x27, 0x72, 0x98, 0xcc, 0xfa, 0x44, 0x6e,
        0x07, 0xd3, 0x9a, 0xc0, 0x9e, 0xa1, 0xc1, 0x6b,
        0x5f, 0x75, 0x1c, 0xcd, 0x95, 0x08, 0xeb, 0x77,
        0x45, 0x33, 0x5c, 0x38, 0xe3, 0xb4, 0xae, 0x06
    };
    const u8 b[] = {
        0x70, 0xe1, 0x3b, 0x03, 0x78, 0x64, 0x95, 0xfd,
        0xd1, 0x64, 0xc9, 0x03, 0x1f, 0x78, 0x0d, 0x95,
        0xd7, 0xb2, 0x97, 0x2c, 0x57, 0x88, 0xbf, 0x2a,
        0xe2, 0x7b, 0x4a, 0x9e, 0xa0, 0xd4, 0xe2, 0x00
    };
    const u8 c[] = {
        0xce, 0x2a, 0x52, 0x2e, 0x5b, 0x96, 0x3b, 0x56,
        0x76, 0xbe, 0x90, 0xe8, 0x51, 0x32, 0xd4, 0x01,
        0xc7, 0x29, 0x14, 0xb1, 0x64, 0x4f, 0x03, 0x93,
        0x66, 0x32, 0xaf, 0x3c, 0xdf, 0xe0, 0x7c, 0x02
    };
    u8 output[32];
    const u8 expected[] = {
        0xd7, 0x4f, 0x13, 0x23, 0xcd, 0x94, 0x05, 0xc8,
        0xf2, 0xb1, 0xb3, 0x3c, 0x09, 0x00, 0xbf, 0xfc,
        0x4c, 0x20, 0x57, 0x02, 0x93, 0x86, 0x4f, 0x9b,
        0xbc, 0x3b, 0xf5, 0xf0, 0x1c, 0x5f, 0x42, 0x04
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs123_ProduceCorrectResult){

    const u8 a[] = {
        0xac, 0xfb, 0x85, 0xc0, 0x57, 0x79, 0x7b, 0x70,
        0xdd, 0x75, 0xbe, 0x28, 0xcf, 0x5b, 0x51, 0x32,
        0xb6, 0x27, 0xa2, 0x5a, 0x58, 0xa1, 0x7d, 0xec,
        0xbf, 0xb0, 0x47, 0x5f, 0x6d, 0x5b, 0x66, 0x0d
    };
    const u8 b[] = {
        0x81, 0x40, 0xc2, 0x4b, 0xb2, 0x5d, 0x2e, 0xc6,
        0x96, 0x4b, 0x39, 0xe7, 0xff, 0x85, 0x36, 0x07,
        0x1b, 0x72, 0xac, 0xa6, 0x84, 0x83, 0x7d, 0xa0,
        0xed, 0x58, 0xcb, 0xea, 0x66, 0xc3, 0xe9, 0x00
    };
    const u8 c[] = {
        0xb5, 0x84, 0xb2, 0x49, 0x70, 0x28, 0xff, 0x61,
        0x09, 0x3a, 0xca, 0x81, 0x0b, 0xb9, 0x2f, 0x07,
        0x95, 0xbe, 0xdb, 0x7e, 0x82, 0x8e, 0x5c, 0xc0,
        0x2f, 0xca, 0xdc, 0x9e, 0x5f, 0xb2, 0xb6, 0x01
    };
    u8 output[32];
    const u8 expected[] = {
        0x31, 0xa4, 0x9a, 0x4a, 0xb8, 0x52, 0x34, 0x24,
        0x2d, 0x54, 0x55, 0xcb, 0x14, 0xc6, 0x45, 0x4c,
        0x6d, 0xa7, 0xe5, 0x21, 0x00, 0x0a, 0x36, 0x41,
        0xa5, 0x2c, 0x48, 0xbd, 0x7e, 0x37, 0x89, 0x06
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs124_ProduceCorrectResult){

    const u8 a[] = {
        0xa8, 0x98, 0x1f, 0xc3, 0x09, 0xfb, 0x51, 0x32,
        0x6e, 0x18, 0xcb, 0x94, 0x26, 0x49, 0xd2, 0x43,
        0xc0, 0x66, 0x89, 0x9a, 0x0d, 0x1f, 0x58, 0x00,
        0x3b, 0x43, 0x24, 0x1a, 0xa1, 0x31, 0xd0, 0x04
    };
    const u8 b[] = {
        0xd6, 0x58, 0x09, 0x19, 0xda, 0xb9, 0xf9, 0xb1,
        0x42, 0x94, 0x43, 0xdb, 0xdc, 0x4c, 0x87, 0xc2,
        0x27, 0x71, 0x39, 0xf2, 0x69, 0xa4, 0x8b, 0x7c,
        0x1d, 0x10, 0x55, 0xb2, 0x9e, 0xa0, 0x47, 0x0f
    };
    const u8 c[] = {
        0x49, 0x53, 0x4d, 0x05, 0xed, 0xdd, 0x27, 0x24,
        0xa0, 0xb5, 0x40, 0xe0, 0x2b, 0xe5, 0x7c, 0x8b,
        0x19, 0x99, 0x97, 0x14, 0x1f, 0xda, 0x9c, 0xa2,
        0xc7, 0x94, 0xe2, 0x64, 0xd1, 0x15, 0x2b, 0x0c
    };
    u8 output[32];
    const u8 expected[] = {
        0xdf, 0x53, 0xcc, 0x02, 0x32, 0x05, 0x1d, 0x76,
        0x89, 0xc2, 0x3d, 0xb3, 0x79, 0xc4, 0x0d, 0x9b,
        0x2c, 0x3a, 0x6b, 0xb0, 0x01, 0xb6, 0x1b, 0x74,
        0x54, 0x2b, 0x16, 0x97, 0x52, 0xf7, 0xb3, 0x00
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs125_ProduceCorrectResult){

    const u8 a[] = {
        0x44, 0x1c, 0xff, 0x2e, 0x83, 0xff, 0x8b, 0x06,
        0xc7, 0x53, 0xe8, 0x9f, 0xd5, 0x91, 0x3b, 0x16,
        0x92, 0x50, 0x80, 0x58, 0x3d, 0x6c, 0x92, 0x4c,
        0xae, 0x26, 0xeb, 0xce, 0x3f, 0x84, 0x9a, 0x00
    };
    const u8 b[] = {
        0x1d, 0x90, 0x23, 0x8b, 0x52, 0x20, 0x60, 0x10,
        0x68, 0x0c, 0xf7, 0x3a, 0x4b, 0x0e, 0x8d, 0x39,
        0x49, 0x8e, 0x93, 0xf6, 0xea, 0x4b, 0x07, 0xbb,
        0xaa, 0xac, 0xae, 0xbf, 0xf9, 0x8a, 0x40, 0x06
    };
    const u8 c[] = {
        0x1e, 0xcc, 0x3c, 0x06, 0x1c, 0x3d, 0x51, 0xb0,
        0x8e, 0xec, 0x4a, 0xbf, 0x17, 0x0d, 0x01, 0x86,
        0x20, 0x13, 0x7b, 0x81, 0xd3, 0xcb, 0xd9, 0x23,
        0xdc, 0x91, 0xcb, 0x38, 0x3b, 0x0b, 0x5e, 0x08
    };
    u8 output[32];
    const u8 expected[] = {
        0x73, 0xfe, 0x38, 0x79, 0xd6, 0x56, 0xfd, 0x3f,
        0x7d, 0xe6, 0xaf, 0x4b, 0x38, 0x0c, 0x5a, 0xd1,
        0xe5, 0xe4, 0xc1, 0x4a, 0x5f, 0xa2, 0x17, 0x09,
        0x06, 0x30, 0x78, 0x46, 0xb8, 0xb1, 0x96, 0x09
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs126_ProduceCorrectResult){

    const u8 a[] = {
        0x75, 0x06, 0xe4, 0x06, 0xa6, 0xc6, 0x65, 0xfb,
        0x3e, 0xac, 0x1c, 0x59, 0xa3, 0x64, 0xca, 0xdd,
        0x38, 0xdf, 0x4c, 0x7c, 0x97, 0x0a, 0xf0, 0x7d,
        0x19, 0xa8, 0x5a, 0x85, 0x9a, 0x5a, 0x4b, 0x06
    };
    const u8 b[] = {
        0x31, 0x2a, 0x79, 0x7c, 0x2c, 0xb2, 0xb1, 0x54,
        0x2d, 0xd5, 0x15, 0x58, 0x65, 0x28, 0xd8, 0x4f,
        0x02, 0x5b, 0x8b, 0x96, 0x1b, 0x03, 0xfb, 0xb1,
        0x3f, 0x8c, 0x82, 0x37, 0xda, 0xe0, 0xb7, 0x07
    };
    const u8 c[] = {
        0x91, 0x28, 0xd5, 0x66, 0xd9, 0x96, 0x8b, 0x0b,
        0xcf, 0x3b, 0xf0, 0xdf, 0xa5, 0x2c, 0xd4, 0x3e,
        0x23, 0xd4, 0x51, 0x0c, 0x0e, 0x1f, 0xff, 0x8a,
        0xdc, 0x8c, 0x5e, 0xbe, 0xf3, 0x8f, 0x9f, 0x04
    };
    u8 output[32];
    const u8 expected[] = {
        0xfb, 0xe4, 0x47, 0xb0, 0x00, 0xbd, 0x43, 0x50,
        0x70, 0xed, 0xd8, 0x8d, 0x34, 0x21, 0x6a, 0xc7,
        0x5f, 0x62, 0x20, 0xbd, 0x2a, 0x21, 0x1d, 0x99,
        0x1f, 0xe6, 0x0b, 0xa4, 0xc2, 0x37, 0xe7, 0x08
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}

TEST(SCALARS_ED25519, Muladd_RandomlyGeneratedInputs127_ProduceCorrectResult){

    const u8 a[] = {
        0xf8, 0x75, 0x62, 0xc9, 0x43, 0x4f, 0xed, 0x4f,
        0xb6, 0x1a, 0x34, 0x95, 0xe3, 0x42, 0x58, 0xb4,
        0x77, 0xaa, 0xb8, 0xf6, 0x28, 0xde, 0xb8, 0xf0,
        0x17, 0x00, 0x52, 0x52, 0xb8, 0x70, 0x3a, 0x01
    };
    const u8 b[] = {
        0xc9, 0xff, 0x63, 0x35, 0x40, 0xc1, 0xc1, 0x35,
        0x2a, 0xae, 0xff, 0x06, 0x1b, 0xa0, 0xb5, 0xe5,
        0xd3, 0x32, 0x9f, 0x28, 0x93, 0x9e, 0xba, 0xe3,
        0x26, 0x67, 0xd0, 0x39, 0xd1, 0x94, 0xf3, 0x0b
    };
    const u8 c[] = {
        0xba, 0x9c, 0x31, 0x1f, 0x89, 0xac, 0x21, 0xff,
        0xce, 0xde, 0x7d, 0x6e, 0x4e, 0xbc, 0xec, 0xc7,
        0xc6, 0x4b, 0xcb, 0x97, 0x70, 0x15, 0x1a, 0xe7,
        0x4c, 0x05, 0x95, 0xbd, 0xf4, 0xfa, 0xde, 0x04
    };
    u8 output[32];
    const u8 expected[] = {
        0xd8, 0x89, 0xe2, 0xed, 0x0a, 0xc4, 0x6b, 0xa7,
        0xe1, 0x4b, 0xf7, 0x90, 0xc9, 0x55, 0x1a, 0x87,
        0x04, 0xa6, 0xa1, 0x1f, 0x17, 0x76, 0x7a, 0xd8,
        0x95, 0x40, 0xee, 0x39, 0xc7, 0x4a, 0x57, 0x0e
    };
    ed25519_scalar_ops.muladd(output, a, b, c);
    MEMCMP_EQUAL(expected, output, sizeof(expected));
}
